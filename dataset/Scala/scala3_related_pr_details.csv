issueId,prId,prTitle,prDescription,prStatus,prFilePaths,prCreatorLoginId,prCreatedDate,prMergedDate
22794,22797,Fix #22794: Emit the definition of `Arrays.newArray` even though it's a primitive.,"Until 3.6.x  we used the user-space definition of `Arrays.newArray` in Scala.js. We changed it to a primitve in 2852168e8ddac8aa318635a73c79f64282aa39d1  to match the behavior of the JVM backend.  However  that had the side effect of not emitting its definition at all  like other primitives. For backward binary compat reasons  we do need that definition.  We specifically make an exception for that method  which is now emitted  even though it is otherwise treated as a primitive.  ---  Needs to be backported to the 3.7.0-x branch.",closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; sbt-test/scalajs/backward-compat/build.sbt; sbt-test/scalajs/backward-compat/project/plugins.sbt; sbt-test/scalajs/backward-compat/src/test/scala/NewArrayIssue22794Test.scala; sbt-test/scalajs/backward-compat/test,sjrd,2025-03-13T16:09:17Z,2025-03-13T19:08:58Z
22794,22801,"Backport ""Fix #22794: Emit the definition of Arrays.newArray even though it's a primitive."" to 3.7.0",Backports #22797 to Scala 3.7.0-RC2,closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; sbt-test/scalajs/backward-compat/build.sbt; sbt-test/scalajs/backward-compat/project/plugins.sbt; sbt-test/scalajs/backward-compat/src/test/scala/NewArrayIssue22794Test.scala; sbt-test/scalajs/backward-compat/test,WojciechMazur,2025-03-13T21:40:20Z,2025-03-14T12:02:36Z
22794,22796,Add support for running the `test` sub-command with the bisect script,"Example usage:  ```bash scala project/scripts/bisect.scala --jvm 17 -- --bootstrapped --releases 3.6.4-RC1-bin-20241120-bd07317-NIGHTLY... test smth.test.scala ```  `smth.test.scala` ```scala //> using dep org.scalameta::munit::1.1.0 //> using platform js  class MyTests extends munit.FunSuite {   test(""foo"") {     assert(2 + 2 == 4)   } } ```  Allowed to bisect https://github.com/scala/scala3/issues/22794",closed,project/scripts/bisect.scala,Gedochao,2025-03-13T15:34:13Z,2025-03-14T06:44:51Z
22788,22789,[build] Refine `checkReleasedTastyVersion` logic to handle using unstable reference version of a new minor ,"In #22786 we've followed the process and updated referenceVersion to latest released version which happens to be 3.7.0-RC1 producing TASTY `28.7-experimental-1`.  All nightly version when patch > 0 should be using TASTy version incremented by 1  in case of unexpected binary breakage. However non-bootstrapped tests (eg. FromTastyTest) would fail if we'd increase tasty version to `28.8-experimental-1` because these require the produced and consumed Scala files (eg. in `FromTastyTest`) to either:  - be produced by older stable compiler  - produced with exactly the same TASTy version   Because of that we're adding special case to checking version of released tasty to allow using the same tasty format as unstable reference version if the reference version is the RC release of new minor (patch == 0)  Fixes #22788  [skip ci]",closed,project/Build.scala,WojciechMazur,2025-03-13T09:13:15Z,2025-03-13T09:45:57Z
22780,22802,chore: add support for 'abstract override' modifier,"Closes #22780   I'm not sure where to add a test for this  but I've run it locally and it works as expected:  <img width=""1728"" alt=""Screenshot 2025-03-14 at 01 48 41"" src=""https://github.com/user-attachments/assets/40c0a80d-5152-4eb2-8c77-2699186cf81a"" /> ",closed,scaladoc/src/dotty/tools/scaladoc/api.scala; scaladoc/src/dotty/tools/scaladoc/tasty/SymOps.scala,hamzaremmal,2025-03-14T00:55:08Z,2025-03-14T17:07:44Z
22768,22770,[Fix Nightly CI] DebugTests on Java 8,"[test_java8]  Fixes #22768 ",closed,compiler/test/dotty/tools/debug/ExpressionEvaluator.scala,adpi2,2025-03-11T13:02:15Z,2025-03-11T16:12:35Z
22748,22749,Ignore params to default arg getters,"Fixes #22746  Fixes #22748   Default arg getters are defined with dependencies they don't use.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i22746.scala,som-snytt,2025-03-07T21:12:25Z,2025-03-10T20:56:09Z
22746,22749,Ignore params to default arg getters,"Fixes #22746  Fixes #22748   Default arg getters are defined with dependencies they don't use.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i22746.scala,som-snytt,2025-03-07T21:12:25Z,2025-03-10T20:56:09Z
22744,22751,Restore resolving prefixes of implicit Ident,"Fixes #22744   This code was originally for derived  but is also needed for implicits (where private objects are in the path).  https://github.com/scala/scala3/pull/17095",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i22744.scala,som-snytt,2025-03-08T17:46:13Z,2025-03-10T09:05:35Z
22742,22757,No warning for parameter of overriding method,"Quiet the unused parameter warning when the method is an override.  Fixes #22742  ",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i15503e.scala; tests/warn/i22742.scala; tests/warn/scala2-t11681.scala; tests/warn/unused-params.scala,som-snytt,2025-03-09T23:45:10Z,2025-03-11T01:49:01Z
22706,22708,Dealias before checking for member in lint,"Fixes #22705 Fixes #22706  Fixes #22727   Follow-up to https://github.com/scala/scala3/pull/22502 by inserting a `dealias` when arriving at `target` type.  Refactored the body of `hidden` to make it easier to read. Adjusted the doc for the same reason.  As a reminder to self  the original reason for special handling of aliases was due to subclassing  but overrides are excluded. (One could restore that warning for edge cases.)  The long doc explaining the handling of leading implicits is moved to the end (as an appendix).  Despite best efforts  I was unable to make the doc longer than the code.",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/ext-override.scala; tests/warn/i16743.scala; tests/warn/i22232.scala; tests/warn/i22705.scala; tests/warn/i22706.scala; tests/warn/i22727.scala,som-snytt,2025-03-04T23:13:10Z,2025-03-10T23:24:24Z
22705,22708,Dealias before checking for member in lint,"Fixes #22705 Fixes #22706  Fixes #22727   Follow-up to https://github.com/scala/scala3/pull/22502 by inserting a `dealias` when arriving at `target` type.  Refactored the body of `hidden` to make it easier to read. Adjusted the doc for the same reason.  As a reminder to self  the original reason for special handling of aliases was due to subclassing  but overrides are excluded. (One could restore that warning for edge cases.)  The long doc explaining the handling of leading implicits is moved to the end (as an appendix).  Despite best efforts  I was unable to make the doc longer than the code.",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/ext-override.scala; tests/warn/i16743.scala; tests/warn/i22232.scala; tests/warn/i22705.scala; tests/warn/i22706.scala; tests/warn/i22727.scala,som-snytt,2025-03-04T23:13:10Z,2025-03-10T23:24:24Z
22690,22695,Exclude synthetic this.m  Any.m from import lookup,"Follow-up to https://github.com/scala/scala3/pull/22633 which restricts import prefixes to stable prefixes.  This commit further excludes `this` and `super`; these are arbitrary synthetic expressions introduced by macros.  Noticed at https://github.com/scala/scala3/issues/22690#issuecomment-2692833526 which now warns correctly.  Requires a unit test.  Fixes #22690 ",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala,som-snytt,2025-03-03T04:10:09Z,2025-03-04T08:58:59Z
22689,22693,fix: do not run repl test on windows,"[test_windows_full]  Closes #22686  #22689",closed,compiler/test/dotty/tools/scripting/BashExitCodeTests.scala,hamzaremmal,2025-03-02T21:04:40Z,2025-03-02T23:58:59Z
22686,22693,fix: do not run repl test on windows,"[test_windows_full]  Closes #22686  #22689",closed,compiler/test/dotty/tools/scripting/BashExitCodeTests.scala,hamzaremmal,2025-03-02T21:04:40Z,2025-03-02T23:58:59Z
22672,22682,Register nowarn when inlining,"Fixes #22672   ""Register"" `@nowarn` annotations on inlined methods and also on expressions in inlined bodies.  `registerNoWarn` is refactored to `run.suppressions` for ease of use.",closed,compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/warn/i22672/lib_1.scala; tests/warn/i22672/usage_2.scala,som-snytt,2025-02-28T13:25:18Z,2025-03-11T09:42:03Z
22662,22664,Nowarn public implicit val class params,"Similar to explicit param.  Fixes #22662 ",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i15503f.scala,som-snytt,2025-02-25T04:10:39Z,2025-03-06T18:10:43Z
22642,22663,Handle Typeable,"Fixes #22642   Turn code comments into actual code.",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i15503d.scala; tests/warn/i21525.scala,som-snytt,2025-02-25T02:30:55Z,2025-02-28T15:47:35Z
22629,22633,Check only stable qual for import prefix,"Selection from a tree with synthetic span looks like a rewrite from imported symbol  but only check that if the qualifier is stable.  In the example  it was an implicit class (`EitherOps`)  which in turn induced many costly  unnecessary type comparisons.  The test sample code is not yet minimized  so it is just for demonstration purposes. Since the symptom is a performance regression  there is no trivial test that demonstrates it was doing something wrong  as well as doing it slowly.  Locally  `-verbose` reports ``` [typer  in 5991ms] [checkUnusedPostTyper  in 337ms] ```  Fixes #22629  ",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i22629.scala,som-snytt,2025-02-20T23:29:55Z,2025-02-25T06:03:51Z
22626,22627,Constructor companion gets privateWithin,"Follow-up to #22560  Fixes #22626   When creating a companion for a constructor proxy  the companion is `protected` if the class is. Now it also receives the `privateWithin` boundary of the class  for `protected[p]`.  ",closed,compiler/src/dotty/tools/dotc/core/NamerOps.scala; tests/neg/i18545.check; tests/neg/i18545.scala; tests/neg/i22560b.scala; tests/neg/i22560c/client_2.scala; tests/neg/i22560c/lib_1.scala; tests/pos/i22560.scala; tests/pos/i22560b/client_2.scala; tests/pos/i22560b/lib_1.scala,som-snytt,2025-02-20T11:27:14Z,2025-02-21T12:35:50Z
22608,22611,Allow observing an indent after conditional,"Normally do not infer NEWLINE within parens  but special case old syntax for conditionals  so that it can observe indented syntax. The mechanism is to inject an Indented region when parsing a parenthesized condition which is within an InParens region  such as an arg list. The effect is not to advance past EOL after `(true)`.  Fixes #22608 ",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i22608.scala,som-snytt,2025-02-15T22:47:29Z,2025-02-19T10:00:44Z
22592,22618,Fix issue with static `this` references erroring in quoted code,"Previously  inherited methods  even if accessed via static objects  were not able to be used in quotations  unless explicitly pointed to with a non-`this` prefix. This was due to the fact that during the cross-stage safety check  first the method itself was checked for if it was static (which for the inherited method  it was not)  and if not  the prefix was checked further  erroring on any `this` tree found along the way.  This was fixed by allowing `this` trees if they point to static objects. This way not only is the initial issue fixed  but also we are able to freely reference static methods with `this`  like `'{this.objectMethod}` (whereas previously  only `'{Object.objectMethod}` or `'{objectMethod}` were allowed  despite them all pointing to the same static method).  Fixes #22592 ",closed,compiler/src/dotty/tools/dotc/staging/CrossStageSafety.scala; tests/neg/i22592.scala; tests/pos/i22592.scala,jchyb,2025-02-17T14:45:27Z,2025-02-20T13:36:20Z
22590,22604,Check exhaustivity of any case class,Fixes #22590 ,closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/dotc/core/Comments.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; scaladoc/src/dotty/tools/scaladoc/site/templates.scala; tests/pos/switches.scala; tests/warn/i15662.scala; tests/warn/i22590.arity2.scala; tests/warn/i22590.scala; tests/warn/opaque-match.scala; tests/warn/t10373.scala,dwijnand,2025-02-14T16:13:17Z,2025-03-03T16:20:24Z
22571,22765,chore: add regression test for #22567,"Closes #22567  ~Most likely closing #22571 too~  The last run of Open CB confirmed that it closes #22571 too.",closed,tests/pos/i22567.scala,hamzaremmal,2025-03-10T20:21:46Z,2025-03-11T19:58:21Z
22567,22765,chore: add regression test for #22567,"Closes #22567  ~Most likely closing #22571 too~  The last run of Open CB confirmed that it closes #22571 too.",closed,tests/pos/i22567.scala,hamzaremmal,2025-03-10T20:21:46Z,2025-03-11T19:58:21Z
22560,22563,Constructor proxy is restricted if class is protected,"Calling a constructor proxy should be at least as restricted as using `new`.  Add `Protected` to a constructor companion if the class is protected.  If the companion exists but is not protected  then make the constructor proxy protected.  Explicit `new` already errored for access.  Fixes #22560 ",closed,compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; docs/_docs/reference/other-new-features/creator-applications.md; tests/neg/i22560.scala; tests/neg/i22560b.scala; tests/pos/i22560.scala,som-snytt,2025-02-09T09:26:17Z,2025-02-17T17:12:14Z
22560,22627,Constructor companion gets privateWithin,"Follow-up to #22560  Fixes #22626   When creating a companion for a constructor proxy  the companion is `protected` if the class is. Now it also receives the `privateWithin` boundary of the class  for `protected[p]`.  ",closed,compiler/src/dotty/tools/dotc/core/NamerOps.scala; tests/neg/i18545.check; tests/neg/i18545.scala; tests/neg/i22560b.scala; tests/neg/i22560c/client_2.scala; tests/neg/i22560c/lib_1.scala; tests/pos/i22560.scala; tests/pos/i22560b/client_2.scala; tests/pos/i22560b/lib_1.scala,som-snytt,2025-02-20T11:27:14Z,2025-02-21T12:35:50Z
22548,22549,Allow private members when computing the denotation of a NamedType,Closes #22548,closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i22548.scala,hamzaremmal,2025-02-07T14:21:15Z,2025-02-07T16:28:36Z
22535,22541,"Revert ""Exclusive capabilities""","Tests started to timeout when we merged the *Exclusive Capabilities* PR. We will revert it for now until we inspect it further.  Reverts scala/scala3#22218 Closes #22535",closed,compiler/src/dotty/tools/backend/jvm/BTypesFromSymbols.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Existential.scala; compiler/src/dotty/tools/dotc/cc/Fresh.scala; compiler/src/dotty/tools/dotc/cc/SepCheck.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/cc/Synthetics.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/SymUtils.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/parsing/Scanners.scala; compiler/src/dotty/tools/dotc/printing/Formatting.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/transform/CapturedVars.scala; compiler/src/dotty/tools/dotc/transform/CheckReentrant.scala,hamzaremmal,2025-02-06T12:02:09Z,2025-02-06T13:53:56Z
22533,22536,Recover Scala 2's semantics for `AnyVal` under `-Ycompile-scala2-library`,Closes #22533,closed,compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; compiler/test/dotty/tools/dotc/printing/PrintingTest.scala; project/Scala2LibraryBootstrappedMiMaFilters.scala; tests/printing/posttyper/i22533.check; tests/printing/posttyper/i22533.flags; tests/printing/posttyper/i22533.scala,hamzaremmal,2025-02-06T09:58:44Z,2025-02-07T00:16:51Z
22518,22601,Avoid crash in uninhab check in Space,Fixes #22518 ,closed,compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/pos/i22518.scala,dwijnand,2025-02-14T10:01:37Z,2025-02-17T13:14:36Z
22515,22517,Align erasure of `Array[Nothing]` and `Array[Null]` with Scala 2,Closes #22515,closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; sbt-test/scala2-compat/erasure/build.sbt; sbt-test/scala2-compat/erasure/dottyApp/Api.scala; sbt-test/scala2-compat/erasure/dottyApp/Main.scala; sbt-test/scala2-compat/erasure/scala2Lib/Api.scala,hamzaremmal,2025-02-04T20:05:58Z,2025-02-05T18:02:06Z
22507,22510,Don't warn retainedBody,"Fixes #22507   Easy name-based check for private members.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/t22507.scala,som-snytt,2025-02-04T00:27:42Z,2025-02-04T03:24:16Z
22498,22630,`@publicInBinary` has now effect on secondary constructors,Closes #22498,closed,compiler/src/dotty/tools/dotc/inlines/PrepareInlineable.scala; compiler/src/dotty/tools/dotc/transform/ExpandPrivate.scala; tests/neg/i22498.check; tests/neg/i22498.scala; tests/run/i22497.check; tests/run/i22497.scala; tests/run/i22498.scala,hamzaremmal,2025-02-20T20:13:42Z,2025-02-21T13:50:23Z
22497,22591,Stabilise `@publicInBinary`,"Closes #22497  Before merging this PR  the SIP committee still has to vote the acceptance of the SIP.",closed,library/src/scala/annotation/publicInBinary.scala; tests/neg/i22498.check; tests/neg/i22498.scala; tests/neg/inline-unstable-accessors.scala; tests/neg/publicInBinaryOverride.check; tests/neg/publicInBinaryOverride.scala; tests/pos-macros/i15413/Macro_1.scala; tests/pos-macros/i15413b/Macro_1.scala; tests/pos-macros/i19526b/Test.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala; tests/run/i13215.scala; tests/run/i22497.scala; tests/run/i22498.scala; tests/run/noProtectedSuper.scala; tests/run/publicInBinary/Lib_1.scala,hamzaremmal,2025-02-12T15:50:48Z,2025-02-22T00:55:28Z
22496,22529,Follow Scala 2 when generating trait constructors under `-Ycompile-scala2-library`,Closes #22496,closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; project/Scala2LibraryBootstrappedMiMaFilters.scala,hamzaremmal,2025-02-05T22:10:37Z,2025-02-06T15:40:52Z
22470,22487,fix: record calls to constructors in lambdaLift,"possible fix for #21931 #22470  Attempt no. 2 for #21931 ",closed,compiler/src/dotty/tools/dotc/transform/Dependencies.scala; compiler/src/dotty/tools/dotc/transform/LambdaLift.scala; tests/pos/i21931.scala; tests/pos/i22470.scala,KacperFKorban,2025-01-31T13:28:11Z,2025-02-18T15:44:02Z
22461,22462,Fix for #22461 Empty ClassPath attribute in one or more classpath jars causes crash,"Change to how an empty or `null` jar manifest `ClassPath:` property is handled:  in dotty.tools.dotc.classpath.ClassPathFactory:  - `classesInExpandedPath(...)` returns and empty `IndexedSeq` rather than crash - `isJarOrZip` returns `false` on a `null` reference rather than crash  in dotty.tools.dotc.classpath.FileUtils:  - `createSourcePath`  fails with an error message on a `null` file parameter.  In the context of #22461  this causes an empty `ClassPath:` property to be treated the same as a mispelled or missing classpath entry  which are silently ignored  matching the behaviour of legacy scripts.  Closes #22461  ",closed,compiler/src/dotty/tools/io/Jar.scala,philwalk,2025-01-26T18:32:58Z,2025-02-21T23:49:02Z
22460,22464,Fix old scala runner to use correct JLine classpath,"* Remove JNA dependencies from dist scripts.  * Add `jline-native` dependency (used by jline-terminal-jni)  Issue affected only Windows users - when executing the script the no longer existing class path entries (jna-5  and jline-terminal-jna) were reported with errors as not existing files   Fixes #22460  ",closed,dist/bin/common; dist/bin/common.bat; dist/bin/scala.bat; dist/bin/scalac.bat,WojciechMazur,2025-01-27T11:57:24Z,2025-01-27T13:37:45Z
22456,22488,Widen skolem types when adding parent refinements,closes #22456 ,closed,compiler/src/dotty/tools/dotc/core/NamerOps.scala; tests/pos/i22456.scala,KacperFKorban,2025-01-31T13:29:11Z,2025-02-06T10:00:46Z
22439,22458,Restrict implicit args to using,"Typer#adaptNoArgsImplicitMethod populates implicit args when an arg list is missing. To remedy missing implicits  it tries a named application `using` args it did find. Then Applications#tryDefault supplies a default arg if available. A previous fix to allow tryDefault to supply implicit args for `implicit` params is now restricted to explicit `using`; typer now adds `using` for `implicit` when it needs to try defaults.  This commit restores propagatedFailure and the previous condition that default params are tried if there is an error that is not an ambiguity. An additional restriction is that default params must be useful: there must be a param which has a default arg to be added (because it's not a named arg).  Fixes #22439 ",closed,compiler/src/dotty/tools/dotc/transform/init/Objects.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/given-ambiguous-default-1.check; tests/neg/i18123.check; tests/neg/i19594.check; tests/neg/i19594.scala; tests/neg/i22439.check; tests/neg/i22439.scala; tests/run/extra-implicits.scala,som-snytt,2025-01-26T07:59:32Z,2025-03-10T09:35:03Z
22437,22451,Permit Capture Refs for Uninitialized Type and Term Params in BiTypeMap,"Fixes #22437  The check crashes the compiler when mapping over a capture variable in an upper bound of the form `CapSet^{C^}` as well as path captures in function signatures. See the test `capture-vars-subtyping2.scala` for examples.",closed,compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-custom-args/captures/capture-vars-subtyping2.scala,bracevac,2025-01-24T17:43:14Z,2025-02-17T16:40:14Z
22424,22448,Fix regression: do not approximate prefixes when using memberType in reflect API,Fixes #22424,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/pos-macros/i22424/Macro_1.scala; tests/pos-macros/i22424/Test_2.scala,jchyb,2025-01-24T11:25:06Z,2025-03-04T18:19:28Z
22412,22434,Filter help renders box border,Fixes #22412 ,closed,compiler/src/dotty/tools/dotc/reporting/MessageRendering.scala; tests/neg/nowarn.check; tests/warn/deprecated-origin-verbose.check; tests/warn/i22412.check; tests/warn/i22412.scala,som-snytt,2025-01-22T15:48:14Z,2025-01-23T07:32:32Z
22408,22452,fix: treat static vals as enclosures in lambdalift,closes #22408 ,closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/transform/LambdaLift.scala; tests/pos/i22408.scala,KacperFKorban,2025-01-24T18:34:27Z,2025-02-17T16:46:31Z
22376,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
22367,22371,chore: align @implicitNotFound and @implicitAmbigous with the spec,"Closes #22367 Closes #22346",closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/i22367.check; tests/neg/i22367.scala,hamzaremmal,2025-01-15T10:58:10Z,2025-01-15T12:31:24Z
22364,22582,Fix copy of annotation on @main methods,"Fixes #22364.  See https://github.com/scala/scala3/pull/13858#discussion_r1951084285.",closed,compiler/src/dotty/tools/dotc/ast/MainProxies.scala; tests/pos/annot-main-22364.scala; tests/pos/annot-main-22364b.scala; tests/pos/annot-main-22364c.scala,mbovel,2025-02-11T15:37:09Z,2025-02-12T12:34:28Z
22359,22381,Fix inline proxy generation for opaque types referencing other opaque types,"Fixes #22359 Fixes #17243",closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/22359a.scala; tests/pos/22359b.scala; tests/pos/i17243.scala,jchyb,2025-01-15T16:09:40Z,2025-01-20T10:57:50Z
22357,22368,Check if a prefix is valid before selecting from a type,closes #22357 ,closed,compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/test/dotc/neg-best-effort-unpickling.excludelist; tests/neg/i22357.check; tests/neg/i22357.scala; tests/neg/i22357a.check; tests/neg/i22357a.scala,KacperFKorban,2025-01-14T15:36:43Z,2025-02-06T10:00:56Z
22350,22353,fix: drop jackson-module-scala from CB,"Closes #22350   FYI @WojciechMazur ",closed,community-build/test/scala/dotty/communitybuild/CommunityBuildTest.scala,hamzaremmal,2025-01-12T23:24:10Z,2025-01-12T23:24:49Z
22346,22371,chore: align @implicitNotFound and @implicitAmbigous with the spec,"Closes #22367 Closes #22346",closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/i22367.check; tests/neg/i22367.scala,hamzaremmal,2025-01-15T10:58:10Z,2025-01-15T12:31:24Z
22333,22337,Normalise the types for Type Mismatch Error (E007),Closes #22333,closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; tests/neg/i22333.check; tests/neg/i22333.scala,hamzaremmal,2025-01-10T14:44:07Z,2025-01-13T09:12:14Z
22332,22435,No outdent at eof,"Fixes #22332   The reference does not mention `<eof>`.  `<outdent>` insertion does not require a particular next token  though some next tokens affect it (that is  leading infix or tokens that close an indentation region). It does require a ""first token on the next line""  for which we may take `<eof>` as the lack of a token.  Of course  ordinary error messages say `eof`.  The same text with an opening brace is unchanged: ``` 5 |   | ^   | '}' expected  but eof found ```",closed,compiler/src/dotty/tools/dotc/parsing/Scanners.scala; tests/pos/i22332.scala,som-snytt,2025-01-22T16:54:39Z,2025-01-29T10:45:59Z
22324,22340,Drop `EmptyTuple` handling from `NamedTupleDecomposition.apply`,"We previously needed to handle the case where the result of `toTuple` was an `EmptyTuple` separately from the rest  since `apply` used to be only defined for `NonEmptyTuple`s. This was changed in #21291  making the inline match in `NamedTupleDecomposition.apply` no longer necessary.  The underlying issue with the proxies introduced to handle opaque types with inline defs is likely still present. Nevertheless  it is probably best to fix this specific instance of the problem with NamedTuples as soon as possible.  Fixes #22324",closed,library/src/scala/NamedTuple.scala; tests/pos/i22324.scala,EugeneFlesselle,2025-01-10T16:36:41Z,2025-01-13T10:51:31Z
22322,22323,Align the spec to allow the  marker,Closes #22322 ,closed,docs/_spec/01-lexical-syntax.md,hamzaremmal,2025-01-08T10:50:35Z,2025-01-08T13:00:07Z
22320,22321,Add regression test for #22320,"This issue was found when running scala 3.6.2 code (latest stable version for now)  but it seems that a fix was submitted in https://github.com/scala/scala3/pull/21527 (which will be available in 3.6.3)  Closes #22320",closed,tests/neg/i22320.check; tests/neg/i22320.scala,hamzaremmal,2025-01-08T10:31:22Z,2025-01-08T11:59:16Z
22279,22268,Tweak ExtensionNullifiedByMember,"The warning accounted for an opaque receiver but not for opaque parameter types.  This commit warns only if corresponding parameters are both opaque (or both transparent).  The warning message about extensions that will _never_ be selected has limited generality.  This commit addresses conversions to the receiver type.  Maybe the correct fix is ""never say never"".  Enhances the message noticed at #22267 Fixes #22279 ",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/i16743.check; tests/warn/i22267.check; tests/warn/i22267.scala; tests/warn/i22279.scala,som-snytt,2024-12-29T19:45:31Z,2025-01-06T16:52:22Z
22247,22303,Fix coverage serialization when encountering macro suspension ,"Fixes #22247  The fix is simple  as we mainly move the coverage object to a global ContextBase object  which persists it between runs. Initially I thought that appending the newly generated coverage indices would be enough  but if the macro suspends after the InstrumentCoverage phase runs  we end up with duplicate indices. For that reason  when generating indexes for a compilation unit  we also remove the previously generated ones for the same compilation unit.  To support having multiple scala files compiled in the coverage tests I had to slightly adjust the suite. While doing that  I noticed that some check files for run tests were ignored  as they were incorrectly named. I added an assertion that throws when `.check` do not exist and renamed the files appropriately (having to add some additional ones as well).",closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; tests/coverage/pos/macro-late-suspend/Test.scala; tests/coverage/pos/macro-late-suspend/UsesTest.scala; tests/coverage/pos/macro-late-suspend/VisitorMacros.scala; tests/coverage/pos/macro-late-suspend/test.scoverage.check; tests/coverage/run/i16940/i16940.check; tests/coverage/run/i16940/test.scoverage.check; tests/coverage/run/i18233-min/i182233-min.check; tests/coverage/run/i18233-min/test.scoverage.check; tests/coverage/run/i18233/i18233.check; tests/coverage/run/i18233/test.scoverage.check; tests/coverage/run/java-methods/JavaObject.check; tests/coverage/run/macro-suspend/Macro.check; tests/coverage/run/macro-suspend/Macro.scala; tests/coverage/run/macro-suspend/Test.scala; tests/coverage/run/macro-suspend/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.check; tests/coverage/run/varargs/test.check; tests/coverage/run/varargs/test.scoverage.check,jchyb,2025-01-03T13:04:36Z,2025-01-10T12:39:54Z
22245,22658,Account for named tuples in space subtraction,"Fixes #22245  Co-authored-by: anna herlihy <herlihyap@gmail.com>",closed,compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/pos/named-tuples-i22245.scala,bracevac,2025-02-24T17:37:57Z,2025-02-25T02:29:39Z
22239,22336,Connect the input to the compiler in `sbt`,Closes #22239,closed,project/Build.scala,hamzaremmal,2025-01-10T14:08:33Z,2025-01-10T16:47:53Z
22233,22362,Warn on bad extensions of aliases,Fixes https://github.com/scala/scala3/issues/22233,closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/ext-override.scala; tests/warn/i16743.check; tests/warn/i16743.scala; tests/warn/i22233.scala,RoccoMathijn,2025-01-13T18:15:14Z,2025-01-29T10:43:10Z
22232,22502,Warn universal extensions on opaque types,"Fixes #22232   Work also done by @hamzaremmal  @julian-a-avar-c and @nmcb",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/i22232.check; tests/warn/i22232.scala,rochala,2025-02-03T18:00:03Z,2025-02-24T12:23:13Z
22226,22238,Fix #22226: Use `classOf[BoxedUnit]` for Unit array in `ArrayConstructors`.,"The `ArrayConstructors` phase rewrites array constructors to calls to `scala.runtime.Arrays.newArray`. When it does that  it must pass the run-time `jl.Class` of the element type. Previously  it used `classOf[Unit]` when creating an `Array[Unit]` (or nested). That is not correct  as from the Java perspective  we need to create `Array[BoxedUnit]`.  We now identify `elemType <: Unit` and replace it with `BoxedUnit`.  ---  This highlights a limitation of the Scala.js backend. We should rewrite calls to `newArray` in the backend to use direct array creation instead.",closed,compiler/src/dotty/tools/dotc/transform/ArrayConstructors.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,sjrd,2024-12-18T13:01:43Z,2024-12-18T14:46:07Z
22224,22227,chore: use sbt/setup-sbt when using ubuntu-latest image,Closes #22224,closed,.github/workflows/build-sdk.yml; .github/workflows/language-reference.yaml; .github/workflows/launchers.yml; .github/workflows/scaladoc.yaml; .github/workflows/test-cc.yml,hamzaremmal,2024-12-17T12:13:45Z,2024-12-17T14:10:15Z
22224,22228,fix: add sbt/setup-sbt for the dependency graph workflow,"IT turns out that https://github.com/scalacenter/sbt-dependency-submission doesn't include sbt if it's missing  Related to #22224  [skip ci]",closed,.github/workflows/dependency-graph.yml,hamzaremmal,2024-12-17T15:02:31Z,2024-12-17T15:10:31Z
22219,22369,Preserve hard unions in widenSingletons,Fixes #22219.,closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/22219.scala; tests/pos/22219b.scala,mbovel,2025-01-14T15:51:31Z,2025-01-15T14:32:03Z
22212,22622,Bring back pattern match exhaustivity checking for macros,"Also move the `-Werror` reporting until after the suspended warning reporting - this was needed for the added test to work (as previously the compilation would not error out even if `-Werror` was used).  Fixes #22212",closed,compiler/src/dotty/tools/dotc/transform/PatternMatcher.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/warn/i22212.check; tests/warn/i22212/Data_1.scala; tests/warn/i22212/Macro_1.scala; tests/warn/i22212/Test_2.scala,jchyb,2025-02-18T11:53:00Z,2025-03-03T16:59:58Z
22201,22205,REPL: JLine: follow recommendation to use JNI  not JNA; also JLine 3.27.1 (was 3.27.0),"as per the https://github.com/jline/jline3 readme   and as per discussion and linked items on #22201   fixes #22201  note that as far as I can tell  the stuff I removed from libexec/common-shared is dead code  @philwalk dunno if you're still around but judging from #12405 you might be a good reviewer here  note that I believe we _don't_ need to also port https://github.com/scala/scala/pull/10889 here  since we are already using separate JLine JARs rather than the all-in-one JAR  I've chosen not to upgrade all the way to JLine 3.28.0 at the moment  as it is quite new (2 days ago) and doesn't appear to have any fixes that might be critical.",closed,dist/libexec/common-shared; project/Build.scala,SethTisue,2024-12-13T02:13:03Z,2024-12-19T16:15:05Z
22201,22271,"Backport ""REPL: JLine: follow recommendation to use JNI  not JNA; also JLine 3.27.1 (was 3.27.0)"" to 3.6",Backports #22205 to the 3.6.3.  PR submitted by the release tooling. [skip ci],closed,dist/libexec/common-shared; project/Build.scala,WojciechMazur,2024-12-30T12:50:28Z,2024-12-30T16:44:18Z
22201,22377,"Backport ""REPL: JLine: follow recommendation to use JNI  not JNA; also JLine 3.27.1 (was 3.27.0)"" to LTS ",Backports #22205 to Scala 3.3.5-RC2 LTS,closed,dist/bin/common; project/Build.scala,WojciechMazur,2025-01-15T13:58:14Z,2025-01-16T09:58:57Z
22194,22199,Fix layout of released SDK archives  restore intermediate top-level directory ,"Fixes #22194   Restores top-level directory `scala3-${version}` that is present in artifacts published before Scala 3.6  removed during hotfix  3.6.1 release.  We now follow the [Well formed SDK archives layout](https://github.com/sdkman/sdkman-cli/wiki/Well-formed-SDK-archives). Removing the top-level directory even though at first glance looked like an improvement was in fact introducing problems to multiple package managers and build tools.   Follow up actionable:   - [x] - Republish release artifacts for Scala 3.6.2   - [x] - Revert https://github.com/coursier/apps/pull/256",closed,.github/workflows/ci.yaml; project/Build.scala,WojciechMazur,2024-12-12T10:47:14Z,2024-12-12T14:21:33Z
22194,22272,"Backport ""Fix layout of released SDK archives  restore intermediate top-level directory "" to 3.6",Backports #22199 to the 3.6.3.  PR submitted by the release tooling. [skip ci],closed,.github/workflows/ci.yaml; project/Build.scala,WojciechMazur,2024-12-30T12:50:35Z,2024-12-30T16:44:42Z
22192,22315,Fail more eagerly when trying to adapt named unapply patterns,closes #22192 ,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/neg/i22192.check; tests/neg/i22192.scala; tests/neg/i22192a.check; tests/neg/i22192a.scala; tests/pos/i22192.scala,KacperFKorban,2025-01-06T16:13:45Z,2025-01-09T12:42:11Z
22150,22325,Handle TypeProxy of Named Tuples in unapply,"Fixes #22150. Previously  there were several ways to check if something was a Named Tuple (`derivesFromNamedTuple`  `isNamedTupleType` and `NamedTuple.unapply`)  this PR moves everything into `NamedTuple.unapply`.  `namedTupleElementTypes` now takes an argument `derived` that when false will skip `unapply` (to avoid infinite recursion  used in desugaring and RefinedPrinter where trees can have invalid cycles).  ",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/interactive/Completion.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/run/i22150.check; tests/run/i22150.scala,aherlihy,2025-01-08T20:58:00Z,2025-01-13T20:55:27Z
22147,22545,Rule Out Exports of Member of the Current Class,"Fix #22147   Supersedes #22503  Co-authored-by: Jan-Pieter van den Heuvel <jan-pieter@users.noreply.github.com> Co-authored-by: Willem W Bakker <wwbakker@users.noreply.github.com>",closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/exports3.scala; tests/neg/i20245.check; tests/neg/i20245/Typer_2.scala,bracevac,2025-02-06T17:25:05Z,2025-02-12T15:02:48Z
22145,22361,Avoid infinite recursion when looking for suggestions,"Keep a a set of seen parent symbols between `rootsIn` and `rootsStrictlyIn` to avoid infinitely growing paths that refer to the same value  such as `Collection.this.O.O.O.O.O.O.O....` when computing import suggestions for:  ```scala trait Collection:   val base: Collection = ???   base.foo()    object O extends Collection:     def foo(): Int = ??? ```  Fixes #22145.",closed,compiler/src/dotty/tools/dotc/typer/ImportSuggestions.scala; tests/neg/22145.check; tests/neg/22145.scala; tests/neg/22145b.check; tests/neg/22145b.scala; tests/neg/22145c.check; tests/neg/22145c.scala; tests/neg/22145d.check; tests/neg/22145d.scala; tests/neg/22145e.check; tests/neg/22145e.scala; tests/neg/22145f.check; tests/neg/22145f.scala; tests/neg/22145g.check; tests/neg/22145g.scala,mbovel,2025-01-13T17:30:32Z,2025-02-16T19:43:16Z
22103,22299,Canonicalize capture variable subtype comparisons,"Fixes #22103  Subtype problems where at least one side is a type variable representing a capture variable are canonicalized to capturing type comparisons on the special `CapSet` for the universe capture sets. For example  `C <: CapSet^{C^}` becomes `CapSet^{C^} <: CapSet^{C^}`  and `A <: B` becomes `CapSet^{A^} <: CapSet^{B^}` if both `A` and `B` are capture variables.  Supersedes https://github.com/scala/scala3/pull/22183 and https://github.com/scala/scala3/pull/22289. This solution is overall cleaner and does not require adding a new bit to the TypeComparer's ApproxState.  TODOs/Issues/Questions:  - [x] Fix extension method in test [cc-poly-varargs.scala](https://github.com/dotty-staging/dotty/blob/capture-subtyping-canon/tests/pos-custom-args/captures/cc-poly-varargs.scala). Currently causes an infinite regress.    - [x] Fix the aftermath       * tests/neg-custom-args/captures/lazylists-exceptions.scala       * tests/neg-custom-args/captures/exceptions.scala       * tests/neg-custom-args/captures/real-try.scala       * tests/run-custom-args/captures/colltest5 - [x] Some negative cases in test [capture-vars-subtyping.scala](https://github.com/dotty-staging/dotty/blob/capture-subtyping-canon/tests/neg-custom-args/captures/capture-vars-subtyping.scala) pass: `D <: E` fails  but its canonicalized form `CapSet^{D^} <: CapSet^{E^}` now succeeds. Potential problem in the subcapturing implementation. - [x] ~Extend to intersection/unions `def f[C^  D^  E <: C | D  F <: C & D](...) = ...` etc.~ Lacking good uses cases  not planned right now. - [X] ~If we have `C^` declared in the current context  should there be a difference between `C` vs. `C^` for subsequent mentions? We currently do  but seems a bit too subtle for users.~ Will be addressed by a new scheme for declaring capture variables using context bounds.",closed,compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg-custom-args/captures/capture-vars-subtyping.scala; tests/pos-custom-args/captures/cc-poly-varargs.scala,bracevac,2025-01-02T13:40:48Z,2025-01-22T20:14:07Z
22076,22602,Add regression test for #22076,Closes #22076.,closed,tests/pos/match-type-disjoint-22076.scala,mbovel,2025-02-14T12:49:27Z,2025-02-14T14:47:55Z
22071,22243,Remove special overriding logic for explicit nulls,Fixes #22071 ,closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/JavaNullInterop.scala; compiler/src/dotty/tools/dotc/core/Mode.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/OverridingPairs.scala; compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; project/Build.scala,HarrisL2,2024-12-19T05:15:57Z,2025-01-21T14:40:17Z
22070,22241,Fixes for isLegalPrefix change,Fixes #22062 Fixes #22068 Fixes #22070 ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; tests/pos/i22062.scala; tests/pos/i22068.less-min.scala; tests/pos/i22068.orig.scala; tests/pos/i22068.scala; tests/pos/i22070/macro.scala; tests/pos/i22070/usage.scala,dwijnand,2024-12-18T15:36:53Z,2025-01-13T11:02:47Z
22068,22241,Fixes for isLegalPrefix change,Fixes #22062 Fixes #22068 Fixes #22070 ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; tests/pos/i22062.scala; tests/pos/i22068.less-min.scala; tests/pos/i22068.orig.scala; tests/pos/i22068.scala; tests/pos/i22070/macro.scala; tests/pos/i22070/usage.scala,dwijnand,2024-12-18T15:36:53Z,2025-01-13T11:02:47Z
22065,22263,Scaladoc: add support for named tuples,Closes #22065 ,closed,scaladoc-testcases/src/tests/namedTuples.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TypesSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2024-12-23T21:33:26Z,2024-12-30T09:40:05Z
22062,22241,Fixes for isLegalPrefix change,Fixes #22062 Fixes #22068 Fixes #22070 ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; tests/pos/i22062.scala; tests/pos/i22068.less-min.scala; tests/pos/i22068.orig.scala; tests/pos/i22068.scala; tests/pos/i22070/macro.scala; tests/pos/i22070/usage.scala,dwijnand,2024-12-18T15:36:53Z,2025-01-13T11:02:47Z
22058,22059,Fix nightly build by updating a named tuple test with language import,"Because of the change from #22045  the test `tests/pos/named-tuple-downcast.scala` from #22028 need to be updated with `import scala.language.experimental.namedTuples`.  Fix #22058",closed,tests/pos/named-tuple-downcast.scala,noti0na1,2024-11-30T13:07:24Z,2024-11-30T14:28:07Z
22051,22099,Fix #22051: only trust the type application part for case class unapplies,"Although the current local class implementation is still unsound  this PR should bring back the warning.  Fix #22051  ```scala def boundary[T](body: (T => RuntimeException) => T): T =   case class Break(value: T) extends RuntimeException   try body(Break.apply)   catch case Break(t) => t // error: pattern matching on local classes is unsound currently  def test =   boundary[Int]: EInt =>     val v: String = boundary[String]: EString =>       throw EInt(3)     v.length // a runtime error: java.lang.ClassCastException ```  ```scala -- [E092] Pattern Match Unchecked Warning: tests/neg/i22051.scala:6:13 --------- 6 |  catch case Break(t) => t // error: pattern matching on local classes is unsound currently   |             ^   |the type test for Break cannot be checked at runtime because it's a local class   |   | longer explanation available when compiling with `-explain` ```",closed,compiler/src/dotty/tools/dotc/transform/TypeTestsCasts.scala; tests/warn/i22051.scala,noti0na1,2024-12-03T14:33:24Z,2025-01-08T13:39:57Z
22036,22449,Special case NamedTuple.From for arguments derived from Tuple,"Fixes #22036   Some questions: - `NamedTuple.From(<TupleN>)` works as is  so maybe there's a better way to fully normalize/evaluate the arguments to `NamedTuple.From` at the start of `fieldsOf`  instead of special casing types derived from Tuple? - is there a better way to extract the expected keys (ConstantType(Constant(`_<n>))` than just hard coding ""_""?",closed,compiler/src/dotty/tools/dotc/core/TypeEval.scala; tests/pos/i22036.scala,aherlihy,2025-01-24T15:41:19Z,2025-01-27T16:37:21Z
22030,22000,Refine rules for capture parameters and members,"This PR refines rules for capture set variables (parameters and members).  Fix #21999  #22005  #22030  ## Add requirements for capture set variables   When a capture set is encoded as a type  the type must refer to `CapSet` and bounded by `>: CapSet <: CapSet^`.  An unbounded capture parameter would be `C >: CapSet <: CapSet^`  which can be desugared from `C^`.  ```scala def f[C^](io: IO^{C^}) = ???  // becomes  def f[C >: CapSet <: CapSet^](io: IO^{C^}) = ??? ```  We may consider the similar desugaring for type member in the future:  ```scala class A:   type C^  // becomes  class A:   type C >: CapSet <: CapSet^ ```  Then  constaints between capture variables become possible:  ```scala def test[X^  Y^  Z >: X <: Y](x: C^{X^}  y: C^{Y^}  z: C^{Z^}) = ??? // Z is still bounded by >: CapSet <: CapSet^ ```  Update definitions in the library `caps.scala`  such that a type following the rule can be used inside a capture set.  ```scala // Rule out C^{(Nothing)^} during typer def capsOf[CS >: CapSet <: CapSet @retainsCap]: Any = ???  sealed trait Contains[+C >: CapSet <: CapSet @retainsCap  R <: Singleton] ```  ## Add cases to handle `CapSet` in `subsumes`  ``` *   X = CapSet^cx  exists rx in cx  rx subsumes y ==>  X subsumes y *   Y = CapSet^cy  forall ry in cy  x subsumes ry ==>  x subsumes Y *   X: CapSet^c1...CapSet^c2  (CapSet^c1) subsumes y  ==> X subsumes y *   Y: CapSet^c1...CapSet^c2  x subsumes (CapSet^c2) ==> x subsumes Y *   Contains[X  y]  ==>  X subsumes y ```  ## Fix some issues related to overriding  When deciding whether a class has a non-trivial self type  we look at the underlying type without capture set.  [test_scala2_library_tasty]",closed,compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; library/src/scala/caps.scala; scala2-library-cc/src/scala/collection/Stepper.scala; tests/neg-custom-args/captures/capset-bound2.scala; tests/neg-custom-args/captures/capset-members.scala; tests/neg-custom-args/captures/capture-parameters.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala; tests/neg-custom-args/captures/i21868b.scala; tests/neg-custom-args/captures/i22005.scala; tests/neg-custom-args/captures/use-capset.check; tests/neg-custom-args/captures/use-capset.scala; tests/neg/cc-poly-2.check; tests/neg/cc-poly-2.scala; tests/pos-custom-args/captures/cc-poly-varargs.scala; tests/pos/cc-poly-source-capability.scala,noti0na1,2024-11-21T19:13:18Z,2024-12-01T20:57:10Z
22029,22814,Deprecate `Yno-kind-polymorphism`,Fixes #22029.,closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; docs/_docs/reference/other-new-features/kind-polymorphism.md; tests/neg/no-kind-polymorphism-anykind.scala; tests/pos/deprecated-no-kind-polymorphism-anykind.scala,Linyxus,2025-03-15T21:02:26Z,2025-03-18T07:49:45Z
22018,22149,Widen singleton types when computing fields from .Fields,Fixes #22018,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i22018.scala,odersky,2024-12-05T16:29:59Z,2024-12-10T11:42:27Z
22017,22019,Make context bounds for poly functions a standard feature,closes #22017 ,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/contextbounds-for-poly-functions.scala; tests/run/contextbounds-for-poly-functions.scala,KacperFKorban,2024-11-25T10:49:49Z,2024-11-25T15:38:36Z
22017,22024,"Backport ""Make context bounds for poly functions a standard feature"" to 3.6",Backports #22019 to the 3.6.2.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/contextbounds-for-poly-functions.scala; tests/run/contextbounds-for-poly-functions.scala,WojciechMazur,2024-11-25T22:53:46Z,2024-11-26T09:58:59Z
22017,22172,"Backport ""Make context bounds for poly functions a standard feature"" to 3.6",Backports #22019 to the 3.6.3.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/contextbounds-for-poly-functions.scala; tests/run/contextbounds-for-poly-functions.scala,WojciechMazur,2024-12-09T12:57:58Z,2024-12-09T18:35:26Z
22005,22000,Refine rules for capture parameters and members,"This PR refines rules for capture set variables (parameters and members).  Fix #21999  #22005  #22030  ## Add requirements for capture set variables   When a capture set is encoded as a type  the type must refer to `CapSet` and bounded by `>: CapSet <: CapSet^`.  An unbounded capture parameter would be `C >: CapSet <: CapSet^`  which can be desugared from `C^`.  ```scala def f[C^](io: IO^{C^}) = ???  // becomes  def f[C >: CapSet <: CapSet^](io: IO^{C^}) = ??? ```  We may consider the similar desugaring for type member in the future:  ```scala class A:   type C^  // becomes  class A:   type C >: CapSet <: CapSet^ ```  Then  constaints between capture variables become possible:  ```scala def test[X^  Y^  Z >: X <: Y](x: C^{X^}  y: C^{Y^}  z: C^{Z^}) = ??? // Z is still bounded by >: CapSet <: CapSet^ ```  Update definitions in the library `caps.scala`  such that a type following the rule can be used inside a capture set.  ```scala // Rule out C^{(Nothing)^} during typer def capsOf[CS >: CapSet <: CapSet @retainsCap]: Any = ???  sealed trait Contains[+C >: CapSet <: CapSet @retainsCap  R <: Singleton] ```  ## Add cases to handle `CapSet` in `subsumes`  ``` *   X = CapSet^cx  exists rx in cx  rx subsumes y ==>  X subsumes y *   Y = CapSet^cy  forall ry in cy  x subsumes ry ==>  x subsumes Y *   X: CapSet^c1...CapSet^c2  (CapSet^c1) subsumes y  ==> X subsumes y *   Y: CapSet^c1...CapSet^c2  x subsumes (CapSet^c2) ==> x subsumes Y *   Contains[X  y]  ==>  X subsumes y ```  ## Fix some issues related to overriding  When deciding whether a class has a non-trivial self type  we look at the underlying type without capture set.  [test_scala2_library_tasty]",closed,compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; library/src/scala/caps.scala; scala2-library-cc/src/scala/collection/Stepper.scala; tests/neg-custom-args/captures/capset-bound2.scala; tests/neg-custom-args/captures/capset-members.scala; tests/neg-custom-args/captures/capture-parameters.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala; tests/neg-custom-args/captures/i21868b.scala; tests/neg-custom-args/captures/i22005.scala; tests/neg-custom-args/captures/use-capset.check; tests/neg-custom-args/captures/use-capset.scala; tests/neg/cc-poly-2.check; tests/neg/cc-poly-2.scala; tests/pos-custom-args/captures/cc-poly-varargs.scala; tests/pos/cc-poly-source-capability.scala,noti0na1,2024-11-21T19:13:18Z,2024-12-01T20:57:10Z
21999,22000,Refine rules for capture parameters and members,"This PR refines rules for capture set variables (parameters and members).  Fix #21999  #22005  #22030  ## Add requirements for capture set variables   When a capture set is encoded as a type  the type must refer to `CapSet` and bounded by `>: CapSet <: CapSet^`.  An unbounded capture parameter would be `C >: CapSet <: CapSet^`  which can be desugared from `C^`.  ```scala def f[C^](io: IO^{C^}) = ???  // becomes  def f[C >: CapSet <: CapSet^](io: IO^{C^}) = ??? ```  We may consider the similar desugaring for type member in the future:  ```scala class A:   type C^  // becomes  class A:   type C >: CapSet <: CapSet^ ```  Then  constaints between capture variables become possible:  ```scala def test[X^  Y^  Z >: X <: Y](x: C^{X^}  y: C^{Y^}  z: C^{Z^}) = ??? // Z is still bounded by >: CapSet <: CapSet^ ```  Update definitions in the library `caps.scala`  such that a type following the rule can be used inside a capture set.  ```scala // Rule out C^{(Nothing)^} during typer def capsOf[CS >: CapSet <: CapSet @retainsCap]: Any = ???  sealed trait Contains[+C >: CapSet <: CapSet @retainsCap  R <: Singleton] ```  ## Add cases to handle `CapSet` in `subsumes`  ``` *   X = CapSet^cx  exists rx in cx  rx subsumes y ==>  X subsumes y *   Y = CapSet^cy  forall ry in cy  x subsumes ry ==>  x subsumes Y *   X: CapSet^c1...CapSet^c2  (CapSet^c1) subsumes y  ==> X subsumes y *   Y: CapSet^c1...CapSet^c2  x subsumes (CapSet^c2) ==> x subsumes Y *   Contains[X  y]  ==>  X subsumes y ```  ## Fix some issues related to overriding  When deciding whether a class has a non-trivial self type  we look at the underlying type without capture set.  [test_scala2_library_tasty]",closed,compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; library/src/scala/caps.scala; scala2-library-cc/src/scala/collection/Stepper.scala; tests/neg-custom-args/captures/capset-bound2.scala; tests/neg-custom-args/captures/capset-members.scala; tests/neg-custom-args/captures/capture-parameters.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala; tests/neg-custom-args/captures/i21868b.scala; tests/neg-custom-args/captures/i22005.scala; tests/neg-custom-args/captures/use-capset.check; tests/neg-custom-args/captures/use-capset.scala; tests/neg/cc-poly-2.check; tests/neg/cc-poly-2.scala; tests/pos-custom-args/captures/cc-poly-varargs.scala; tests/pos/cc-poly-source-capability.scala,noti0na1,2024-11-21T19:13:18Z,2024-12-01T20:57:10Z
21988,22360,Improve the usage of inclusive language,"Changes: - blacklist -> excludelist  Discussion: - https://github.com/scala/scala3/issues/21988  Fixes #21988",closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Names.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/transform/init/Objects.scala; compiler/test/dotc/neg-best-effort-pickling.excludelist; compiler/test/dotc/neg-best-effort-unpickling.excludelist; compiler/test/dotc/neg-init-global-scala2-library-tasty.excludelist; compiler/test/dotc/neg-scala2-library-tasty.excludelist; compiler/test/dotc/patmat-exhaustivity-scala2-library-tasty.excludelist; compiler/test/dotc/pos-from-tasty.excludelist; compiler/test/dotc/pos-init-global-scala2-library-tasty.excludelist; compiler/test/dotc/pos-test-pickling.excludelist; compiler/test/dotc/run-from-tasty.excludelist; compiler/test/dotc/run-macros-scala2-library-tasty.excludelist; compiler/test/dotc/run-test-pickling.excludelist; compiler/test/dotty/tools/TestSources.scala; compiler/test/dotty/tools/dotc/BestEffortOptionsTests.scala; compiler/test/dotty/tools/dotc/BootstrappedOnlyCompilationTests.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/FromTastyTests.scala; compiler/test/dotty/tools/dotc/parsing/ScannerTest.scala; compiler/test/dotty/tools/dotc/transform/PatmatExhaustivityTest.scala; compiler/test/dotty/tools/vulpix/FileFilter.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; docs/_docs/internals/best-effort-compilation.md; project/Build.scala; scaladoc/src/dotty/tools/scaladoc/tasty/BasicSupport.scala,Linyxus,2025-01-13T12:52:05Z,2025-01-16T02:29:25Z
21983,22009,Rethrow SuspendExceptions caught in CodeGen phase,"Related PR: #21651 There  a mechanism was added to the Phase classes  where any phase could catch a SuspendException and have a compilation unit suspended (stopped and recompiled later). In this fix  we rethrow incorrectly caught SuspendExceptions  so that the aforementioned mechanism can take care of the rest. Fixes: #21983 ",closed,compiler/src/dotty/tools/backend/jvm/CodeGen.scala; tests/pos-macros/i21983/Test.scala; tests/pos-macros/i21983/UsesTest.scala; tests/pos-macros/i21983/VisitorMacros.scala,jchyb,2024-11-22T12:58:10Z,2024-11-26T10:36:14Z
21981,22697,Revert lambda cleanup,"Reverts #21466  but keeps the other changes in that PR and in the abandoned attempt that is #22031.  Fixes #21981  by virtue of reverting. ",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/pos/i21981.alt.scala; tests/pos/i21981.contrak.scala; tests/pos/i21981.orig.scala; tests/pos/i21981.scala,dwijnand,2025-03-03T12:32:05Z,2025-03-04T15:34:21Z
21952,21970,Attempt to beta reduce only if parameters and arguments have same shape,"  It's possible to define Functions with wrong apply methods by hand which will give an error but pass on a function that does fails beta reduction.  Fixes #21952",closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; compiler/src/dotty/tools/dotc/transform/InlinePatterns.scala; tests/neg/i21952.scala,odersky,2024-11-18T16:55:11Z,2024-11-19T13:35:11Z
21944,22236,fix: better error messages when an enum derives from AnyVal,Closes #21944 ,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i21944.check; tests/neg/i21944.scala,hamzaremmal,2024-12-18T10:19:59Z,2024-12-18T12:01:36Z
21939,21942,Fix #21939: Update names and descriptions for cc and setup phases,"Fix #21939  ```              preRecheck  preRecheck                 recheck  recheck                 ccSetup  prepare compilation unit for capture checking                      cc  capture checking ```",closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala,noti0na1,2024-11-13T15:06:06Z,2024-11-14T11:48:51Z
21936,21937,Fix Windows OS detection in TraceNameManglingTest,"Fixes #21936   [test_windows_full]",closed,compiler/test/dotty/tools/dotc/profile/TraceNameManglingTest.scala,WojciechMazur,2024-11-13T09:49:55Z,2024-11-13T22:41:05Z
21931,22356,Only check logicalOwners for methods  and not for classes  when looking for proxies,possible fix for #21931 ,closed,compiler/src/dotty/tools/dotc/transform/Dependencies.scala; compiler/src/dotty/tools/dotc/transform/LambdaLift.scala; tests/pos/i21931.scala,KacperFKorban,2025-01-13T10:47:37Z,2025-01-20T11:03:28Z
21931,22487,fix: record calls to constructors in lambdaLift,"possible fix for #21931 #22470  Attempt no. 2 for #21931 ",closed,compiler/src/dotty/tools/dotc/transform/Dependencies.scala; compiler/src/dotty/tools/dotc/transform/LambdaLift.scala; tests/pos/i21931.scala; tests/pos/i22470.scala,KacperFKorban,2025-01-31T13:28:11Z,2025-02-18T15:44:02Z
21920,21863,Consolidate CC,"A refactored and consolidated capture checker without any drastic changes to the algorithm. The main changes are:   - Go back to the ""sealed"" policy where we check that type parameters do not contain `cap` instead of checking that we do not box or unbox `cap`.  - Rename `@unbox` to `@use`  - Fix several soundness holes relating to reach capabilities  Based on #21861 ",closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Existential.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/SymUtils.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/transform/ElimByName.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; docs/_docs/internals/cc/use-design.md; library/src/scala/caps.scala; scala2-library-cc/src/scala/collection/Iterator.scala; scala2-library-cc/src/scala/collection/SeqView.scala; tests/neg-custom-args/captures/bad-uses-2.scala; tests/neg-custom-args/captures/bad-uses.scala; tests/neg-custom-args/captures/box-adapt-cases.scala; tests/neg-custom-args/captures/byname.check; tests/neg-custom-args/captures/byname.scala; tests/neg-custom-args/captures/capt-test.scala; tests/neg-custom-args/captures/capt1.check; tests/neg-custom-args/captures/capt1.scala; tests/neg-custom-args/captures/cc-this5.check; tests/neg-custom-args/captures/curried-closures.scala; tests/neg-custom-args/captures/dcs-tvar.check; tests/neg-custom-args/captures/dcs-tvar.scala; tests/neg-custom-args/captures/delayedRunops.check; tests/neg-custom-args/captures/delayedRunops.scala; tests/neg-custom-args/captures/depfun-reach.check,odersky,2024-10-30T18:51:51Z,2024-11-22T17:22:29Z
21917,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
21916,22033,Add a check for correct Array shape in quotes.reflect.ClassOfConstant,"Closes #21916 I tried to supply the ClassOfConstant with multiple other broken Types  but I was unable to break it beyond the linked issue  so I ended up adding the check for only that one case. This makes sense - the backend (and thus erasure) needs to know if the Array type parameter is a primitive type  but in other cases the erasure phase needs to know only the class  without the type parameters.  It's impossible to call classOf through the quoted code (`'{classOf[t]}` with a boundless t will error out)  so we don't need that additional check there.  There does appear to be an issue with being able to set `'{List[Array]}` resulting in a crash  but that is beyond the scope of this fix - I will prepare a separate issue for that (edit: reported [here](https://github.com/scala/scala3/issues/22034)). ",closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/neg-macros/i21916.check; tests/neg-macros/i21916/Macro_1.scala; tests/neg-macros/i21916/Test_2.scala,jchyb,2024-11-26T16:35:06Z,2025-02-21T12:30:49Z
21914,21934,Fix #21914: Don't project nested wildcard patterns to nullable,"Fix #21914  The wildcard patterns are projected to nullable #21850  which increases the running time exponentially for complex patterns  due to the way we simplify and minus spaces.   However  the current space analyse setup is only able to track nullable value at top level  so we should not project nested wildcard patterns (not at top level) to nullable.   The warnings in `tests/warn/i20121.scala`  `tests/warn/i20122.scala`  and `tests/warn/i20123.scala` will become wrong again  but there is no simple solution to fix them quickly.  I couldn't create a minimised test for #21914  but I have verified locally the compile time becomes normal again with this fix.",closed,compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/patmat/i12530.check; tests/patmat/null.check; tests/patmat/null.scala; tests/warn/i20121.scala; tests/warn/i20122.scala; tests/warn/i20123.scala,noti0na1,2024-11-12T16:12:56Z,2024-11-13T12:11:01Z
21896,21930,(Re-)Drop inaccessible subclasses from refineUsingParent,"Re-fixes #21790 Closes #21896",closed,compiler/src/dotty/tools/dotc/core/Decorators.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i21790.scala,dwijnand,2024-11-12T12:02:18Z,2024-11-18T10:00:22Z
21882,21911,Ensure ChromeTraceTest event timestamps are emitted in correct invervals,Fixes #21882 flaky test,closed,compiler/test/dotty/tools/dotc/profile/ChromeTraceTest.scala,WojciechMazur,2024-11-07T18:55:00Z,2024-11-08T16:30:26Z
21870,21875,Fix #21868  #21869  and #21870: handle CapsOf in more places,Fix #21868  #21869  and #21870,closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-custom-args/captures/capset-bound.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala,noti0na1,2024-11-01T12:23:28Z,2024-11-21T15:43:32Z
21869,21875,Fix #21868  #21869  and #21870: handle CapsOf in more places,Fix #21868  #21869  and #21870,closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-custom-args/captures/capset-bound.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala,noti0na1,2024-11-01T12:23:28Z,2024-11-21T15:43:32Z
21868,21875,Fix #21868  #21869  and #21870: handle CapsOf in more places,Fix #21868  #21869  and #21870,closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureRef.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-custom-args/captures/capset-bound.scala; tests/neg-custom-args/captures/capture-poly.scala; tests/neg-custom-args/captures/i21868.scala,noti0na1,2024-11-01T12:23:28Z,2024-11-21T15:43:32Z
21860,21876,Fix provablyDisjoint handling enum constants with mixins,Fixes #21860 ,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/warn/i21860.scala; tests/warn/i21860.unenum.scala,dwijnand,2024-11-01T13:37:02Z,2024-11-02T06:30:07Z
21858,21872,Ensure to escape characters before constructing JSON profile trace,Fixes #21858 by setting up special escapes for characters that might  corrupt the output JSON file produced by `-Yprofile-trace`,closed,compiler/src/dotty/tools/dotc/profile/JsonNameTransformer.scala; compiler/src/dotty/tools/dotc/profile/Profiler.scala; compiler/test/dotty/tools/DottyTest.scala; compiler/test/dotty/tools/dotc/profile/TraceNameManglingTest.scala,WojciechMazur,2024-11-01T00:44:51Z,2024-11-12T21:09:46Z
21841,22366,Fix #21841: Check more that an `unapplySeq` on a `NonEmptyTuple` is valid.,"Review by @odersky because you seem to have been in the area recently with named tuples: https://github.com/scala/scala3/commit/0fbdb497c40aee5b3e17c22bf9030f55ddcc3bca",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/neg/i21841.check; tests/neg/i21841.scala,sjrd,2025-01-14T11:11:18Z,2025-01-14T14:24:23Z
21820,21834,Add .msi artifacts to release assets,"We now include .msi files produced by `build-msi-package` in release assets including both .msi file and it's sha256  Resolves #21820 ",closed,.github/workflows/ci.yaml,WojciechMazur,2024-10-23T16:07:47Z,2024-11-06T12:23:03Z
21820,21905,"Backport ""Add .msi artifacts to release assets"" to 3.6.2",Backports #21834 to the 3.6.2 branch.  PR submitted by the release tooling. [skip ci],closed,.github/workflows/ci.yaml,WojciechMazur,2024-11-06T17:45:11Z,2024-11-08T12:04:33Z
21816,21825,Nowarn extension matching nonpublic member,"Fixes #21816  Consider only public members when checking if an extension method actually extends.  A use site lint would be more thorough  when an extension is in scope but unused because of a visible matching member. ",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/i21816.scala,som-snytt,2024-10-22T10:08:50Z,2024-11-20T12:16:51Z
21815,21817,Use bash shell when using here-strings," <img width=""1032"" alt=""Screenshot 2024-10-20 at 07 14 49"" src=""https://github.com/user-attachments/assets/321ba7ce-9fd2-413c-aec3-14215fbee786"">  [positive](https://github.com/WojciechMazur/dotty/actions/runs/11416876799/job/31768568868) test in #21810 also uses `bash` instead of `sh`  Closes #21815 ",closed,.github/workflows/ci.yaml,hamzaremmal,2024-10-20T05:17:37Z,2024-10-20T06:45:13Z
21815,22160,[sync/backports]: Synchronize with scala/scala3-lts,,closed,.github/Dockerfile; .github/workflows/ci.yaml; community-build/community-projects/scala-collection-compat; community-build/community-projects/stdLib213; community-build/src/scala/dotty/communitybuild/projects.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/Properties.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/MessageKind.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/staging/HealType.scala; compiler/src/dotty/tools/dotc/transform/ArrayApply.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/scala/quoted/runtime/impl/printers/Extractors.scala; compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; compiler/test/dotty/tools/backend/jvm/ArrayApplyOptTest.scala; docs/_spec/Gemfile.lock; project/Build.scala; project/scripts/check-cla.sh; scaladoc-testcases/src/tests/opaqueTypes.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; tests/neg/21538.check; tests/neg/21538.scala; tests/neg/i16815.check,WojciechMazur,2024-12-07T13:38:02Z,2024-12-09T11:34:08Z
21807,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
21804,22619,Under `betterFors` don't drop the trailing `map` if it would result in a different type (also drop `_ => ()`),closes #21804,closed,compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/transform/localopt/DropForMap.scala; docs/_docs/reference/experimental/better-fors.md; tests/pos/better-fors-i21804.scala; tests/run/better-fors-map-elim.check; tests/run/better-fors-map-elim.scala,KacperFKorban,2025-02-17T16:25:24Z,2025-02-21T11:44:19Z
21790,21930,(Re-)Drop inaccessible subclasses from refineUsingParent,"Re-fixes #21790 Closes #21896",closed,compiler/src/dotty/tools/dotc/core/Decorators.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i21790.scala,dwijnand,2024-11-12T12:02:18Z,2024-11-18T10:00:22Z
21786,21924,fix: don't consider `into` as a soft-modifier,"Closes #21786  Closes #21635  ",closed,compiler/src/dotty/tools/dotc/parsing/Tokens.scala; tests/neg/i21786.check; tests/neg/i21786.scala; tests/pos/i21635.scala,hamzaremmal,2024-11-11T16:53:49Z,2024-11-11T20:24:21Z
21779,21782,Fix tupleTypeFromSeq for XXL tuples,Fixes #21779,closed,library/src/scala/quoted/Expr.scala; tests/pos/i21779/Macro_1.scala; tests/pos/i21779/Test_2.scala,joroKr21,2024-10-16T08:40:58Z,2024-10-16T11:03:44Z
21770,21823,Warn when named tuples resemble assignments,"This PR adds a warning for named tuples that look like assignment  such as `(x = 1)`.  This is the first half to implement #21681. The second will be to add warnings for named arguments to infix method calls (as a separate PR?).  Started during the Spree of October 21st.  Closes https://github.com/scala/scala3/issues/21770.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/21681d.scala; tests/warn/21681.check; tests/warn/21681.scala; tests/warn/21681b.check; tests/warn/21681b.scala; tests/warn/21681c.check; tests/warn/21681c.scala; tests/warn/21770.check; tests/warn/21770.scala,mbovel,2024-10-21T16:23:20Z,2024-10-22T14:31:16Z
21769,21849,fix: Allow `as` as an infix type in non context bound types,potential fix for #21769 ,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i21769.scala,KacperFKorban,2024-10-28T12:13:17Z,2024-11-04T14:31:45Z
21768,21964,"Backport ""Handle old given syntax where identifier and type are seperated by new line"" to 3.6",Backports #21957 to the 3.6.2.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i21768.scala,WojciechMazur,2024-11-18T10:20:44Z,2024-11-18T16:12:21Z
21768,21957,Handle old given syntax where identifier and type are seperated by new line,"Fixes #21768   Fixes usages of `with {...}` and `= new {}` declarations presented in tests.  ",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i21768.scala,WojciechMazur,2024-11-15T13:03:12Z,2024-11-18T09:34:33Z
21762,21763,backend computes line number from source of position,"fixes #21762   This makes it possible to implement line number correction for Mill build files under Scala 3",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/SourcePosition.scala; compiler/test/dotty/tools/dotc/BootstrappedOnlyCompilationTests.scala; tests/plugins/run/scriptWrapper/Framework_1.scala; tests/plugins/run/scriptWrapper/LineNumberPlugin_1.scala; tests/plugins/run/scriptWrapper/Test_3.scala; tests/plugins/run/scriptWrapper/foo_2.scala; tests/plugins/run/scriptWrapper/foo_original_2.scala; tests/plugins/run/scriptWrapper/plugin.properties,bishabosha,2024-10-14T13:20:33Z,2024-10-16T10:42:00Z
21760,21922,Disallow open modifier on objects,Fixes #21760,closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/i21760.scala,HarrisL2,2024-11-11T16:20:47Z,2024-11-11T18:43:43Z
21757,21785,Apply implicit conversion from derived Conversion instance defined as implicit rather than given,Fixes #21757 ,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i21757.scala,prolativ,2024-10-16T14:01:18Z,2024-10-16T15:28:54Z
21755,21851,Make sure definition tree has the defined symbol,"It turns out it could have the wrong symbol referring to a same-named definition in the superclass under some recursive definition of a self type. This caused a crash in pickler in #21755 because we now have two different definitions in two different classes that have the same symbol.  Fixes #21755",closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i21755.scala,odersky,2024-10-28T21:06:50Z,2024-11-08T16:03:00Z
21754,21761,Implement `tracked` members,"closes #21754   Allow for the `tracked` modifier to be used for `val` members of classes and traits. `tracked` members and members inheriting from `tracked` force the type of the member (or it's overriding member) to be as exact as possible. More precisely  it will will assign the `tracked` member the infered type of the rhs. For instance  consider the following definition:  ```scala 3 trait F:   tracked val a: Int   tracked val b: Int  class N extends F:   val a = 22 // a.type =:= 22   val b: Int = 22 // b.type =:= Int   tracked val c = 22 // c.type =:= 22 ```  Here  the `tracked` modifier ensures that the type of `a` in `N` is `22` and not `Int`. But the type of `b` is `N` is `Int` since it's explicitly declared as `Int`. `tracked` members can also be immediately initialized  as in the case of `c`.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/parsing/Scanners.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/experimental/modularity.md; tests/neg/abstract-tracked-1.scala; tests/neg/abstract-tracked.check; tests/neg/abstract-tracked.scala; tests/neg/tracked.check; tests/neg/tracked.scala; tests/pos/abstract-tracked-2.scala; tests/pos/abstract-tracked.scala,KacperFKorban,2024-10-14T09:33:32Z,2024-12-19T15:21:35Z
21742,21748,Fix ctx implicits under case unapplySeq,"A case class with a varargs has a unapplySeq extractor instead of unapply.  When we type an unapply  in typedUnapply  we first look for unapply methods before unapplySeq methods.  But when searching for unapply  if a class method isn't found  then an extension method is looked for  which causes context implicits to be cached.  The bindings from a pattern (such as from an unapply or unapplySeq extractor) are added to the scope in indexPattern.  But Context's `implicitCache` doesn't account for the scope changing.  I opted for giving the body its own scope context  rather than making indexPattern reset the context implicits cache.  Fixes #21742 ",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i21742.1.scala; tests/pos/i21742.2.scala,dwijnand,2024-10-10T12:41:50Z,2024-10-27T19:33:52Z
21739,21880,Add class parameters  flags  and privateWithin and annotations to newClass in reflect API,"Instead of replacing the one newMethod we have  we instead add two more with varying complexity (similarly to how newMethod is handled). This is also so we can keep the initial newClass implementation (the one creating newClass with public empty primary constructor) intact  which despite being experiemental - already sees use in libraries and projects.  Fixes https://github.com/scala/scala3/issues/21739 and addresses some old TODOs (from the stdlibExperimentalDefinitions.scala file).",closed,compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; library/src/scala/quoted/Quotes.scala; tests/neg-macros/i19842-a.check; tests/neg-macros/i19842-a/Macro.scala; tests/neg-macros/i19842-b.check; tests/neg-macros/i19842-b/Macro.scala; tests/neg-macros/newClassParamsMissingArgument.check; tests/neg-macros/newClassParamsMissingArgument/Macro_1.scala; tests/neg-macros/newClassParamsMissingArgument/Test_2.scala; tests/pos-macros/newClassExtendsWithSymbolInParent/Macro_1.scala; tests/pos-macros/newClassExtendsWithSymbolInParent/Test_2.scala; tests/run-macros/annot-add-global-object/Macro_1.scala; tests/run-macros/annot-add-local-object/Macro_1.scala; tests/run-macros/annot-add-nested-object/Macro_1.scala; tests/run-macros/newClassAnnotation.check; tests/run-macros/newClassAnnotation/JavaAnnot.java; tests/run-macros/newClassAnnotation/Macro_1.scala; tests/run-macros/newClassAnnotation/Test_2.scala; tests/run-macros/newClassExtendsJavaClass.check; tests/run-macros/newClassExtendsJavaClass/JavaClass.java; tests/run-macros/newClassExtendsJavaClass/Macro_1.scala; tests/run-macros/newClassExtendsJavaClass/Main_2.scala; tests/run-macros/newClassParams.check; tests/run-macros/newClassParams/Macro_1.scala; tests/run-macros/newClassParams/Test_2.scala; tests/run-macros/newClassParamsExtendsClassParams.check,jchyb,2024-11-03T19:29:39Z,2025-03-11T22:31:00Z
21728,21693,Implement SIP-61 `@unroll` annotation,"~Still need to write documentation ~ Documentation is written also  I am doing this work on behalf of @lihaoyi   The main implementation follows [com-lihaoyi/unroll](https://github.com/com-lihaoyi/unroll) but with some changes: - `@unroll` annotation is `@experimental` - run before pickling - increase validation checks for incorrect usage of `@unroll` - `Underscore` not `EmptyTree` in pattern match default case - ensure correct spans in TASTy - ensure symbols are correctly substituted in types  There is one main library addition: `scala.annotation.unroll`  i.e. the `@unroll` annotation that appears on parameters   commits are a bit of a mess - a lot of churn  Edit: removed changes: - ~reuse the symbol when generating the ""forwarder"" of an abstract method.~ - ~infer `override` when overriding trait methods that ""appear"" abstract in source code  but were actually implemented by the unroll annotation~ - ~do not add the `Invisible` flag to abstract unrolled methods - this means they can actually still be visible in separately compiled compilation units (because unrolling runs before pickler now)~ - ~Internal annotation `scala.annotation.internal.AbstractUnroll` - marker used to indicate that an unrolled abstract method was abstract in source code (unrolling phase actually provides a default implementation) - this enables downstream implementers to avoid the override flag. (Maybe we shouldn't allow this convenience?)~ - ~Internal annotation `scala.annotation.internal.UnrollForwarder` - marker on any generated forwarder - which is used for special casing TASTy pickling of method calls to the forwarders~ - ~because forwarders get the `Invisible` flag  this makes them impossible to select from TASTy normally (via `SELECTin`)  (invisible def are filtered out ""before typer"") so I intercept the `Select` trees to be `TERMREFdirect`  and then restore them to Select after TASTY. perhaps someone has a better idea  or we could change the resolution rules for `Invisible`? or invent a new TASTy node? (I also tried generating a `Ident` tree rather than a `Select`  but this had a type error)~   fixes #21728 ",closed,compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/Mode.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/UnrollDefinitions.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/CrossVersionChecks.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; docs/_docs/reference/experimental/unrolled-defs.md; docs/sidebar.yml; library/src/scala/annotation/unroll.scala; sbt-test/tasty-compat/add-param-unroll/a-changes/A.scala; sbt-test/tasty-compat/add-param-unroll/a/A.scala; sbt-test/tasty-compat/add-param-unroll/b/B.scala; sbt-test/tasty-compat/add-param-unroll/build.sbt; sbt-test/tasty-compat/add-param-unroll/c/C.scala; sbt-test/tasty-compat/add-param-unroll/project/DottyInjectedPlugin.scala; sbt-test/tasty-compat/add-param-unroll/test; sjs-compiler-tests/test/scala/dotty/tools/dotc/ScalaJSCompilationTests.scala; tasty/src/dotty/tools/tasty/TastyFormat.scala; tests/neg/16463.scala; tests/neg/i19320.scala,bishabosha,2024-10-02T17:46:22Z,2025-01-27T15:19:30Z
21721,21722,Fix #21721: make case TypeBlock(_  _) not match non-type Block,"`TypeBlock`s are represented as normal `Blocks` in the Quotes API's implementation. The current `TypeTest` for `TypeBlock` is exactly the same as the `TypeTest` for `Block`  which means that `case TypeBlock(_  _)` ""matches"" every block.   The implementation of `unapply` on `TypeBlockModule`  however  gives back `(List[TypeDef]  TypeTree)`. It constructs the `List[TypeDef]` by mapping over every statement of the block  trying to turn it into a `TypeDef` by using a match with the pattern ```scala   case alias: TypeDef => alias ``` This seems fine since `TypeBlock`s are supposed to be just a list of `TypeDefs` followed by a type as the last expression. Since the `TypeTest` matches any `Block` and not only `Blocks` that are `TypeBlocks`  the statements can be anything  not just `TypeDef`s  which lets the whole `case TypeBlock(_  _)` pattern die with a `MatchError`.  This commit fixes the problem by making the `TypeTest` check whether the `Block` is a type (which in turns checks whether the `Block`s expression is a type)  This is my first PR  please let me know if I should change anything or am completely going about fixing this the wrong way  etc.  Also  I could not run the complete test suite on my machine  it died even without making any changes. But I could at least run the positive compilation tests.  Closes #21721 ",closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/pos/i21721/Macro.scala; tests/pos/i21721/Test.scala,felher,2024-10-07T19:28:49Z,2025-03-04T13:18:09Z
21696,21711,Have a better error message when healing types,Closes #21696,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/MessageKind.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/staging/HealType.scala; tests/neg/i21696.check; tests/neg/i21696.scala,hamzaremmal,2024-10-05T15:35:03Z,2024-10-07T11:36:51Z
21682,21741,Allow autotupling if fn's param is a type param,Fixes #21682 ,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i21682.1.scala; tests/pos/i21682.2.scala; tests/pos/i21682.3.scala,dwijnand,2024-10-09T14:01:18Z,2024-11-13T13:28:50Z
21681,21823,Warn when named tuples resemble assignments,"This PR adds a warning for named tuples that look like assignment  such as `(x = 1)`.  This is the first half to implement #21681. The second will be to add warnings for named arguments to infix method calls (as a separate PR?).  Started during the Spree of October 21st.  Closes https://github.com/scala/scala3/issues/21770.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/21681d.scala; tests/warn/21681.check; tests/warn/21681.scala; tests/warn/21681b.check; tests/warn/21681b.scala; tests/warn/21681c.check; tests/warn/21681c.scala; tests/warn/21770.check; tests/warn/21770.scala,mbovel,2024-10-21T16:23:20Z,2024-10-22T14:31:16Z
21676,21684,Revert SAM condition to what it was before,Fixes #21676,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i21676.scala,odersky,2024-10-01T13:27:15Z,2024-10-09T11:48:15Z
21669,21673,Fix #21669: Check parents non-empty before calling reduceLeft,"Fix #21669  This part of code is from #20084  We should check `parents` is non-empty before calling `reduceLeft`.  I haven't been able to create a standalone test. To test locally:  `i21669.scala` ```scala //> using dep ""com.softwaremill.sttp.tapir::tapir-sttp-client:1.11.5""  import sttp.tapir.* import sttp.tapir.client.sttp.SttpClientInterpreter  @main def run =     lazy val pingGET = endpoint.get         .in(""ping"")         .out(stringBody)      SttpClientInterpreter()         .toRequest(pingGET  Some(uri""http://localhost:8080"")) ```  ``` > sbt publishLocal > scala compile --server=false -S 3.6.0-RC1-bin-SNAPSHOT i21669.scala -- [E008] Not Found Error: /dotty/i21669.scala:12:33 ------ 12 |        .toRequest(pingGET  Some(uri""http://localhost:8080""))    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^    |value uri is not a member of StringContext  but could be made available as an extension method.    |    |One of the following imports might fix the problem:    |    |  import sttp.client3.UriContext    |  import sttp.client3.quick.UriContext    |  import sttp.model.Uri.UriContext    | 1 error found Compilation failed ```",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala,noti0na1,2024-09-30T13:11:24Z,2024-10-05T14:54:42Z
21658,22343,Implement :jar (deprecate :require),#21658,closed,compiler/src/dotty/tools/dotc/config/JavaPlatform.scala; compiler/src/dotty/tools/dotc/config/Platform.scala; compiler/src/dotty/tools/dotc/core/SymbolLoaders.scala; compiler/src/dotty/tools/repl/ParseResult.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test-resources/jars/MyLibrary.scala; compiler/test-resources/jars/MyLibrary2.scala; compiler/test-resources/jars/mylibrary.jar; compiler/test-resources/jars/mylibrary2.jar; compiler/test-resources/repl/jar-command; compiler/test-resources/repl/jar-errors; compiler/test-resources/repl/jar-multiple; compiler/test/dotty/tools/repl/ReplTest.scala; compiler/test/dotty/tools/repl/TabcompleteTests.scala,aherlihy,2025-01-10T20:54:57Z,2025-03-10T18:16:14Z
21657,22694,Repl: emit warning for the `:sh` command,Fixes #21657,closed,compiler/src/dotty/tools/repl/ParseResult.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test-resources/repl/i21657; compiler/test/dotty/tools/repl/TabcompleteTests.scala,bracevac,2025-03-02T21:46:42Z,2025-03-03T12:56:30Z
21655,22572,Add warning for :kind command,After discussion with the core team  it was decided to postpone implementation of the `:kind` command for #21655. For now  emit a warning.,closed,compiler/src/dotty/tools/repl/ParseResult.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test-resources/repl/i21655; compiler/test/dotty/tools/repl/TabcompleteTests.scala,aherlihy,2025-02-10T12:50:08Z,2025-02-11T16:14:24Z
21646,21678,Let show behave more robustly for Recheck,"The pretty-printing logic for a Recheck phase applies the phase to the tree. But if there was a type error  then the pretty printing would have previously crashed the compiler.  Fixes #21646 ",closed,compiler/src/dotty/tools/dotc/transform/Recheck.scala,bracevac,2024-09-30T18:12:36Z,2024-10-01T16:01:27Z
21635,21924,fix: don't consider `into` as a soft-modifier,"Closes #21786  Closes #21635  ",closed,compiler/src/dotty/tools/dotc/parsing/Tokens.scala; tests/neg/i21786.check; tests/neg/i21786.scala; tests/pos/i21635.scala,hamzaremmal,2024-11-11T16:53:49Z,2024-11-11T20:24:21Z
21620,21621,Tighten closure extractor in TreeInfo,"The previous extractor for closures matches also arbitrary blocks that ended in a (possible deeply nested) closure. This caused wrong use sets in #21620. The new definition is stricter. There is also a new blockEndingInclosure extractor that keeps the old behavior.  Fixes #21620",closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/typer/Migrations.scala; tests/neg-custom-args/captures/i21620.check; tests/neg-custom-args/captures/i21620.scala; tests/pos-custom-args/captures/i21620.scala,odersky,2024-09-20T18:09:14Z,2024-09-22T15:14:32Z
21619,21624,Fix #21619: Refactor NotNullInfo to record every reference which is retracted once.,"This PR improves the flow typing for returning and exceptions.  The `NotNullInfo` is defined as following now:  ```scala case class NotNullInfo(asserted: Set[TermRef] | Null  retracted: Set[TermRef]): ```  * `retracted` contains variable references that are ever assigned to null; * if `asserted` is not `null`  it contains `val` or `var` references that are known to be not null  after the tree finishes executing normally (non-exceptionally); * if `asserted` is `null`  the tree is know to terminate  by throwing  returning  or calling a function with `Nothing` type. Hence  it acts like a universal set.  `alt` is defined as `<a1 r1>.alt(<a2 r2>) = <a1 intersect a2  r1 union r2>`.  The difficult part is the `try ... catch ... finally ...`. We don't know at which point an exception is thrown in the body  and the catch cases may be not exhaustive  we have to collect any reference that is once retracted.  Fix #21619",closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Nullables.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/explicit-nulls/neg/i21380b.scala; tests/explicit-nulls/neg/i21380c.scala; tests/explicit-nulls/neg/i21619.scala; tests/explicit-nulls/pos/after-termination.scala; tests/explicit-nulls/unsafe-common/unsafe-overload.scala,noti0na1,2024-09-21T17:58:09Z,2024-12-10T15:20:39Z
21614,21615,Test for #21614,,closed,tests/neg-custom-args/captures/i21614.check; tests/neg-custom-args/captures/i21614.scala,odersky,2024-09-19T16:11:12Z,2024-09-19T17:55:15Z
21610,21613,"Escape the '\' between "" in the `scalac` task",Closes #21610 ,closed,project/Build.scala,hamzaremmal,2024-09-19T12:00:59Z,2024-09-19T16:04:04Z
21577,21623,Improve warning for wildcard matching only null under the explicit nulls flag (scala#21577),"Improve warning for wildcard matching only null under the explicit nulls flag  Fixes scala#21577  I have signed the CLA",closed,compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/explicit-nulls/pos/interop-constructor.scala; tests/explicit-nulls/warn/i21577.check; tests/explicit-nulls/warn/i21577.scala; tests/explicit-nulls/warn/interop.check; tests/explicit-nulls/warn/interop/J.java; tests/explicit-nulls/warn/interop/S.scala,HarrisL2,2024-09-21T03:30:23Z,2024-10-28T17:14:58Z
21561,21564,Temporary fix to CompletionScalaCliSuite,"The [release of `circe/circe` version 0.14.10 yesterday](https://index.scala-lang.org/circe/circe/artifacts/circe-core/0.14.10) broke the tests. This is just a temporary fix as imo  we should not have any external dependencies in this repository. The policy for testing needs to be defined.  [test_java8] [test_scala2_library_tasty]  Closes #21561 ",closed,presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionScalaCliSuite.scala,hamzaremmal,2024-09-07T14:54:01Z,2024-09-07T16:06:22Z
21557,21927,"Allow discarding ""Discarded non-Unit"" warnings with `: Unit`","Continuation of the work done by @nmcb and @rochala during the Oct 20th spree.  This PR adds support for discarding ""non-Unit"" expressions by explicitly casting them to `Unit`:  ```scala def test: Unit =   (1 + 1): Unit // no warning   1 + 1 // warn ```  Closes #21557.",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg-custom-args/captures/real-try.check; tests/neg/i13091.check; tests/neg/i13091.scala; tests/neg/i18408a.check; tests/neg/i18408b.check; tests/neg/i18408c.check; tests/neg/spaces-vs-tabs.check; tests/neg/spaces-vs-tabs.scala; tests/warn/21557.check; tests/warn/21557.scala; tests/warn/i18722.check; tests/warn/nonunit-statement.check; tests/warn/warn-value-discard.check,mbovel,2024-11-11T21:36:33Z,2024-11-22T13:17:48Z
21543,21589,Survive inaccessible types when computing implicit scope,"Also: Give a better error message later when encountering a missing type that refers to a private member of a base class. The previous one was misleading since it referred to a potentially missing class file  which is certainly not the case here.  Fixes #21543",closed,compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/i20554-a.check; tests/neg/i20554-b.check; tests/neg/i21543.check; tests/neg/i21543.scala,odersky,2024-09-14T10:24:32Z,2024-09-14T17:49:32Z
21543,22128,"Backport ""Survive inaccessible types when computing implicit scope"" to LTS",Backports #21589 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/i21543.check; tests/neg/i21543.scala,WojciechMazur,2024-12-03T21:45:35Z,2024-12-04T17:21:43Z
21538,21639,Add better error reporting for inlined non-immutable paths,Fixes #21538,closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; tests/neg/21538.check; tests/neg/21538.scala,HarrisL2,2024-09-24T16:07:49Z,2024-09-25T07:52:59Z
21535,21587,Guard against recursive lower bounds in constraints,"We could get an indirect recursion going through a singleton type before.  Fixes #21535",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; tests/neg/i21535.check; tests/neg/i21535.scala,odersky,2024-09-13T18:42:20Z,2024-09-13T20:40:34Z
21525,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
21521,21566,"Revert ""Drop redundant `butNot = Param` clause in isAnchor""","This reverts commit 9d88c800ba518b184bb5f63259a782532d1abf96.  Closes #21521  The `ClassTypeParamCreationFlags` include both `TypeParam` and `Deferred`.  In effect  a class type parameter was considered an anchor for implicit search  by `sym.is(Deferred)` as a sufficient condition.  For a failing example  one can try asserting: ```scala || sym.is(Deferred).ensuring(_ == sym.is(Deferred  butNot = Param)) ``` in `ImplicitRunInfo#isAnchor` and a test with `summon[Ordering[Int]]`.  In that example  at least  the flags happen to be set by `Scala2Unpickler#readDisambiguatedSymbol`: https://github.com/scala/scala3/blob/614170f4545ea6da8f07e0c4b0f2fdfe01377270/compiler/src/dotty/tools/dotc/core/unpickleScala2/Scala2Unpickler.scala#L560",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala,EugeneFlesselle,2024-09-07T22:59:43Z,2024-09-14T10:27:21Z
21521,22127,"Backport ""Revert ""Drop redundant `butNot = Param` clause in isAnchor"""" to LTS",Backports #21566 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala,WojciechMazur,2024-12-03T21:40:15Z,2024-12-04T17:21:35Z
21507,21508,No need to unbox if expected type is LhsProto,fixes #21507,closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; tests/pos-custom-args/captures/i21507.scala,Linyxus,2024-08-29T12:46:41Z,2024-09-23T13:58:19Z
21442,21443,Charge also dcs of local reaches to capture set of enclosing method,Fixes #21442,closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; tests/neg-custom-args/captures/i21401.check; tests/neg-custom-args/captures/i21401.scala; tests/neg-custom-args/captures/i21442.check; tests/neg-custom-args/captures/i21442.scala; tests/neg-custom-args/captures/reaches.check; tests/neg-custom-args/captures/reaches.scala; tests/neg-custom-args/captures/unsound-reach.check; tests/neg-custom-args/captures/unsound-reach.scala,odersky,2024-08-26T18:58:37Z,2024-08-26T22:44:30Z
21437,21583,Treat more closure parameter types as inferred,"This is necessary for types that contain possibly illegal @retains annotations since those annotations are only removed before pickling for InferredTypes.  Fixes #21437 ",closed,compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-custom-args/captures/i21347.scala,odersky,2024-09-13T09:01:07Z,2024-09-13T15:12:07Z
21433,21517,Handle type aliases in contextFunctionResultTypeAfter,Closes #21433,closed,compiler/src/dotty/tools/dotc/transform/ContextFunctionResults.scala; tests/pos/i21433.scala,wjoel,2024-08-30T11:24:34Z,2025-01-31T21:42:33Z
21429,21519,[scaladoc] fix: Only trim one newline when preprocessing the content of a markdown code snippet,fixes #21429 ,closed,scaladoc-testcases/docs/_docs/index.md; scaladoc/src/dotty/tools/scaladoc/renderers/Renderer.scala; scaladoc/src/dotty/tools/scaladoc/snippets/FlexmarkSnippetProcessor.scala,KacperFKorban,2024-08-30T13:48:29Z,2024-09-19T12:54:30Z
21420,22314,Append instead of prepending import selectors for the current scope when collecting them in CheckUnused,"Also make the wildcard selectors exclusion-aware in CheckUnused  closes #21420 ",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i21420.scala,KacperFKorban,2025-01-06T12:56:12Z,2025-01-13T12:50:47Z
21420,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
21418,21513,Remove empty argument lists for classes with only context bounds,Closes #21418,closed,compiler/src/dotty/tools/dotc/typer/Migrations.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/rewrites/i21418.check; tests/rewrites/i21418.scala,wjoel,2024-08-29T21:03:50Z,2024-09-03T09:03:28Z
21415,21547,Remove the `-rewrite` option for `typechecks` methods in Quotes,"Fixes #21415  This is somewhat related to #21185  but I think it's better to merge this one separately first since it's an easy backport  which might not be the case with the other PR (since we are technically changing the semantics there)",closed,compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/test/dotc/pos-test-pickling.blacklist; compiler/test/dotc/run-test-pickling.blacklist; tests/pos/i21415.scala,jchyb,2024-09-05T09:42:41Z,2024-09-13T14:44:12Z
21410,21744,Make overload pruning based on result types less aggressive,"`adaptByResult` was introduced in 2015 in 54835b6fb19ab0758c7503fb6f0e990ee4c25491 as a last step in overloading resolution:  > Take expected result type into account more often for overloading resolution > > Previously  the expected result type of a FunProto type was ignored and taken into > account only in case of ambiguities. arrayclone-new.scala shows that this is not enough. > In a case like > >     val x: Array[Byte] = Array(1  2) > > we typed 1  2 to be Int  so overloading resulution would give the Array.apply of > type (Int  Int*)Array[Int]. But that's a dead end  since Array[Int] is not a subtype > of Array[Byte]. > > This commit proposes the following modified rule for overloading resulution: > >   A method alternative is applicable if ... (as before)  and if its result type >   is copmpatible with the expected type of the method application. > > The commit does not pre-select alternatives based on comparing with the expected > result type. I tried that but it slowed down typechecking by a factor of at least 4. > Instead  we proceed as usual  ignoring the result type except in case of > ambiguities  but check whether the result of overloading resolution has a > compatible result type. If that's not the case  we filter all alternatives > for result type compatibility and try again.  In i21410.scala this means we end up checking:      F[?U] <:< Int     (where ?U is unconstrained  because the check is done without looking at the     argument types)  The problem is that the subtype check returning false does not mean that there is no instantiation of `?U` that would make this check return true  just that type inference was not able to come up with one. This could happen for any number of reason but commonly will happen with match types since inference cannot do much with them.  We cannot avoid this by taking the argument types into account  because this logic was added precisely to handle cases where the argument types mislead you because adaptation isn't taken into account. Instead  we can approximate type variables in the result type to trade false negatives for false positives which should be less problematic here.  Fixes #21410.",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i21410.scala; tests/pos/i21410b.scala; tests/pos/i21410c.scala,smarter,2024-10-09T15:35:46Z,2025-02-24T14:18:21Z
21402,21700,Fix #21402: Always allow type member extraction for stable scrutinees in match types.,"Previously  through the various code paths  we basically allowed type member extraction for stable scrutinees if the type member was an alias or a class member. In the alias case  we took the alias  whereas in the class case  we recreated a selection on the stable scrutinee. We did not allow that on abstract type members.  We now uniformly do it for all kinds of type members. If the scrutinee is a (non-skolem) stable type  we do not even look at the info of the type member. We directly create a selection to it  which corresponds to what we did before for class members.  We only try to dealias type members if the scrutinee type is not a stable type.  ---  Note that this goes against the current spec and should in theory require (yet another) SIP amendment. The core meeting decided a few ago to go for it anyway and ""ask for forgiveness"" later so that we can have it in 3.6.0 :man_shrugging:.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i21402.scala; tests/pos/match-type-extract-path-dependent.scala,sjrd,2024-10-04T08:09:36Z,2024-10-08T09:33:35Z
21401,21428,Check all top-level covariant capture sets in checkNotUniversal,Fixes #21401,closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; tests/neg-custom-args/captures/i21401.check; tests/neg-custom-args/captures/i21401.scala,odersky,2024-08-23T17:44:48Z,2024-08-23T22:08:18Z
21400,21718,Always interpret underscores inside patterns as type bounds,"Always interpret underscores inside patterns as type bounds  even when `ctx.settings.XkindProjector.value == ""underscores""`.  Fixes #14952 and fixes #21400.  Issue introduced in #12378.",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/14952.scala; tests/pos/21400.scala; tests/pos/21400b.scala,mbovel,2024-10-07T17:49:12Z,2024-10-07T20:49:15Z
21400,22160,[sync/backports]: Synchronize with scala/scala3-lts,,closed,.github/Dockerfile; .github/workflows/ci.yaml; community-build/community-projects/scala-collection-compat; community-build/community-projects/stdLib213; community-build/src/scala/dotty/communitybuild/projects.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/Properties.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/MessageKind.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/staging/HealType.scala; compiler/src/dotty/tools/dotc/transform/ArrayApply.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/scala/quoted/runtime/impl/printers/Extractors.scala; compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; compiler/test/dotty/tools/backend/jvm/ArrayApplyOptTest.scala; docs/_spec/Gemfile.lock; project/Build.scala; project/scripts/check-cla.sh; scaladoc-testcases/src/tests/opaqueTypes.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; tests/neg/21538.check; tests/neg/21538.scala; tests/neg/i16815.check,WojciechMazur,2024-12-07T13:38:02Z,2024-12-09T11:34:08Z
21394,21715,Fix rewrite logic for old `<function> _` syntax,"A rewrite would previously produce uncompilable code if the access path to the eta-expanded function goes through at least one `def`.  Fixes #21394",closed,compiler/src/dotty/tools/dotc/typer/Migrations.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/rewrites/i21394.check; tests/rewrites/i21394.scala,bracevac,2024-10-06T22:00:07Z,2024-10-07T07:19:24Z
21392,21504,Fix #21392: Adjust `canComparePredefined(Nothing  T)` in explicit nulls,"Fix #21392  ",closed,compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/explicit-nulls/pos/i21392.scala,noti0na1,2024-08-28T14:38:41Z,2024-08-28T18:51:32Z
21392,22113,"Backport ""Fix #21392: Adjust `canComparePredefined(Nothing  T)` in explicit nulls"" to LTS",Backports #21504 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/explicit-nulls/pos/i21392.scala,WojciechMazur,2024-12-03T20:23:35Z,2024-12-04T17:19:55Z
21382,21982,Undo patch of double-block apply,#21382,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/rewrites/Rewrites.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/rewrites/i21382.scala,bracevac,2024-11-19T16:49:28Z,2025-01-13T20:21:24Z
21380,21389,add tracking of NotNullInfo for Match  Case  Try trees (fix #21380),,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/neg-best-effort-pickling.blacklist; tests/explicit-nulls/neg/i21380.scala; tests/explicit-nulls/neg/i21380b.scala; tests/explicit-nulls/neg/i21380c.scala,olhotak,2024-08-14T20:39:52Z,2024-09-11T13:32:52Z
21380,22121,"Backport ""add tracking of NotNullInfo for Match  Case  Try trees (fix #21380)"" to LTS",Backports #21389 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/explicit-nulls/neg/i21380.scala; tests/explicit-nulls/neg/i21380b.scala; tests/explicit-nulls/neg/i21380c.scala,WojciechMazur,2024-12-03T21:18:51Z,2024-12-04T17:20:57Z
21360,21591,Regression test for 21360,"Closes #21360   @dwijnand This might have been fixed by your recently merged changes to constructor completion. ",closed,tests/pos/i21360.scala,odersky,2024-09-14T16:16:36Z,2024-09-14T18:44:43Z
21359,21364,fix: throw an error before assigning ErrorType when expanding constValue,fixes #21359 ,closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; tests/neg/i21359.scala,KacperFKorban,2024-08-12T09:35:08Z,2024-09-12T09:51:44Z
21352,21356,"Revert ""Compensate loss of transitivity""","This reverts commit 7c4bd676 See https://github.com/scala/scala3/pull/21344#issuecomment-2275111405  We will have to reconsider how to alleviate the transitory problem before releasing 3.6.  Fixes #21320 Fixes #21352",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i21320a.scala; tests/pos/i21320b.scala; tests/pos/i21352a/schema.scala; tests/pos/i21352a/schemaDerivation.scala; tests/pos/i21352b.scala; tests/pos/i21352c.scala,EugeneFlesselle,2024-08-09T08:17:28Z,2024-08-09T12:31:28Z
21352,21485,"Backport ""Revert ""Compensate loss of transitivity"""" to 3.5.2",Backports #21356 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i21320a.scala; tests/pos/i21320b.scala; tests/pos/i21352a/schema.scala; tests/pos/i21352a/schemaDerivation.scala; tests/pos/i21352b.scala; tests/pos/i21352c.scala,WojciechMazur,2024-08-28T10:50:47Z,2024-08-28T11:54:46Z
21347,21309,Fix setup of CapSet arguments.,These arguments tell the whole truth; they cannot possibly be decorated with another capture set. So we should not add a capture set variable.,closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CapturingType.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; library/src/scala/caps.scala; tests/neg-custom-args/captures/i21313.check; tests/neg-custom-args/captures/i21313.scala; tests/neg-custom-args/captures/i21347.check; tests/neg-custom-args/captures/i21347.scala; tests/pos-custom-args/captures/i21313.scala; tests/pos/polycap.scala,odersky,2024-07-31T18:15:59Z,2024-08-08T15:32:16Z
21347,21583,Treat more closure parameter types as inferred,"This is necessary for types that contain possibly illegal @retains annotations since those annotations are only removed before pickling for InferredTypes.  Fixes #21437 ",closed,compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-custom-args/captures/i21347.scala,odersky,2024-09-13T09:01:07Z,2024-09-13T15:12:07Z
21346,21709,Add support for clauseInterleaving in JVM generic signatures,Closes #21346 ,closed,compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; tests/run/i21346.check; tests/run/i21346.scala,hamzaremmal,2024-10-05T13:31:53Z,2024-10-07T13:46:20Z
21335,21337,Report only non-overridden unimplemented members,"Previously  when a concrete class A had unimplemented members that are overridden  all overrides would be reported as unimplemented in the error message. This would produce error messages that are not accurate  and that suggest stubs that are not correct.  This patch fixes the issue by reporting in the error message only the unimplemented members that are not overridden by other unimplemented members.  Fixes #21335",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/i21335.check; tests/neg/i21335.scala,Duhemm,2024-08-06T16:15:19Z,2024-08-08T08:07:28Z
21335,21484,"Backport ""Report only non-overridden unimplemented members"" to 3.5.2",Backports #21337 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/i21335.check; tests/neg/i21335.scala,WojciechMazur,2024-08-28T10:39:05Z,2024-08-28T11:54:36Z
21335,22092,"Backport ""Report only non-overridden unimplemented members"" to LTS",Backports #21337 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/i21335.check; tests/neg/i21335.scala,WojciechMazur,2024-12-02T20:13:46Z,2024-12-03T19:00:43Z
21333,21800,Root of Java select must be class or rooted package,"Fixes #21333   Edge case in Java interop.",closed,compiler/src/dotty/tools/dotc/reporting/MessageRendering.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/t10350/Bar.scala; tests/pos/t10350/Baz.java; tests/pos/t10350/Foo.java; tests/pos/t11788/Bar.scala; tests/pos/t11788/Foo.java; tests/pos/t11788b/Bar.scala; tests/pos/t11788b/Foo.java; tests/pos/t11788b/java.java; tests/pos/t11788c/Bar.scala; tests/pos/t11788c/Foo.java; tests/pos/t11788c/java.java,som-snytt,2024-10-17T17:57:56Z,2025-02-27T12:32:40Z
21320,21356,"Revert ""Compensate loss of transitivity""","This reverts commit 7c4bd676 See https://github.com/scala/scala3/pull/21344#issuecomment-2275111405  We will have to reconsider how to alleviate the transitory problem before releasing 3.6.  Fixes #21320 Fixes #21352",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i21320a.scala; tests/pos/i21320b.scala; tests/pos/i21352a/schema.scala; tests/pos/i21352a/schemaDerivation.scala; tests/pos/i21352b.scala; tests/pos/i21352c.scala,EugeneFlesselle,2024-08-09T08:17:28Z,2024-08-09T12:31:28Z
21320,21485,"Backport ""Revert ""Compensate loss of transitivity"""" to 3.5.2",Backports #21356 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i21320a.scala; tests/pos/i21320b.scala; tests/pos/i21352a/schema.scala; tests/pos/i21352a/schemaDerivation.scala; tests/pos/i21352b.scala; tests/pos/i21352c.scala,WojciechMazur,2024-08-28T10:50:47Z,2024-08-28T11:54:46Z
21314,21316,Fix syntax errors introduced by #21206,Closes #21314 ,closed,tests/pos/i21189-alt.scala; tests/pos/i21189.scala,hamzaremmal,2024-08-02T08:27:09Z,2024-08-02T09:28:54Z
21300,21331,fix: Dealias NamedTuple's name types when resolving NamedTuple's element types,fixes #21300 ,closed,compiler/src/dotty/tools/dotc/core/TypeUtils.scala; tests/pos/i21300.scala,KacperFKorban,2024-08-05T14:36:42Z,2024-08-10T17:53:21Z
21295,21891,Fix #21295: Restrict `provablyDisjoint` with `Nothing`s in invariant type params.,"If `Foo[T]` is invariant in `T`  we previously concluded that `Foo[A] ⋔ Foo[B]` from `A ⋔ B`. That is however wrong if both `A` and `B` can be (instantiated to) `Nothing`.  We now rule out these occurrences in two ways:  * either we show that `T` corresponds to a field  like we do in the covariant case  or * we show that `A` or `B` cannot possibly be `Nothing`.  The second condition is shaky at best. I would have preferred not to include it. However  introducing the former without the fallback on the latter breaks too many existing test cases.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i21295.scala,sjrd,2024-11-05T16:06:05Z,2024-11-06T13:17:44Z
21295,21906,"Backport ""Fix #21295: Restrict `provablyDisjoint` with `Nothing`s in invariant type params."" to 3.6.2",Backports #21891 to the 3.6.2 branch.  PR submitted by the release tooling.,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i21295.scala,WojciechMazur,2024-11-06T17:45:18Z,2024-11-08T12:04:39Z
21282,21377,Bound TypeRepr by Matchable in Quotes,Closes #21282 ,closed,library/src/scala/quoted/Quotes.scala; tests/pos/i21282.scala,hamzaremmal,2024-08-13T10:01:58Z,2024-08-19T09:05:39Z
21275,21312,A tweak to type improvement,"When we replace Nothing by a fresh type variable  we should not accidentally instantiate that type variable to Any in case it is still undetermined. We achieve this by giving the type variable a slightly disguised version of Nothing which makes the compiler believe it has a lower bound.  Fixes #21275",closed,compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i21275.scala,odersky,2024-08-01T11:39:19Z,2024-08-02T08:58:44Z
21275,21474,"Backport ""A tweak to type improvement"" to 3.5.2",Backports #21312 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i21275.scala,WojciechMazur,2024-08-28T09:12:35Z,2024-08-28T11:52:42Z
21263,21338,Bump scala-cli to 1.4.3,"Closes #21263  Closes #21229",closed,project/Build.scala,hamzaremmal,2024-08-06T17:24:08Z,2024-08-07T08:14:00Z
21258,21268,"Revert ""Approximate MatchTypes with lub of case bodies  if non-recursive"" in 3.4.3",Reverts #19761 in 3.4.3-RC1 as discussed in #21258 and accepted by the core compiler team.,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionScalaCliSuite.scala; tests/pos/13633.scala; tests/pos/Tuple.Drop.scala; tests/pos/Tuple.Elem.scala; tests/pos/i19710.scala; tests/run-macros/type-show/Test_2.scala,WojciechMazur,2024-07-24T16:06:01Z,2024-07-29T10:04:49Z
21258,21266,"Revert ""Approximate MatchTypes with lub of case bodies  if non-recursive"" in 3.5.0",Reverts #19761 in 3.5.0-RC6 as discussed in #21258 and accepted by the core compiler team.,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/13633.scala; tests/pos/Tuple.Drop.scala; tests/pos/Tuple.Elem.scala; tests/pos/i19710.scala; tests/run-macros/type-show/Test_2.scala,WojciechMazur,2024-07-24T16:02:01Z,2024-07-29T11:38:39Z
21258,21267,"Revert ""Approximate MatchTypes with lub of case bodies  if non-recursive"" in 3.5.1",Reverts #19761 in 3.5.1-RC2 as discussed in #21258 and accepted by the core compiler team.,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/13633.scala; tests/pos/Tuple.Drop.scala; tests/pos/Tuple.Elem.scala; tests/pos/i19710.scala; tests/run-macros/type-show/Test_2.scala,WojciechMazur,2024-07-24T16:03:59Z,2024-07-29T11:43:25Z
21258,21336,Add a 3.6-migration warning for MT lubbing,Fixes #21258  all the other parts having been addressed (reverting a change in binary erasure  which shipped in patch releases),closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/warn/i21258.check; tests/warn/i21258.scala,dwijnand,2024-08-06T16:00:28Z,2024-08-09T12:08:22Z
21242,22206,Partial Fix #21242: Add REPL init script setting,"Partial fix #21242  Test with flag at REPL startup:   ```scala > ./bin/scalaQ --repl-init-script 'println(""Hello from init script!""); val i = 2 * 2' [warning] MainGenericRunner class is deprecated since Scala 3.5.0  and Scala CLI features will not work. [warning] Please be sure to update to the Scala CLI launcher to use the new features. [warning] Check the Scala 3.5.0 release notes to troubleshoot your installation. Hello from init script! val i: Int = 4 Welcome to Scala 3.6.4-RC1-bin-SNAPSHOT-nonbootstrapped-git-5ea7c13 (17.0.12  Java OpenJDK 64-Bit Server VM). Type in expressions for evaluation. Or try :help.                                                                                                                                              scala>   ```  Test inside REPL:  ```scala sbt:scala3> repl Welcome to Scala 3.6.4-RC1-bin-SNAPSHOT-nonbootstrapped-git-20e6f11 (17.0.12  Java OpenJDK 64-Bit Server VM). Type in expressions for evaluation. Or try :help.                                                                                                                                              scala> :reset --repl-init-script:'println(""Hello from init script!"")' Resetting REPL state with the following settings:   --repl-init-script:println(""Hello from init script!"")  Hello from init script!                                                                                                                                              scala>  ```  scala-cli can use this flag to passing init code to REPL.",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test-resources/repl/init-script-flag,noti0na1,2024-12-13T11:55:41Z,2025-01-09T14:10:42Z
21242,22636,Fix #21242: Add REPL flag to quit after evaluating init script,"Adding a new REPL flag `--repl-quit-after-init`: evaluate the init script and skip the interactive mode.  Fix the remaining part of #21242  Test with flag at REPL startup:  ```scala > ./bin/replQ --repl-quit-after-init --repl-init-script 'println(""Hello from init script!""); val i = 2 * 2'  Hello from init script! val i: Int = 4 > ```",closed,bin/replQ; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test/dotty/tools/scripting/BashExitCodeTests.scala,noti0na1,2025-02-21T12:52:53Z,2025-02-28T15:26:50Z
21229,21338,Bump scala-cli to 1.4.3,"Closes #21263  Closes #21229",closed,project/Build.scala,hamzaremmal,2024-08-06T17:24:08Z,2024-08-07T08:14:00Z
21228,21640,Filter opaque modifier from object documentation,Fixes #21228 ,closed,scaladoc-testcases/src/tests/opaqueTypes.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala,HarrisL2,2024-09-24T16:43:54Z,2024-09-24T18:14:15Z
21225,22457,Added apply methods to import selectors in Quotes #21225,Fixes #21225 ,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/run-macros/i21225.check; tests/run-macros/i21225/Macro_1.scala; tests/run-macros/i21225/Test_2.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala,ghik,2025-01-26T00:02:53Z,2025-02-07T14:00:55Z
21215,21252,Add regression test for #21215 fixed in #21226,Closes #21215,closed,tests/pos/i21215.scala,EugeneFlesselle,2024-07-24T08:10:27Z,2024-07-24T12:00:15Z
21215,22079,"Backport ""Add regression test for #21215 fixed in #21226"" to LTS",Backports #21252 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,tests/pos/i21215.scala,WojciechMazur,2024-12-02T19:42:06Z,2024-12-03T18:58:55Z
21212,21226,Fix prioritization of `given`s over `implicit`s,"- Fix a typo in `Applications#compare#isAsGood#isGiven` which always used `alt1`  to determine if the altneratives passed to `isAsGoodValueType` were givens.  - Update `isAsGoodValueType` to not prefer givens over extensions  by negating the `isGiven` parameter  letting extensions and givens now have the same priority level as far as that rule is concerned.  - Modify `given`/`implicit` definitions from the `Namer` and the [`PPrint`](https://github.com/dotty-staging/PPrint) community-project to resolve ambiguity errors introduced by the changes.  See the commit message [there]( https://github.com/dotty-staging/PPrint/compare/2203dc6081f5e8fa89f552b155724b0a8fdcec03...34a777f687bc851953e682f99edcae9d2875babc#diff-d18970f29be02f5755463f09892b48c21b29ad72cc2d4af5db059602d0ecfd39) for details on changes to the community-build.  Fixes #21212",closed,community-build/community-projects/PPrint; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/i13044.scala; tests/pos/i19715.scala; tests/pos/i21212.scala,EugeneFlesselle,2024-07-18T16:43:43Z,2024-07-23T21:35:23Z
21190,21191,Regression test for extension nullification  nowarn for different opacities,"Fixes #21190   ~Adjust~ test that params must not be of different opacity ~opaque~.  ~Other aliases are permitted  but could check if they are effectively final. String alias can't be overridden.~  The tweak was https://github.com/scala/scala3/pull/22268 and the ticket was a duplicate. In the meantime  it also doesn't warn for any override  so the previous concern about aliases doesn't apply.",closed,tests/warn/i21190.scala,som-snytt,2024-07-14T02:31:09Z,2025-02-28T11:47:32Z
21189,21206,fix: Only implement a deferred given in a class if its parent won't implement it,"It should be possible to extend a class that inherits a deferred given  so a generated given implementation should not be final.  closes #21189 ",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i21189-alt.scala; tests/pos/i21189.scala,KacperFKorban,2024-07-16T21:47:31Z,2024-08-01T17:53:14Z
21179,21186,emit generatedNonLocalClass in backend when callback is not enabled,fixes https://github.com/scala/scala3/issues/21179,closed,compiler/src/dotty/tools/backend/jvm/CodeGen.scala; sbt-bridge/test/xsbt/ProductsSpecification.scala; sbt-bridge/test/xsbt/ScalaCompilerForUnitTesting.scala; sbt-bridge/test/xsbti/TestCallback.scala,bishabosha,2024-07-12T15:45:21Z,2024-07-16T20:20:08Z
21154,21214,add child to parent in completion context,"This ensures that the positions of forced Child annotations always happens in the source file of the parent class  and not in another file that forced the completion to happen  fixes #21154 ",closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/i21154/A.scala; tests/pos/i21154/Z.scala; tests/pos/i21154/Z.tastycheck,bishabosha,2024-07-17T15:07:12Z,2024-07-24T08:12:07Z
21071,21518,Re-use attachment in exportForwarders to handle ambiguous overloads,"exportForwarders can be called more than once for the same expression if there are ambiguous overloads.  Closes #21071",closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i21071.check; tests/neg/i21071.scala,wjoel,2024-08-30T12:49:25Z,2024-09-03T18:03:09Z
21071,22116,"Backport ""Re-use attachment in exportForwarders to handle ambiguous overloads"" to LTS",Backports #21518 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i21071.check; tests/neg/i21071.scala,WojciechMazur,2024-12-03T20:53:43Z,2024-12-04T17:20:18Z
21036,21045,Refine implicit priority change warnings,"Fixes #21036 Fixes #20572",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,odersky,2024-07-05T12:14:32Z,2024-07-08T20:31:34Z
21036,21171,"Backport ""Refine implicit priority change warnings"" to 3.5.0",Backports #21045 to 3.5.0-RC4,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,WojciechMazur,2024-07-10T21:56:05Z,2024-07-11T08:00:11Z
21036,21182,"Backport ""Refine implicit priority change warnings"" to 3.5.1",Backports #21045 to 3.5.1-RC1,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,WojciechMazur,2024-07-12T13:11:41Z,2024-07-14T09:30:05Z
21015,21070,Do not propagate `TypeError`s of ops from `TypeComparer#tryAlso`,"In pos-deep-subtype/i21015.scala:30  we ask the TypeComparer if `M1[Int] <:< M1[A]`  `isMatchingApply` first tries `isSubArgs` which succeeds  but then also checks if a weaker constraint is generated by `recur(tp1.superTypeNormalized  tp2.superTypeNormalized)`. The latter throws a `RecursionOverflow` which  before the changes  bypassed the former successful check  and failed the overall subtype test.  Fix #21015",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos-deep-subtype/i21015.scala,EugeneFlesselle,2024-07-05T18:29:56Z,2024-07-06T07:28:40Z
21015,21169,"Backport ""Do not propagate `TypeError`s of ops from `TypeComparer#tryAlso`"" to LTS",Backports #21070 to the LTS branch.  PR submitted by the release tooling.,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos-deep-subtype/i21015.scala,WojciechMazur,2024-07-10T21:37:07Z,2024-07-11T08:05:56Z
21012,20987,Implement SIP 57 - add runtimeChecked method and annotation,"ref: https://docs.scala-lang.org/sips/replace-nonsensical-unchecked-annotation.html  Also this doesn't change synthetic code that is generated to use `@unchecked`  or make `@unchecked` meaningless for this use case - this should probably come at a later stage after the definition is no longer experimental  fixes #21012",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/semanticdb/ExtractSemanticDB.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotty/tools/repl/TabcompleteTests.scala; docs/_docs/reference/experimental/runtimeChecked.md; docs/sidebar.yml; language-server/test/dotty/tools/languageserver/CompletionTest.scala; library/src/scala/annotation/internal/RuntimeChecked.scala; library/src/scala/runtime/stdLibPatches/Predef.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala; tests/neg/runtimeChecked-2.check; tests/neg/runtimeChecked-2.scala; tests/neg/runtimeChecked.check; tests/neg/runtimeChecked.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala; tests/run/runtimeChecked-2.scala; tests/run/runtimeChecked.scala,bishabosha,2024-07-03T09:08:15Z,2024-07-24T09:25:13Z
20991,21626,Enable PC tests in test_windows_fast,Closes #20991,closed,.github/workflows/ci.yaml,hamzaremmal,2024-09-23T06:44:33Z,2024-09-23T08:30:30Z
20951,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
20946,21852,Add missing error messages to asserts in QuotesImpl,closes #20946,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/neg/i20946/Macro_1.scala; tests/neg/i20946/Test_2.scala; tests/neg/i20946a/Macro_1.scala; tests/neg/i20946a/Test_2.scala,KacperFKorban,2024-10-29T09:32:54Z,2024-11-04T11:33:59Z
20901,20910,fix issue 20901: etaCollapse context bound type,fixes https://github.com/scala/scala3/issues/20901,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20901/Foo.scala; tests/pos/i20901/Foo.tastycheck; tests/semanticdb/expect/Methods.expect.scala; tests/semanticdb/metac.expect,bishabosha,2024-07-01T15:05:53Z,2024-07-01T22:22:20Z
20897,21241,Fix #20897: Make `Nothing ⋔ Nothing`  as per spec.,"`derivesFrom`  used in `provablyDisjointClasses`  normally returns `false` when the receiver is `Nothing`. However  it returns `true` if the right-hand-side happens to be exactly `Nothing` as well. For the purpose of computing `provablyDisjoint`  that is not what we want.  The root issue was that we let the previous algorithm handle `Nothing` like a class type  which it *is* in dotc but not in the spec. That led to this mistake.  `AnyKind` suffers a similar issue  but already had special-cases in various places to mitigate it.  Instead of adding a new special-case for `Nothing` inside `provablyDisjointClasses`  we address the root issue. Now we deal with `Nothing` and `AnyKind` early  before trying any of the code paths that handle (real) class types.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i20897.scala,sjrd,2024-07-22T11:41:38Z,2024-07-23T03:46:22Z
20897,21458,"Backport ""Fix #20897: Make `Nothing ⋔ Nothing`  as per spec."" to 3.5.2",Backports #21241 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i20897.scala,WojciechMazur,2024-08-27T20:35:45Z,2024-08-27T22:08:24Z
20897,22077,"Backport ""Fix #20897: Make `Nothing ⋔ Nothing`  as per spec."" to LTS",Backports #21241 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i20897.scala,WojciechMazur,2024-12-02T19:03:57Z,2024-12-03T18:58:39Z
20860,20989,Use final result type to check selector bound,Fixes #20860 ,closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/pos/i20860.scala,som-snytt,2024-07-03T11:45:18Z,2024-07-03T13:12:52Z
20858,21017,Fix isomorphism tests of `AndOrType`s under non-empty `BinderPairs`,"Before the changes  when comparing two `HKTypeLambda` result types  the list of binding pairs was lost when entering comparison of `AndOrType`s  which caused the `equals` to fail  and hence prevented hash-consing.  Even though `M1` and `M2` in pos/i20858-min should still conform to one-another  we entered a deep-subtype comparison because of the order in which the TypeComparer does dealiasing of AppliedTypes  and comparison of MatchCases and AndTypes.  Fix #20858",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20858-min.scala; tests/pos/i20858/defns_1.scala; tests/pos/i20858/usages_2.scala,EugeneFlesselle,2024-07-04T12:15:04Z,2024-07-04T17:16:00Z
20858,21468,"Backport ""Fix isomorphism tests of `AndOrType`s under non-empty `BinderPairs`"" to 3.5.2",Backports #21017 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; docs/_docs/reference/contextual/givens.md; tests/pos/i20858-min.scala; tests/pos/i20858/defns_1.scala; tests/pos/i20858/usages_2.scala,WojciechMazur,2024-08-28T08:44:16Z,2024-08-28T11:42:44Z
20858,21986,"Backport ""Fix isomorphism tests of `AndOrType`s under non-empty `BinderPairs`"" to LTS",Backports #21017 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20858-min.scala; tests/pos/i20858/defns_1.scala; tests/pos/i20858/usages_2.scala,prolativ,2024-11-20T09:34:15Z,2024-12-02T17:37:51Z
20856,21243,Fix #20856: Serialize `Waiting` and `Evaluating` as if `null`.,"This strategy ensures the ""serializability"" condition of parallel programs--not to be confused with the data being `java.io.Serializable`. Indeed  if thread A is evaluating the lazy val while thread B attempts to serialize its owner object  there is also an alternative schedule where thread B serializes the owner object *before* A starts evaluating the lazy val. Therefore  forcing B to see the non-evaluating state is correct.",closed,library/src/scala/runtime/LazyVals.scala; tests/run/i20856.check; tests/run/i20856.scala,sjrd,2024-07-22T15:15:33Z,2024-07-31T10:54:33Z
20856,21465,"Backport ""Fix #20856: Serialize `Waiting` and `Evaluating` as if `null`."" to 3.5.2",Backports #21243 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,library/src/scala/runtime/LazyVals.scala; tests/run/i20856.check; tests/run/i20856.scala,WojciechMazur,2024-08-27T20:39:56Z,2024-08-27T22:14:45Z
20856,22084,"Backport ""Fix #20856: Serialize `Waiting` and `Evaluating` as if `null`."" to LTS",Backports #21243 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,library/src/scala/runtime/LazyVals.scala; tests/run/i20856.check; tests/run/i20856.scala,WojciechMazur,2024-12-02T19:42:50Z,2024-12-03T18:59:35Z
20769,20861,Stabilise SIP-47 (Adding Clause Interleaving to method definitions),"Closes #20769   Initial implementation in #14019 ",closed,compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/config/SourceVersion.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; docs/_docs/reference/other-new-features/generalized-method-syntax.md; library/src/scala/runtime/stdLibPatches/language.scala; presentation-compiler/test/dotty/tools/pc/tests/signaturehelp/SignatureHelpInterleavingSuite.scala; scaladoc-testcases/src/tests/extensionParams.scala; scaladoc-testcases/src/tests/methodsAndConstructors.scala; tests/neg/given-loop-prevention.check; tests/neg/i20415.scala; tests/neg/i6716.check; tests/neg/i6716.scala; tests/neg/i7294.check; tests/neg/i7294.scala; tests/neg/interleaving-ab.scala; tests/neg/interleaving-params.scala; tests/neg/interleaving-signatureCollision.scala; tests/neg/interleaving-typeApply.check; tests/neg/interleaving-typeApply.scala; tests/neg/interleaving-unmatched.scala; tests/neg/interleavingExperimental.check; tests/neg/interleavingExperimental.scala; tests/neg/looping-givens.check; tests/neg/looping-givens.scala; tests/neg/namedTypeParams.check; tests/neg/namedTypeParams.scala; tests/neg/overrides.scala; tests/pos/i20415.scala; tests/pos/i6716.scala; tests/pos/interleaving-ba.scala,hamzaremmal,2024-06-28T16:01:27Z,2024-07-04T08:00:58Z
20711,20631,SIP 46 - read classpath from file  remove lib directory in distribution,"**This should be backported to the 3.5.0 line**  write classpath to file  and do not write the `lib` directory  this saves duplicating the jars in the distribution.  In the distribution  we write `/etc/scala.classpath`  `/etc/with_compiler.classpath`  and `/etc/scaladoc.classpath`. each of these are formatted such that each line is a relative path from the `/maven2` directory in the distribution.  To produce these files  I use the output of the same `cs fetch` command that is used to populate the `maven2` directory - so the correspondence is 1:1. This is a much better solution than the previous manual resolution of classpath from within the bash/batch scripts - as the classpath libraries actually change a lot between versions.  The contents look like the following:  **scala.classpath** (compiler classpath used by scalac) ```text org/scala-lang/scala3-interfaces/3.5.1-RC1-bin-SNAPSHOT/scala3-interfaces-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scala3-compiler_3/3.5.1-RC1-bin-SNAPSHOT/scala3-compiler_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scala3-library_3/3.5.1-RC1-bin-SNAPSHOT/scala3-library_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/tasty-core_3/3.5.1-RC1-bin-SNAPSHOT/tasty-core_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/modules/scala-asm/9.6.0-scala-1/scala-asm-9.6.0-scala-1.jar org/scala-sbt/compiler-interface/1.9.6/compiler-interface-1.9.6.jar org/jline/jline-reader/3.25.1/jline-reader-3.25.1.jar org/jline/jline-terminal/3.25.1/jline-terminal-3.25.1.jar org/jline/jline-terminal-jna/3.25.1/jline-terminal-jna-3.25.1.jar org/scala-lang/scala-library/2.13.12/scala-library-2.13.12.jar org/scala-sbt/util-interface/1.9.8/util-interface-1.9.8.jar org/jline/jline-native/3.25.1/jline-native-3.25.1.jar net/java/dev/jna/jna/5.14.0/jna-5.14.0.jar ```  **with_compiler.classpath** (concatenated to scala.classpath to run the scalac command) ``` org/scala-lang/scala3-staging_3/3.5.1-RC1-bin-SNAPSHOT/scala3-staging_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scala3-tasty-inspector_3/3.5.1-RC1-bin-SNAPSHOT/scala3-tasty-inspector_3-3.5.1-RC1-bin-SNAPSHOT.jar ```  and **scaladoc.classpath** ``` org/scala-lang/scala3-interfaces/3.5.1-RC1-bin-SNAPSHOT/scala3-interfaces-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scala3-compiler_3/3.5.1-RC1-bin-SNAPSHOT/scala3-compiler_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scala3-library_3/3.5.1-RC1-bin-SNAPSHOT/scala3-library_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/tasty-core_3/3.5.1-RC1-bin-SNAPSHOT/tasty-core_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/modules/scala-asm/9.6.0-scala-1/scala-asm-9.6.0-scala-1.jar org/scala-sbt/compiler-interface/1.9.6/compiler-interface-1.9.6.jar org/jline/jline-reader/3.25.1/jline-reader-3.25.1.jar org/jline/jline-terminal/3.25.1/jline-terminal-3.25.1.jar org/jline/jline-terminal-jna/3.25.1/jline-terminal-jna-3.25.1.jar org/scala-lang/scala-library/2.13.12/scala-library-2.13.12.jar org/scala-sbt/util-interface/1.9.8/util-interface-1.9.8.jar org/jline/jline-native/3.25.1/jline-native-3.25.1.jar net/java/dev/jna/jna/5.14.0/jna-5.14.0.jar org/scala-lang/scala3-tasty-inspector_3/3.5.1-RC1-bin-SNAPSHOT/scala3-tasty-inspector_3-3.5.1-RC1-bin-SNAPSHOT.jar org/scala-lang/scaladoc_3/3.5.1-RC1-bin-SNAPSHOT/scaladoc_3-3.5.1-RC1-bin-SNAPSHOT.jar com/vladsch/flexmark/flexmark/0.62.2/flexmark-0.62.2.jar com/vladsch/flexmark/flexmark-util-ast/0.62.2/flexmark-util-ast-0.62.2.jar com/vladsch/flexmark/flexmark-util-data/0.62.2/flexmark-util-data-0.62.2.jar com/vladsch/flexmark/flexmark-util-html/0.62.2/flexmark-util-html-0.62.2.jar com/vladsch/flexmark/flexmark-ext-anchorlink/0.62.2/flexmark-ext-anchorlink-0.62.2.jar com/vladsch/flexmark/flexmark-ext-autolink/0.62.2/flexmark-ext-autolink-0.62.2.jar com/vladsch/flexmark/flexmark-ext-emoji/0.62.2/flexmark-ext-emoji-0.62.2.jar com/vladsch/flexmark/flexmark-ext-gfm-strikethrough/0.62.2/flexmark-ext-gfm-strikethrough-0.62.2.jar com/vladsch/flexmark/flexmark-ext-gfm-tasklist/0.62.2/flexmark-ext-gfm-tasklist-0.62.2.jar com/vladsch/flexmark/flexmark-ext-wikilink/0.62.2/flexmark-ext-wikilink-0.62.2.jar com/vladsch/flexmark/flexmark-ext-tables/0.62.2/flexmark-ext-tables-0.62.2.jar com/vladsch/flexmark/flexmark-ext-yaml-front-matter/0.62.2/flexmark-ext-yaml-front-matter-0.62.2.jar nl/big-o/liqp/0.8.2/liqp-0.8.2.jar org/jsoup/jsoup/1.17.2/jsoup-1.17.2.jar com/fasterxml/jackson/dataformat/jackson-dataformat-yaml/2.15.1/jackson-dataformat-yaml-2.15.1.jar com/vladsch/flexmark/flexmark-util-builder/0.62.2/flexmark-util-builder-0.62.2.jar com/vladsch/flexmark/flexmark-util-collection/0.62.2/flexmark-util-collection-0.62.2.jar com/vladsch/flexmark/flexmark-util-dependency/0.62.2/flexmark-util-dependency-0.62.2.jar com/vladsch/flexmark/flexmark-util-format/0.62.2/flexmark-util-format-0.62.2.jar com/vladsch/flexmark/flexmark-util-misc/0.62.2/flexmark-util-misc-0.62.2.jar com/vladsch/flexmark/flexmark-util-sequence/0.62.2/flexmark-util-sequence-0.62.2.jar com/vladsch/flexmark/flexmark-util-visitor/0.62.2/flexmark-util-visitor-0.62.2.jar org/jetbrains/annotations/15.0/annotations-15.0.jar com/vladsch/flexmark/flexmark-util/0.62.2/flexmark-util-0.62.2.jar org/nibor/autolink/autolink/0.6.0/autolink-0.6.0.jar com/vladsch/flexmark/flexmark-jira-converter/0.62.2/flexmark-jira-converter-0.62.2.jar org/antlr/antlr4-runtime/4.7.2/antlr4-runtime-4.7.2.jar com/fasterxml/jackson/core/jackson-annotations/2.15.1/jackson-annotations-2.15.1.jar com/fasterxml/jackson/core/jackson-core/2.15.1/jackson-core-2.15.1.jar com/fasterxml/jackson/core/jackson-databind/2.15.1/jackson-databind-2.15.1.jar com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.12.1/jackson-datatype-jsr310-2.12.1.jar ua/co/k/strftime4j/1.0.5/strftime4j-1.0.5.jar org/yaml/snakeyaml/2.0/snakeyaml-2.0.jar com/vladsch/flexmark/flexmark-util-options/0.62.2/flexmark-util-options-0.62.2.jar com/vladsch/flexmark/flexmark-ext-ins/0.62.2/flexmark-ext-ins-0.62.2.jar com/vladsch/flexmark/flexmark-ext-superscript/0.62.2/flexmark-ext-superscript-0.62.2.jar ```  the bash/batch scripts then read these files  concatenating each line to the absolute path of the `maven2` directory  and joining with the systems path separator (and replacing `/` with `\` in batch)  fixes https://github.com/scala/scala3/issues/20711",closed,dist/bin-native-overrides/cli-common-platform.bat; dist/bin/common; dist/bin/common.bat; dist/bin/scalac; dist/bin/scalac.bat; dist/bin/scaladoc; dist/bin/scaladoc.bat; project/Build.scala; project/RepublishPlugin.scala,bishabosha,2024-06-19T15:42:28Z,2024-06-28T14:30:13Z
20588,21593,Fix treatment of separately compiled @native methods in FirstTransform,"We need to use a SymTransformer  fixing the method in the tree is not enough.  Fixes #20588 ",closed,compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/transform/FirstTransform.scala; tests/pos/i20588/Baz_2.scala; tests/pos/i20588/Foo_1.scala,odersky,2024-09-14T17:49:00Z,2024-09-14T20:49:35Z
20572,21045,Refine implicit priority change warnings,"Fixes #21036 Fixes #20572",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,odersky,2024-07-05T12:14:32Z,2024-07-08T20:31:34Z
20572,21171,"Backport ""Refine implicit priority change warnings"" to 3.5.0",Backports #21045 to 3.5.0-RC4,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,WojciechMazur,2024-07-10T21:56:05Z,2024-07-11T08:00:11Z
20572,21182,"Backport ""Refine implicit priority change warnings"" to 3.5.1",Backports #21045 to 3.5.1-RC1,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/given-triangle.check; tests/neg/given-triangle.scala; tests/pos/bson/Test.scala; tests/pos/bson/bson.scala; tests/pos/i20572.scala; tests/pos/i21036.scala; tests/run/given-triangle.scala; tests/warn/bson.check; tests/warn/given-triangle.check; tests/warn/i21036a.check; tests/warn/i21036a.scala; tests/warn/i21036b.check; tests/warn/i21036b.scala,WojciechMazur,2024-07-12T13:11:41Z,2024-07-14T09:30:05Z
20560,22101,Add test cases project for presentation compiler,"This PR adds a mechanism to test the presentation compiler with snippets using arbitrary pre-compiled files. To do so  it adds a new project `scala3-presentation-compiler-testcases`  compiled with the bootstrapped compiler  which is used as a dependency of `scala3-presentation-compiler`. The resulting class path is added to the `ideTestsDependencyClasspath` build info so that the test cases can be used from the presentation compiler tests.  This PR also adds a test case for #20560. It shows that there is no hover info for the resulting type of a `transparent inline` macro when it fails to execute. However  the macro succeeds when loading the class `java.sql.Driver`  so that still doesn't tell us what the problem is with #20560…",closed,build.sbt; presentation-compiler-testcases/src/tests/macros/20560.scala; presentation-compiler/test/dotty/tools/pc/base/BasePCSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/hover/HoverTermSuite.scala; project/Build.scala,mbovel,2024-12-03T16:35:22Z,2024-12-04T08:32:40Z
20554,21329,Require named arguments for java defined annotations,Closes #20554,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i20554-a.check; tests/neg/i20554-a/Annotation.java; tests/neg/i20554-a/Test.scala; tests/neg/i20554-b.check; tests/neg/i20554-b/SimpleAnnotation.java; tests/neg/i20554-b/Test.scala; tests/pos-java-interop-separate/i6868/MyScala_2.scala; tests/pos/i20554-a/Annotation.java; tests/pos/i20554-a/Test.scala; tests/pos/i20554-b/SimpleAnnotation.java; tests/pos/i20554-b/Test.scala; tests/pos/i20554-c.scala; tests/pos/i6151/Test.scala; tests/run-macros/i19951-java-annotations-tasty-compat-2/ScalaUser_1.scala; tests/run-macros/i19951-java-annotations-tasty-compat.check; tests/run-macros/i19951-java-annotations-tasty-compat/ScalaUser_2.scala,hamzaremmal,2024-08-05T12:37:12Z,2024-08-06T15:31:36Z
20546,20553,Only set `AppliedType#validSuper` after `AppliedType#cachedSuper`,"since cycles are possible when computing `AppliedType#superType`  see tests/neg/i20546.scala for an example leading to an NPE.  We could use `ctx.period == validSuper && cachedSuper == null` as condition to detect cycles  but they are already handled in `TypeApplications#appliedTo`  with a better error message.  We can update `AppliedType#validSuper` only after the computation is done to fix #20546",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i20546.scala,EugeneFlesselle,2024-06-11T12:46:07Z,2024-06-11T14:09:11Z
20538,21198,Enable betterMatchTypeExtractors in >= 3.6 ,Closes #20538.,closed,compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; library/src/scala/runtime/stdLibPatches/language.scala; tests/neg/mt-deskolemize-2.scala; tests/pos/20538.scala; tests/pos/20538b.scala; tests/pos/mt-deskolemize.scala,mbovel,2024-07-15T16:29:41Z,2024-08-20T14:18:27Z
20521,21223,Fix #20521: Optimise caching for computing atoms and widened in OrTypes,"Fix #20521  When using the `atoms` of a large provisional union type  significant time is wasted computing the widened type and `lub` is invoked repeatedly. This PR addresses this issue by splitting the caching mechanisms for computing `atoms` and computing  the widened type in `OrType`.  As a result of this optimization  the compilation time for `tests/pos/i20521.scala` has been reduced from approximately 40 seconds to 6 seconds  making it comparable to Scala 2's performance. ",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20521.scala,noti0na1,2024-07-18T14:13:53Z,2024-07-19T10:54:35Z
20521,21453,"Backport ""Fix #20521: Optimise caching for computing atoms and widened in OrTypes"" to 3.5.2",Backports #21223 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,.github/dependabot.yml; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20521.scala,WojciechMazur,2024-08-27T20:33:56Z,2024-08-27T22:07:37Z
20521,22073,"Backport ""Fix #20521: Optimise caching for computing atoms and widened in OrTypes"" to LTS",Backports #21223 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20521.scala,WojciechMazur,2024-12-02T18:43:39Z,2024-12-03T18:58:14Z
20520,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
20519,22339,Rollback constraints in compareAppliedTypeParamRef,"This PR adds a `rollbackConstraintsUnless` in `compareAppliedTypeParamRef`. It is required in case the call to `directionalIsSubType` introduces constraints and the call to `directionalRecur` returns `false`.  Fixes #20519",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/20519.scala; tests/pos/20519b.scala; tests/pos/20519c.scala,mbovel,2025-01-10T16:36:18Z,2025-01-13T10:50:03Z
20517,20947,Re-use isConcrete checking in match types for NamedTuple.From," - Move isConcrete to a new object `MatchTypes`. We should also move other MatchType-related stuff from Types and TypeComparer here. Type and TypeComparer are already unconfortably big  and MatchTypes are a coherent topic where everything should work together.  - Streamline isConcrete a bit.  - Re-use isConcrete for a similar test in CheckRealizable.  - Re-use isConcrete for evaluating NamedTuple.From  Fixes #20517",closed,compiler/src/dotty/tools/dotc/core/CheckRealizable.scala; compiler/src/dotty/tools/dotc/core/MatchTypes.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeEval.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i20517.check; tests/neg/i20517.scala,odersky,2024-07-02T12:23:12Z,2024-07-03T14:10:15Z
20517,21447,"Backport ""Re-use isConcrete checking in match types for NamedTuple.From"" to 3.5.2",Backports #20947 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/CheckRealizable.scala; compiler/src/dotty/tools/dotc/core/MatchTypes.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeEval.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i20517.check; tests/neg/i20517.scala,WojciechMazur,2024-08-27T20:28:45Z,2024-08-27T22:05:18Z
20516,20523,Fall back to direct subtype comparison at the end in dropIfSuper and dropIfSub,"Improve compiling in #20516.  We need to be careful to check branches of AndTypes and OrTypes in correct order   see discussion in issue #20516.  Fall back to direct subtype comparison at the end in dropIfSuper and dropIfSub.  We may need to improve subtype checking for large intersections further to be able to fully test the example.  Currently  `tests/pos-deep-subtype/i20516.scala` compiles in 5s with this PR  and in 40s on the main branch.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos-deep-subtype/i20516.scala,noti0na1,2024-06-04T14:53:37Z,2024-06-19T13:57:24Z
20511,21178,Do not crash when typing a closure with unknown type  since it can occur for erroneous input,closes #20511,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i20511-1.check; tests/neg/i20511-1.scala; tests/neg/i20511.check; tests/neg/i20511.scala,KacperFKorban,2024-07-11T15:50:36Z,2024-11-19T10:39:38Z
20503,20524,Fix soundness hole of forgotten reach capabilities,Fixes #20503,closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; tests/neg-custom-args/captures/reaches2.check; tests/neg-custom-args/captures/reaches2.scala; tests/neg/i20503.scala; tests/neg/unsound-reach-2.scala; tests/pos-custom-args/captures/reaches.scala,odersky,2024-06-04T21:19:44Z,2024-06-04T23:21:16Z
20500,22202,fix: hover and go to definition for named tuples,resolves: https://github.com/scala/scala3/issues/20500,closed,presentation-compiler/src/main/dotty/tools/pc/HoverProvider.scala; presentation-compiler/src/main/dotty/tools/pc/MetalsInteractive.scala; presentation-compiler/src/main/dotty/tools/pc/PcDefinitionProvider.scala; presentation-compiler/test/dotty/tools/pc/tests/definition/PcDefinitionSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/hover/HoverTermSuite.scala,kasiaMarek,2024-12-12T15:57:38Z,2025-01-15T12:23:56Z
20496,20593,Fix deterministically adding additional interfaces,"When a class contains calls to 'super' for traits it does not directly implement  these are added to the list of interfaces of the generated class. Previously  because these interfaces were determined using set logic  the ordering of that list was not deterministic.  This PR makes the order deterministic assuming the order in which these calls are registered using `registerSuperCall` in the `CollectSuperCalls` phase is deterministic within each class. This seems likely to me but it'd be great if someone could confirm.  Fixes #20496",closed,compiler/src/dotty/tools/backend/jvm/BTypesFromSymbols.scala; compiler/src/dotty/tools/backend/jvm/DottyBackendInterface.scala; compiler/src/dotty/tools/backend/jvm/GenBCode.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala,raboof,2024-06-18T15:12:05Z,2024-07-01T08:33:33Z
20496,21151,"Backport ""Fix deterministically adding additional interfaces"" to LTS",Backports #20593 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/backend/jvm/BTypesFromSymbols.scala; compiler/src/dotty/tools/backend/jvm/DottyBackendInterface.scala; compiler/src/dotty/tools/backend/jvm/GenBCode.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala,WojciechMazur,2024-07-10T07:06:20Z,2024-07-10T14:24:22Z
20484,20487,Priority warning fix alternative,"Warn about priority change in implicit search only if one of the participating candidates appears in the final result.  It could be that we have an priority change between two ranked candidates that both are superseded by the result of the implicit search. In this case  no warning needs to be reported.  This PR is #20480 with different code for the last commit. I tried to avoid entangling the priority handling too much in the returns types and spent a side effect instead. I believe it's more efficient that way  since priority warnings are very rare.  Fixes #20484  ",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i20484.scala; tests/semanticdb/expect/InventedNames.expect.scala; tests/semanticdb/expect/InventedNames.scala; tests/semanticdb/metac.expect,odersky,2024-05-28T16:11:10Z,2024-05-28T23:12:40Z
20484,20953,"Backport ""Priority warning fix alternative"" to 3.5.0",Backports #20487 to 3.5.0-RC3,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i20484.scala; tests/semanticdb/expect/InventedNames.expect.scala; tests/semanticdb/expect/InventedNames.scala; tests/semanticdb/metac.expect,WojciechMazur,2024-07-02T19:25:26Z,2024-07-03T08:42:03Z
20483,20488,Avoid stacked thisCall contexts,"AddImplicitArgs can recursively add several implicit parameter lists. We need to make sure we don't perform a thisCallContext search in another thisCall context in this case.  Fixes #20483  The original code would back out further and further in the context chain for every implicit parameter section on the secondary constructor. Eventually (in this case after 2 times) bad things happen.",closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20483.scala,odersky,2024-05-28T18:39:05Z,2024-06-10T14:53:08Z
20483,20633,"Backport ""Avoid stacked thisCall contexts"" to 3.5.0 ","Backports #20488 to 3.5.0-RC2 ",closed,compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20483.scala,WojciechMazur,2024-06-19T21:13:17Z,2024-06-20T06:57:53Z
20483,21130,"Backport ""Avoid stacked thisCall contexts"" to LTS",Backports #20488 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20483.scala,WojciechMazur,2024-07-08T18:31:23Z,2024-07-09T16:55:30Z
20482,20268,Streamline `tryNormalize` with `underlyingMatchType`,"Based on #20257  This PR has multiple small but significant changes to `tryNormalize`  I would recommend reviewing the commits individually. The overall goal was to have a more uniform treatment of `tryNormalize` rather than the three overrides  making the logic easier to follow.  It also now reuses `underlyingMatchType` for it  which not only has a caching benefit but also ensures consistent results between them. In particular  making `tryNormalize.exists` imply `underlyingMatchType.exists`  which one might assume as true but did not hold in general previously. And yet  we use `isMatchAlias := underlyingMatchType.exists` in a bunch of places with the assumption that there is nothing to normalise if it returns false.  The next step will be to rework the MatchTypeTrace  which still overlooks some cases. But doing so should be simpler from the proposed setup.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/neg-best-effort-pickling.blacklist; tests/neg/i12049d.check; tests/neg/i12049d.scala; tests/pos/i20482.scala; tests/pos/matchtype-unusedArg/A_1.scala; tests/pos/matchtype-unusedArg/B_2.scala,EugeneFlesselle,2024-04-25T22:22:13Z,2024-07-05T15:39:49Z
20482,21449,"Backport ""Streamline `tryNormalize` with `underlyingMatchType`"" to 3.5.2",Backports #20268 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/neg-best-effort-pickling.blacklist; tests/neg/i12049d.check; tests/neg/i12049d.scala; tests/pos/i20482.scala; tests/pos/matchtype-unusedArg/A_1.scala; tests/pos/matchtype-unusedArg/B_2.scala,WojciechMazur,2024-08-27T20:31:24Z,2024-08-27T22:06:02Z
20478,21202,feat: Implement completions for named tuple fields,closes scala#20478,closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; language-server/test/dotty/tools/languageserver/CompletionTest.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,KacperFKorban,2024-07-16T11:10:20Z,2024-07-17T12:59:55Z
20478,21491,"Backport ""feat: Implement completions for named tuple fields"" to 3.5.2","Backports #21202 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci]",closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; language-server/test/dotty/tools/languageserver/CompletionTest.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,WojciechMazur,2024-08-28T11:51:34Z,2024-08-28T11:51:45Z
20471,21945,Fix #20471: owners of top-level symbols in cached quoted code being incorrect,"Closes #20471 I would just reopen #21932  but it looks like that's disallowed after force pushing... (apologies for the spam)",closed,compiler/src/dotty/tools/dotc/quoted/PickledQuotes.scala; tests/pos-macros/i20471/Macro_1.scala; tests/pos-macros/i20471/Main_2.scala,jchyb,2024-11-13T16:49:48Z,2024-11-18T09:19:47Z
20458,20468,Fix #20458: do not expose ClassInfo in quotes reflect widenTermRefByName,"Previously ClassInfo could easily be exposed with calls like `TypeRepr.of[T].termRef.widenTermRefByName`.  Fixes #20458",closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/pos-macros/i20458/Macro_1.scala; tests/pos-macros/i20458/Test_2.scala,jchyb,2024-05-24T14:17:01Z,2024-07-01T10:36:41Z
20458,21152,"Backport ""Fix #20458: do not expose ClassInfo in quotes reflect widenTermRefByName"" to LTS",Backports #20468 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/pos-macros/i20458/Macro_1.scala; tests/pos-macros/i20458/Test_2.scala,WojciechMazur,2024-07-10T07:06:37Z,2024-07-10T14:24:29Z
20456,20497,Improve type inference for literal named tuples,"Adds a new `NamedTuple.build` method which fixes the types of the labels first  as suggested in https://github.com/scala/scala3/issues/20456#issuecomment-2136864693  It requires `language.experimental.clauseInterleaving` language import.  Keeps `withNames` as a friendlier option for end-users  fixes https://github.com/scala/scala3/issues/20456",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; library/src/scala/NamedTuple.scala; tests/pos/named-tuples-ops-mirror.scala; tests/run/named-tuples.check; tests/run/named-tuples.scala,bishabosha,2024-05-30T12:39:59Z,2024-05-30T17:40:15Z
20449,22655,Fix opaque types leaking rhs when inlined and found in type params (and a related stale symbol issue),"This PR fixes the 2 issues found in https://github.com/scala/scala3/issues/20449  split into 2 commits.  The first commit fixes the stale symbol related issue found if the files from the issue minimization are compiled together. After suspending and retrying compilation  the classDefs that are defined directly in packages previously would sometimes not have companion objects regenerated  instead relying on the stale symbols from the previous run  causing them not to to pass the reallyExists check when looking for a specific ref. Now we make sure to go through lastKnwonDenotation  since the current one may not exists and may not point us to a Module flag when checking if to regenerate it.  The second commit fixes the opaque type alias rhs leaking in a macro. That was caused by building proxies for all parts of the type  including type arguments to opaque types - from the perspective of a type like Object[OpaqueType]  the opaque type rhs should not be visible.",closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos-macros/i20449/Macro.scala; tests/pos-macros/i20449/Main.scala; tests/run-macros/i20449.check; tests/run-macros/i20449/Macro_1.scala; tests/run-macros/i20449/Main_2.scala,jchyb,2025-02-24T15:31:51Z,2025-03-04T10:05:56Z
20439,20505,widenDealias before extracting namedTupleElementTypes,"@odersky perhaps you have a better suggestion?  fixes https://github.com/scala/scala3/issues/20439",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/named-tuple-selections.scala,bishabosha,2024-05-31T13:48:05Z,2024-06-02T18:35:27Z
20428,20502,make NamedTuple.Empty an alias to NamedTuple,"It was suggested for a follow-up perhaps we should also rename Empty -> EmptyNamedTuple (most code will be doing `import NamedTuple.*`)  fixes #20428",closed,library/src/scala/NamedTuple.scala; tests/run/named-tuples.check; tests/run/named-tuples.scala,bishabosha,2024-05-31T11:56:45Z,2024-06-18T09:41:23Z
20427,20504,move NamedTuple methods to separate scope. re-export,"By moving the methods to NamedTupleDecomposition  there is no issue with trying to reconcile types at inlining  fixes https://github.com/scala/scala3/issues/20427",closed,library/src/scala/NamedTuple.scala; tests/pos/named-tuple-combinators.scala,bishabosha,2024-05-31T13:05:06Z,2024-06-14T12:46:40Z
20420,20436,Treat 3.5-migration the same as 3.5 for a warning,"Treat 3.5-migration the same as 3.5 for a warning about implicit priority change  Fixes #20420",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/warn/i20420.scala,odersky,2024-05-19T15:57:27Z,2024-05-22T14:04:54Z
20420,20582,"Backport ""Treat 3.5-migration the same as 3.5 for a warning about implicit priority change"" to 3.5.0",Backports #20436,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/warn/i20420.scala,WojciechMazur,2024-06-17T09:55:29Z,2024-06-17T21:05:04Z
20419,20454,Accept legacy language features,"Fix #20419  * Accept legacy language features * For other unknown options  it will still fail.",closed,compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/ScalaSettingsProperties.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/test/dotty/tools/dotc/SettingsTests.scala,noti0na1,2024-05-22T16:17:17Z,2024-05-23T14:19:21Z
20415,20441,Set default source version to 3.5,"Superseeds #20435  Closes #20415   [test_scala2_library_tasty] [test_windows_full] [test_java8]",closed,community-build/community-projects/Lucre; community-build/community-projects/Monocle; community-build/community-projects/akka; community-build/community-projects/cask; community-build/community-projects/endpoints4s; community-build/community-projects/izumi-reflect; community-build/community-projects/os-lib; community-build/community-projects/scalatest; community-build/community-projects/scalaz; community-build/community-projects/scas; community-build/community-projects/spire; community-build/community-projects/upickle; community-build/community-projects/utest; compiler/src/dotty/tools/dotc/config/SourceVersion.scala; library/src/scala/quoted/ToExpr.scala; scala2-library-bootstrapped/src/scala/Array.scala; scala2-library-bootstrapped/src/scala/collection/ArrayOps.scala; scala2-library-bootstrapped/src/scala/collection/Factory.scala; scala2-library-bootstrapped/src/scala/collection/Iterable.scala; scala2-library-bootstrapped/src/scala/collection/SortedMap.scala; scala2-library-bootstrapped/src/scala/collection/StrictOptimizedSortedMapOps.scala; scala2-library-bootstrapped/src/scala/collection/generic/DefaultSerializationProxy.scala; scala2-library-bootstrapped/src/scala/collection/mutable/ArraySeq.scala; scala2-library-bootstrapped/src/scala/collection/mutable/CollisionProofHashMap.scala; scala2-library-cc/src/scala/Array.scala; scala2-library-cc/src/scala/collection/ArrayOps.scala; scala2-library-cc/src/scala/collection/Factory.scala; scala2-library-cc/src/scala/collection/Iterable.scala; scala2-library-cc/src/scala/collection/SortedMap.scala; scala2-library-cc/src/scala/collection/StrictOptimizedSortedMapOps.scala,hamzaremmal,2024-05-20T15:50:32Z,2024-05-27T14:18:08Z
20410,20411,Emit switch bytecode when matching unions of a switchable type,Fixes #20410,closed,compiler/src/dotty/tools/dotc/transform/PatternMatcher.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala,dwickern,2024-05-15T05:04:52Z,2024-05-22T20:44:56Z
20401,20402,"Revert ""Set baseVersion to 3.5.1-RC1""","Reverts scala/scala3#20392  Closes #20401 ",closed,project/Build.scala,hamzaremmal,2024-05-14T07:17:49Z,2024-05-14T10:57:51Z
20381,21009,Add workflow to release to winget,"Closes #20381   Depends the availability of an msi installer (#20547)",closed,.github/workflows/publish-winget.yml; .github/workflows/releases.yml,hamzaremmal,2024-07-04T00:02:03Z,2024-07-04T14:52:26Z
20380,20534,Add support for Chocolatey,"Closes #20380   TODO: - ~[x] Generate `msi` files for `scala` (issue: #20378) (Will be done in another PR  but we should already know the format of the URL)~ - [x] Change the worflow to automatically publish to Chocolatey on each stable release (`publish-chocolatey.yml`) - [x] Add icon (`logo.ico`) file  [test_chocolatey]",closed,.github/workflows/build-chocolatey.yml; .github/workflows/build-sdk.yml; .github/workflows/ci.yaml; .github/workflows/publish-chocolatey.yml; .github/workflows/releases.yml; .github/workflows/test-chocolatey.yml; pkgs/README.md; pkgs/chocolatey/README.md; pkgs/chocolatey/icon.svg; pkgs/chocolatey/scala.nuspec; pkgs/chocolatey/tools/chocolateyInstall.ps1; pkgs/chocolatey/tools/chocolateyUninstall.ps1,hamzaremmal,2024-06-08T13:08:46Z,2024-07-18T13:25:29Z
20377,21134,Add test for #20377 fixed in #20504,Close #20377,closed,tests/pos/i20377.scala,EugeneFlesselle,2024-07-09T09:02:51Z,2024-07-09T12:05:03Z
20374,20388,Add checkfile for ScalaCheck,"[test_scala2_library_tasty]  Closes #20374 ",closed,tests/init-global/warn/ScalaCheck.check; tests/init-global/warn/ScalaCheck.scala,hamzaremmal,2024-05-11T17:21:06Z,2024-05-11T21:12:57Z
20372,20403,Fix #20372: Check pattern match exhaustivity in inlined code,"Fixes #20372  c0e93f1a57 previously disabled warnings for pattern matches in Inlined code  as things like: ```scala inline def count(inline x: Boolean) = x match     case true => 1     case false => 0 count(true) // inlined to true match {case true => 1; case false => 0 } ``` would throw warnings about unreachable cases  which could have been confusing to the users. However  in those cases it should be enough to disallow checks for unreachable cases specifically  and leave exhaustivity checks intact.",closed,compiler/src/dotty/tools/dotc/transform/PatternMatcher.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/warn/i20372.check; tests/warn/i20372.scala,jchyb,2024-05-14T10:32:59Z,2024-05-20T16:49:21Z
20372,21115,"Backport ""Fix #20372: Check pattern match exhaustivity in inlined code"" to LTS",Backports #20403 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/PatternMatcher.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/warn/i20372.check; tests/warn/i20372.scala,WojciechMazur,2024-07-08T10:29:28Z,2024-07-08T17:04:43Z
20362,20363,Fix dotty CI ,Closes #20362 ,closed,tests/neg/i20317.scala,hamzaremmal,2024-05-08T08:28:38Z,2024-05-08T10:27:12Z
20349,22240,Make Ref.apply() return trees usable in the largest scope possible,"Previously for symbols contained in objects (prefixed by  let's say  'pre')  we would return: * an Ident if `pre` contained only static object and packages; * `Select(This(moduleClassSymbol)  sym)` if `pre` contained a class.      However  this meant that in the second case  the generated tree would require the macro to be expanded inside of the object  even though it should be enough to just expand inside of the innermost class. This was unexpected and confusing  so it was changed to not return innermost module classes wrapped with This().  Fixes #20349   ",closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/pos-macros/i20349a/Macro_1.scala; tests/pos-macros/i20349a/Test_2.scala; tests/pos-macros/i20349b/Macro_1.scala; tests/pos-macros/i20349b/Test_2.scala,jchyb,2024-12-18T14:39:25Z,2025-03-09T19:52:31Z
20344,20368,Bring back ambiguity filter when we report an implicit not found error,"This reverts one part of #20261. When we fail with both an ambiguity on one implicit argument and another error on another argument we prefer the other error. I added a comment why this is needed.  Fixes #20344",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20344.scala,odersky,2024-05-08T17:49:14Z,2024-05-08T22:47:05Z
20344,21103,"Backport ""Bring back ambiguity filter when we report an implicit not found error"" to LTS",Backports #20368 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20344.scala,WojciechMazur,2024-07-06T14:54:48Z,2024-07-06T21:54:52Z
20342,20371,Reinstantiate restriction to transparent inline methods,"Reverts parts of #19922.  Fixes #20342  Fixes #20297  The logic that we should ignore declared result types of inline methods really only applies to transparent inlines.",closed,community-build/community-projects/munit; community-build/community-projects/specs2; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i18123.check; tests/neg/i18123.scala; tests/pos/i18123.scala; tests/pos/i19415.scala; tests/pos/i19479.scala; tests/pos/i20297.scala; tests/pos/i20342.scala,odersky,2024-05-09T12:22:01Z,2024-06-12T14:05:26Z
20338,20444,Fix error message on setter with wrong type,"Fixes #20338 Poke @mbovel @nicolasstucki @hamzaremmal @AnotherMedo",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i20338a.check; tests/neg/i20338a.scala; tests/neg/i20338b.check; tests/neg/i20338b.scala; tests/neg/i20338c.check; tests/neg/i20338c.scala,iusildra,2024-05-21T16:29:04Z,2024-05-23T14:03:57Z
20306,20319,remove non-deterministic cancellation of async TASTy in sbt-test,"how-i-fixed-it:  Originally these tests were written before we implemented async TASTy writing. This meant that we blocked the main thread at the end of `ExtractAPI` until TASTy was written. This meant that `-Ystop-after:firstTransform` would prevent the compiler reaching the backend  but stop after we knew that TASTy was written to `a-early.jar`  Originally we did this to explicitly communicate that TASTy comes from `a-early.jar`  rather than `genBCode` output. In reality  it doesn't assert anything stronger than a comment would  because we manually fix the classpath to only be `a-early.jar`.  After we added async TASTy writing  this test became non-deterministic  because we cancel async TASTy writing at the end of a run without synchronizing. So it's possible TASTy isn't written by the time we cancel after `firstTransform`.  So instead  we remove `-Ystop-after`  guaranteeing that `a/compile` does not finish until we synchronize async TASTy in `genBCode`.  fixes #20306 fixes #20278",closed,sbt-test/pipelining/Yearly-tasty-output-inline/build.sbt; sbt-test/pipelining/Yearly-tasty-output/build.sbt,bishabosha,2024-05-02T09:30:47Z,2024-05-02T10:55:52Z
20300,20313,Fix outerSelect in Inliner,Fixes #20300,closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i20300.scala,odersky,2024-05-01T16:12:13Z,2024-05-06T10:44:34Z
20300,21094,"Backport ""Fix outerSelect in Inliner"" to LTS",Backports #20313 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i20300.scala,WojciechMazur,2024-07-06T14:39:06Z,2024-07-06T21:54:03Z
20297,20371,Reinstantiate restriction to transparent inline methods,"Reverts parts of #19922.  Fixes #20342  Fixes #20297  The logic that we should ignore declared result types of inline methods really only applies to transparent inlines.",closed,community-build/community-projects/munit; community-build/community-projects/specs2; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i18123.check; tests/neg/i18123.scala; tests/pos/i18123.scala; tests/pos/i19415.scala; tests/pos/i19479.scala; tests/pos/i20297.scala; tests/pos/i20342.scala,odersky,2024-05-09T12:22:01Z,2024-06-12T14:05:26Z
20296,20815,Mark genSJSIR as *disabled* (rather than non-*runnable*) when no `-scalajs`.,This works around the issue seen in #20296. However  the issue resurfaces if we actually run `-Ycheck:all` in a Scala.js-enabled build.,closed,compiler/src/dotty/tools/backend/sjs/GenSJSIR.scala; sbt-bridge/test/xsbt/CompileProgressSpecification.scala; tests/pos/i20296.scala,sjrd,2024-06-26T11:56:21Z,2024-06-28T09:12:41Z
20296,21150,"Backport ""Mark genSJSIR as *disabled* (rather than non-*runnable*) when no `-scalajs`."" to LTS",Backports #20815 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/backend/sjs/GenSJSIR.scala; sbt-bridge/test/xsbt/CompileProgressSpecification.scala; tests/pos/i20296.scala,WojciechMazur,2024-07-10T07:05:03Z,2024-07-10T14:24:15Z
20288,20857,Add regression test for #20288 fixed in #20527,Close #20288,closed,tests/pos/i20288.scala,EugeneFlesselle,2024-06-28T13:34:21Z,2024-07-01T08:36:49Z
20288,21132,"Backport ""Add regression test for #20288 fixed in #20527"" to LTS",Backports #20857 to the LTS branch.  PR submitted by the release tooling.,closed,tests/pos/i20288.scala; tests/warn/i16723.check; tests/warn/i16723a.check,WojciechMazur,2024-07-08T19:32:29Z,2024-07-09T16:55:47Z
20287,20293,Fix #20287: Add flexible types to Quotes library,"Fix #20287  To fix the missing case  we have to add flexible types to `Quotes` library.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; compiler/src/scala/quoted/runtime/impl/printers/Extractors.scala; compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; docs/_docs/internals/type-system.md; library/src/scala/quoted/Quotes.scala; project/MiMaFilters.scala; tests/explicit-nulls/run/tasty-flexible-type.check; tests/explicit-nulls/run/tasty-flexible-type/quoted_1.scala; tests/explicit-nulls/run/tasty-flexible-type/quoted_2.scala,noti0na1,2024-04-29T15:38:38Z,2024-05-06T15:39:39Z
20286,20295,Avoid conversion of `Unit` type into `()` term,Fixes #20286,closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; tests/pos-macros/i20286/Macro_1.scala; tests/pos-macros/i20286/Test_2.scala,nicolasstucki,2024-04-30T06:15:38Z,2024-04-30T08:24:04Z
20286,21044,"Backport ""Avoid conversion of `Unit` type into `()` term"" to LTS",Backports #20295 to the LTS branch.  PR submitted by the release tooling.,closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; tests/pos-macros/i20286/Macro_1.scala; tests/pos-macros/i20286/Test_2.scala,WojciechMazur,2024-07-05T11:53:44Z,2024-07-05T13:31:08Z
20284,20400,Don't re-balance AndTypes arising from supertypes,"#20284 started breaking since we now balance AndTypes to avoid performance drops. But (re-)balancing an AndType interferes with the logic that determines which symbol is referred by a super select. This is fixed by two changes:   - Form types of super with `AndType` instead of `&`  - Don't simplify types of super since that would rebalance the underlying AndTypes.  Fixes #20284",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; tests/run/i20284.check; tests/run/i20284.scala,odersky,2024-05-13T19:25:22Z,2024-05-26T09:34:13Z
20284,21124,"Backport ""Don't re-balance AndTypes arising from supertypes"" to LTS",Backports #20400 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; tests/run/i20284.check; tests/run/i20284.scala,WojciechMazur,2024-07-08T17:17:58Z,2024-07-09T16:54:43Z
20278,20319,remove non-deterministic cancellation of async TASTy in sbt-test,"how-i-fixed-it:  Originally these tests were written before we implemented async TASTy writing. This meant that we blocked the main thread at the end of `ExtractAPI` until TASTy was written. This meant that `-Ystop-after:firstTransform` would prevent the compiler reaching the backend  but stop after we knew that TASTy was written to `a-early.jar`  Originally we did this to explicitly communicate that TASTy comes from `a-early.jar`  rather than `genBCode` output. In reality  it doesn't assert anything stronger than a comment would  because we manually fix the classpath to only be `a-early.jar`.  After we added async TASTy writing  this test became non-deterministic  because we cancel async TASTy writing at the end of a run without synchronizing. So it's possible TASTy isn't written by the time we cancel after `firstTransform`.  So instead  we remove `-Ystop-after`  guaranteeing that `a/compile` does not finish until we synchronize async TASTy in `genBCode`.  fixes #20306 fixes #20278",closed,sbt-test/pipelining/Yearly-tasty-output-inline/build.sbt; sbt-test/pipelining/Yearly-tasty-output/build.sbt,bishabosha,2024-05-02T09:30:47Z,2024-05-02T10:55:52Z
20271,21702,Fix #20271: Bring for comprehension spec up to date.,"Since Scala 3.4  a `withFilter` is generated if and only if the generator has the `case` modifier.  If it does not  the pattern must be irrefutable.  ---  Rendered version of the changed section: ![image](https://github.com/user-attachments/assets/5db643ba-35a6-429c-a9b9-a95c363f8e89) ",closed,docs/_spec/06-expressions.md,sjrd,2024-10-04T15:29:01Z,2024-11-04T14:30:57Z
20271,21900,"Backport ""Fix #20271: Bring for comprehension spec up to date."" to 3.6.2",Backports #21702 to the 3.6.2 branch.  PR submitted by the release tooling. [skip ci],closed,docs/_spec/06-expressions.md,WojciechMazur,2024-11-06T17:42:16Z,2024-11-08T12:00:41Z
20267,20506,fix issue #20267 with regression test,"As mentioned in #20267  the new desugaring from https://github.com/scala/scala3/pull/20497 seems to fix the issue  fixes #20267",closed,tests/run/named-tuples.scala,bishabosha,2024-05-31T13:53:27Z,2024-06-02T18:23:06Z
20265,21520,Handle NoType in TypeComparer.disjointnessBoundary,"Closes #20265  Note that the example in that issue already does not compile on 3.5.0 (and 3.4.3)  failing with a reasonable error message. However  opting in to ignoring the issue with `-source:3.3` does cause a crash.  ``` Compiling project (Scala 3.5.0  JVM (17)) [error] ./Main.scala:8:27 [error] The match type contains an illegal case: [error]     case k1 + k2 --> v => Hinze[k1 --> v] * Hinze[k2 --> v] [error] (this error can be ignored for now with `-source:3.3`) [error] ./Main.scala:22:96 [error] Cannot prove that (String --> Unit) * (String --> Unit) =:= Hinze[String + String --> Unit]. [error]   println(summon[((String --> Unit) * (String --> Unit)) =:= Hinze[(String + String) --> Unit]]) [error]                                                                                                ^ [error] ./Main.scala:23:67 [error] Cannot prove that String =:= Hinze[Fix[[X] =>> String + String * X + X * X] --> Unit]. [error]   println(summon[String =:= Hinze[Fix[Lambda[String]#L] --> Unit]]) [error]  ```",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg/i20265-1.check; tests/neg/i20265-1.scala; tests/neg/i20265.check; tests/neg/i20265.scala,wjoel,2024-08-30T14:06:46Z,2025-01-29T10:22:11Z
20245,20251,Better error diagnostics under -explain-cyclic,"Also report type-checked right hand sides and export expansions.  Streamline trace-handling code using inline functions.  Fixes #20245",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg-macros/i14772.check; tests/neg-macros/i16582.check; tests/neg/cyclic.check; tests/neg/i20245.check; tests/neg/i20245/Context_1.scala; tests/neg/i20245/Messages_1.scala; tests/neg/i20245/Tree_1.scala; tests/neg/i20245/Typer_1.scala; tests/neg/i20245/Typer_2.scala; tests/neg/i20245/Unification_1.scala,odersky,2024-04-23T17:43:17Z,2024-04-26T09:35:52Z
20245,21083,"Backport ""Better error diagnostics under -explain-cyclic"" to LTS",Backports #20251 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg-macros/i14772.check; tests/neg-macros/i16582.check; tests/neg/cyclic.check; tests/neg/i11994.check; tests/neg/i20245.check; tests/neg/i20245/Context_1.scala; tests/neg/i20245/Messages_1.scala; tests/neg/i20245/Tree_1.scala; tests/neg/i20245/Typer_1.scala; tests/neg/i20245/Typer_2.scala; tests/neg/i20245/Unification_1.scala,WojciechMazur,2024-07-06T11:45:51Z,2024-07-06T14:02:40Z
20237,20241,Make inline proxy vals have inferred types,Fixes #20237 since it erases illegal capture sets containing skolem types.,closed,compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i20237.scala,odersky,2024-04-20T15:41:34Z,2024-04-22T06:33:59Z
20231,20232,Allow @retains arguments to be context functions,"Suppress the creation of apply method selections for these arguments  Fixes #20231",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; library/src/scala/annotation/retains.scala; library/src/scala/annotation/retainsByName.scala; tests/pos-custom-args/captures/i20231.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala,odersky,2024-04-18T17:40:31Z,2024-04-18T22:35:28Z
20224,20221,Fix the visibility check in `markFree`,"Fixes #20169. Fixes #20224.  It turns out that the type argument in #20169 is properly boxed. It is just that when doing box adaptation  when charging `cap` into environments it gets discarded by the visibility check.  Right now  a symbol is considered visible in an environment only when the owner of the environment is contained in the symbol. This is not right: when there is not containment relation between the symbol and the environment owner the symbol is also visible from the environment  which is the case here for `cap`.",closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; tests/neg-custom-args/captures/i16725.scala; tests/neg-custom-args/captures/i20169.scala,Linyxus,2024-04-18T13:01:18Z,2024-04-26T10:45:42Z
20217,21584,Simple performance improvement for Denotations,"A simple performance improvement extracted from #21278  This PR: * ~~caches `signature` in `SingleDenotation` for `matchDegree`;~~ * reduces `denot` calls in `widen`s.  This is a simpler approach which can reduce the compilation time of #20217 from 60s to about ~~20s~~ 40s.  I revert the signature cache to keep this PR simple  because I don't understand why it works.",closed,compiler/src/dotty/tools/dotc/core/Types.scala,noti0na1,2024-09-13T10:30:24Z,2024-09-18T20:45:43Z
20211,20220,Fix #20211,"I'm not sure yet if this is the best was to fix it as it is in contradiction with #20188   /cc @nicolasstucki  ",closed,compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; tests/neg-macros/i19842-a.check; tests/neg-macros/i19842-b.check,hamzaremmal,2024-04-18T12:00:40Z,2024-04-18T22:36:16Z
20211,21079,"Backport ""Fix #20211"" to LTS",Backports #20220 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/TreeChecker.scala,WojciechMazur,2024-07-06T10:17:38Z,2024-07-06T14:02:15Z
20206,20210,Fix #20206,Fixes #20206,closed,compiler/src/dotty/tools/dotc/transform/ContextFunctionResults.scala; tests/pos/i20206.scala,hamzaremmal,2024-04-17T14:45:56Z,2024-04-17T17:02:30Z
20187,20207,Use `MirrorSource.reduce` result for `companionPath`,Fixes #20187,closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/pos/i20187/A_1.scala; tests/pos/i20187/B_2.scala,EugeneFlesselle,2024-04-16T23:25:34Z,2024-04-17T07:59:32Z
20187,21074,"Backport ""Use `MirrorSource.reduce` result for `companionPath`"" to LTS",Backports #20207 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/pos/i20187/A_1.scala; tests/pos/i20187/B_2.scala,WojciechMazur,2024-07-06T09:56:55Z,2024-07-06T14:01:12Z
20184,20190,Fix handling of AppliedType aliases in outerPrefix,"Fixes #20184  The overlooked case was an AppliedType where we don't dealias correctly (i.e. at phase at most erasure).",closed,compiler/src/dotty/tools/dotc/transform/ExplicitOuter.scala; tests/pos/i20184.scala,odersky,2024-04-15T13:36:37Z,2024-04-25T17:44:40Z
20176,20181,Discard poly-functions when trying to resolve overloading,"Discard poly-functions when trying to resolve overloading using subsequent parameter lists. Polyfunctions don't have a symbol  so the logic of remapping arguments does not work for them.  Fixes #20176 ",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i20176.scala,odersky,2024-04-14T11:38:57Z,2024-04-17T15:34:11Z
20169,20221,Fix the visibility check in `markFree`,"Fixes #20169. Fixes #20224.  It turns out that the type argument in #20169 is properly boxed. It is just that when doing box adaptation  when charging `cap` into environments it gets discarded by the visibility check.  Right now  a symbol is considered visible in an environment only when the owner of the environment is contained in the symbol. This is not right: when there is not containment relation between the symbol and the environment owner the symbol is also visible from the environment  which is the case here for `cap`.",closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; tests/neg-custom-args/captures/i16725.scala; tests/neg-custom-args/captures/i20169.scala,Linyxus,2024-04-18T13:01:18Z,2024-04-26T10:45:42Z
20166,20168,tryCompiletimeConstantFold in disjointnessBoundary,"Fixes #20166  Alternatively placing the tryCompiletimeConstantFold in `AppliedType#superType` also seems to fix the issue and not break anything. But I'm not very sure about the spec here either way.   @sjrd ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i20166.scala,EugeneFlesselle,2024-04-11T21:23:14Z,2024-05-29T15:03:07Z
20154,20160,Avoid the TypeVar.inst trap,"`tvar.inst` gives the _permanent_ instance of a type variable `tvar`. Even if `tvar.isInstantiated` is true its `inst` can still be NoType. This is a trap that caused a regression in the code of glb. This commit fixes the regression and introduces different names that will hopefully avoid the trap in the future.  Fixes #20154",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TyperState.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20154.scala,odersky,2024-04-11T10:32:25Z,2024-04-11T14:57:26Z
20154,21139,"Backport ""Avoid the TypeVar.inst trap"" to LTS",Backports #20160 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TyperState.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20154.scala,WojciechMazur,2024-07-09T21:01:23Z,2024-07-10T14:23:16Z
20146,20163,Fix #20146: attach the original name if there is an import selection for an indent,"Fix #20146  Attach the original name to the tree if there is an imported term selection for an indent.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/warn/i20146.scala,noti0na1,2024-04-11T15:23:38Z,2024-05-06T11:49:11Z
20146,21095,"Backport ""Fix #20146: attach the original name if there is an import selection for an indent"" to LTS",Backports #20163 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/warn/i20146.scala,WojciechMazur,2024-07-06T14:40:32Z,2024-07-06T21:54:09Z
20145,20652,#20145 - bugfix when a return tailrec is called inside a val def.,"Fixes #20145.  Apologies about the previous PR - I thought I remembered this fix from when I coded it as a part of a prior pr - but I had in fact forgotten.  This one at least passes tests locally.",closed,compiler/src/dotty/tools/dotc/transform/TailRec.scala; tests/run/i20145.check; tests/run/i20145.scala,LucySMartin,2024-06-20T07:56:32Z,2024-06-20T12:57:22Z
20136,20147,Do not flag match types as `Deferred` and amend #20077,"Match types are already not flagged as `Deferred` when unpickled. This caused varying results for `ImplicitRunInfo#isAnchor`  by not reaching the `isMatchAlias` condition when created from the Namer.  Ensures both #20071 and #20136 each have the same result  when compiled with a classpath dependency as when merged into a single file.  Fixes #20136",closed,compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i20071a.scala; tests/neg/i20071b/A_1.scala; tests/neg/i20071b/B_2.scala; tests/pos/i20136a.scala; tests/pos/i20136b/A_1.scala; tests/pos/i20136b/B_2.scala,EugeneFlesselle,2024-04-10T09:12:18Z,2024-04-10T11:00:59Z
20135,20155,Make parameter types of context functions inferred type trees,"  A non-sensical capture reference appeared in the type of a synthesized context function literal. We do clean out @retains annotations that can contain such references  but only for inferred type trees. The problem was that context function parameters were treated like explicitly given types before.  Fixes #20135",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i20135.scala,odersky,2024-04-10T16:44:39Z,2024-04-11T14:58:52Z
20134,20817,"Backport ""Don't explain erroneous bounds"" to LTS","Backports #19338 to the LTS branch. Fixes #20134  PR submitted by the release tooling. [skip ci]",closed,compiler/src/dotty/tools/dotc/reporting/Message.scala; tests/neg/i19334.check; tests/neg/i19334.scala,WojciechMazur,2024-06-26T16:08:53Z,2024-06-28T10:04:06Z
20127,20140,Add annotations in parameters for exports,Closes #20127 ,closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i20127.check; tests/neg/i20127.scala,hamzaremmal,2024-04-09T16:22:23Z,2024-04-09T21:14:43Z
20120,20399,Retry `constraint.replace` after `constraint.updateEntry`,"Checking `isSub` on the resulting bounds can have introduced new constraints  which might allow us to replace the type parameter entirely.  Fix #20120 Close #20208 the original implementation",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala,EugeneFlesselle,2024-05-13T17:54:14Z,2024-05-16T21:19:00Z
20120,21111,"Backport ""Retry `constraint.replace` after `constraint.updateEntry`"" to LTS",Backports #20399 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala,WojciechMazur,2024-07-08T10:22:41Z,2024-07-08T17:03:47Z
20119,20139,Detect macro dependencies that are missing from the classloader,"So the situation is basically that `DFiant` and `html.scala` projects do not work ""out of the box"" with pipelining  and will need to tune their builds if they want some pipelining.  However  the compiler reports an error that is not helpful to the user  so in this PR we report a better one.  Previously  it was assumed that a missing class (that is valid in current run) during macro evaluation was due to the symbol being defined in the same project. If this condition is met  then compilation is suspended.  This assumption breaks when the symbol comes from the classpath  but without a corresponding class file  leading a situation where the same file is always suspended  until it is the only one left  leading to the ""cyclic macro dependencies"" error. In this case we should assume that the class file will never become available because class path entries are supposed to be immutable. Therefore we should not suspend in this case.  This commit therefore detects this situation. Instead of suspending the unit  the compiler aborts the macro expansion  reporting an error that the user will have to deal with - likely by changing the build definition/  In the end  users will see something like: ```scala [error] -- Error: /Users/jamie/workspace/DFiant/core/src/main/scala/dfhdl/core/DFVector.scala:163:25 [error] 163 |            val idxVal = d""$i"".asConstOf[DFUInt[Int]] [error]     |                         ^^^^^ [error]     |Macro code depends on trait DFType in package dfhdl.compiler.ir found on the classpath  but could not be loaded while evaluating the macro. [error]     |  This is likely because class files could not be found in the classpath entry for the symbol. [error]     | [error]     |  A possible cause is if the origin of this symbol was built with pipelined compilation; [error]     |  in which case  this problem may go away by disabling pipelining for that origin. [error]     | [error]     |  trait DFType is defined in file /Users/jamie/workspace/DFiant/compiler/ir/target/scala-3.5.0-RC1-bin-SNAPSHOT/early/dfhdl-compiler-ir_3-0.3.7+15-05c25215+20240409-1626-SNAPSHOT.jar(dfhdl/compiler/ir/DFType.tasty) [error]     |--------------------------------------------------------------------------- [error]     |Inline stack trace [error]     |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [error]     |This location contains code that was inlined from DFDecimal.scala:411 [error] 411 |          ${ applyMacro('sc  'args) } [error]     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [error]      --------------------------------------------------------------------------- ```  and ```scala [error] -- Error: /Users/jamie/workspace/html.scala/html/target/scala-3.5.0-RC1-bin-SNAPSHOT/src_managed/test/sbt-example-generated.scala:15:52 [error]  15 |        val span: Binding.Stable[HTMLSpanElement] = html""<span>The quick ${color.bind} fox jumps&nbsp;over the lazy $animal</span>"" [error]     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [error]     |Macro code depends on missing object Definitions in package com.yang_bo.html found on the classpath  but could not be loaded while evaluating the macro. [error]     |  This is likely because class files could not be found in the classpath entry for the symbol. [error]     | [error]     |  A possible cause is if the origin of this symbol was built with pipelined compilation; [error]     |  in which case  this problem may go away by disabling pipelining for that origin. [error]     | [error]     |object Definitions is defined in file /Users/jamie/workspace/html.scala/html-Definitions/target/scala-3.5.0-RC1-bin-SNAPSHOT/early/html-definitions_sjs1_3-3.0.3+0-d627afe0+20240409-1532.jar(com/yang_bo/html/Definitions.tasty) [error]     |--------------------------------------------------------------------------- [error]     |Inline stack trace [error]     |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - [error]     |This location contains code that was inlined from package.scala:712 [error] 712 |      ${ [error]     |      ^ [error] 713 |        Macros.html('stringContext  'args) [error] 714 |      } [error]      --------------------------------------------------------------------------- ```  which is more actionable.  Note that sbt already automatically disables pipelining on projects that define macros  but this is not useful if the macro itself depends on upstream projects that do not define macros. This is probably a hard problem to detect automatically - so this is good compromise.  We also fix `-Xprint-suspension`  which appeared to swallow a lot of diagnostic information. Also make `-Yno-suspended-units` behave better.  fixes #20119",closed,compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/Driver.scala; compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; sbt-test/pipelining/pipelining-scala-macro-splice-ok/build.sbt; sbt-test/pipelining/pipelining-scala-macro-splice-ok/m/src/main/scala/a/A.scala; sbt-test/pipelining/pipelining-scala-macro-splice-ok/m/src/main/scala/b/B.scala; sbt-test/pipelining/pipelining-scala-macro-splice-ok/m/src/main/scala/c/C.scala; sbt-test/pipelining/pipelining-scala-macro-splice-ok/project/DottyInjectedPlugin.scala; sbt-test/pipelining/pipelining-scala-macro-splice-ok/test; sbt-test/pipelining/pipelining-scala-macro-splice/a/src/main/scala/a/A.scala; sbt-test/pipelining/pipelining-scala-macro-splice/a_alt/.keep; sbt-test/pipelining/pipelining-scala-macro-splice/build.sbt; sbt-test/pipelining/pipelining-scala-macro-splice/m/src/main/scala/b/B.scala; sbt-test/pipelining/pipelining-scala-macro-splice/m/src/main/scala/c/C.scala; sbt-test/pipelining/pipelining-scala-macro-splice/m_alt/.keep; sbt-test/pipelining/pipelining-scala-macro-splice/project/DottyInjectedPlugin.scala; sbt-test/pipelining/pipelining-scala-macro-splice/test,bishabosha,2024-04-09T15:05:05Z,2024-04-10T10:33:47Z
20118,21925,Scaladoc tool: render `@deprecated` correctly even when named arguments weren't used,"Fixes #20118  Still need a test case for this issue using jsoup",closed,scaladoc-testcases/src/tests/deprecated.scala; scaladoc/src/dotty/tools/scaladoc/renderers/MemberRenderer.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,HarrisL2,2024-11-11T17:48:19Z,2025-03-10T10:19:15Z
20107,20108,Type desugared `transparent inline def unapply` call in the correct mode,"This regressed in 5648f12fb136886da4e1f00695627cbfde90ee9e.  Fixes #20107.",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i20107.scala,smarter,2024-04-05T16:27:08Z,2024-04-09T07:30:00Z
20107,21049,"Backport ""Type desugared `transparent inline def unapply` call in the correct mode"" to LTS",Backports #20108 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i20107.scala,WojciechMazur,2024-07-05T15:46:13Z,2024-07-05T21:29:13Z
20105,20143,Preventing compilation of a @tailrec method when it does not rewrite  but an inner method does,"Adding warnings if there is an annotated def at the top level that is referenced from an inner def  Fixes #20105 ",closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/transform/TailRec.scala; tests/neg/i20105.check; tests/neg/i20105.scala; tests/neg/i5397.scala; tests/warn/i20105.check; tests/warn/i20105.scala,LucySMartin,2024-04-09T17:47:29Z,2024-06-19T12:55:30Z
20098,20351,Bundle scala cli in scala command,"fixes #20098  Proposed changes to zip/targz archive: - in the `/bin` directory store an extra launcher for Scala CLI (either JAR  or native per platform). - `/bin/scala[.bat]` is modified to invoke Scala CLI stored in `/bin` - new `/maven2` directory  which stores all the Jars and POM files necessary (in maven repo style) for scala-cli to invoke scala compiler offline (using the `-r` launcher option). - CHOICE: either replace jar files in `/lib` by aliases to the corresponding jar in `/maven2`  OR delete `/lib` and update references from scripts. (Looks like symlinks are not portable  so probably we should encode the classpath in a file  or adjust slightly how we build the toolchain) - add platform specific suffixes to artefacts:   - e.g. `scala-3.5.0-x86_64-pc-linux.tar.gz` (for the artefact that bundles the x64 linux launcher)",closed,.github/workflows/ci.yaml; .github/workflows/launchers.yml; bin/common; bin/common-platform; bin/scala; bin/scalac; bin/scaladoc; bin/test/TestScripts.scala; build.sbt; compiler/src/dotty/tools/MainGenericRunner.scala; compiler/test-coursier/dotty/tools/coursier/CoursierScalaTests.scala; compiler/test-resources/scripting/argfileClasspath.sc; compiler/test-resources/scripting/classpathReport_scalacli.sc; compiler/test-resources/scripting/cpArgumentsFile.txt; compiler/test-resources/scripting/envtest.sc; compiler/test-resources/scripting/envtest_scalacli.sc; compiler/test-resources/scripting/hashBang.sc; compiler/test-resources/scripting/hashBang.scala; compiler/test-resources/scripting/scriptName.scala; compiler/test-resources/scripting/scriptPath.sc; compiler/test-resources/scripting/scriptPath_scalacli.sc; compiler/test-resources/scripting/showArgs.sc; compiler/test-resources/scripting/showArgs_scalacli.sc; compiler/test-resources/scripting/sqlDateError.sc; compiler/test-resources/scripting/sqlDateError_scalacli.sc; compiler/test-resources/scripting/touchFile.sc; compiler/test-resources/scripting/unglobClasspath.sc; compiler/test-resources/scripting/unglobClasspath_scalacli.sc; compiler/test/dotty/tools/io/ClasspathTest.scala; compiler/test/dotty/tools/scripting/BashExitCodeTests.scala,bishabosha,2024-05-07T10:00:06Z,2024-06-11T09:42:43Z
20098,20706,"Backport ""Bundle scala cli in scala command"" to 3.5.0",Backports #20351 to 3.5.0-RC2,closed,.github/workflows/ci.yaml; .github/workflows/launchers.yml; bin/common; bin/common-platform; bin/scala; bin/scalac; bin/scaladoc; build.sbt; compiler/src/dotty/tools/MainGenericRunner.scala; compiler/test-resources/scripting/argfileClasspath.sc; compiler/test-resources/scripting/classpathReport_scalacli.sc; compiler/test-resources/scripting/cpArgumentsFile.txt; compiler/test-resources/scripting/envtest.sc; compiler/test-resources/scripting/envtest_scalacli.sc; compiler/test-resources/scripting/hashBang.sc; compiler/test-resources/scripting/hashBang.scala; compiler/test-resources/scripting/scriptName.scala; compiler/test-resources/scripting/scriptPath.sc; compiler/test-resources/scripting/scriptPath_scalacli.sc; compiler/test-resources/scripting/showArgs.sc; compiler/test-resources/scripting/showArgs_scalacli.sc; compiler/test-resources/scripting/sqlDateError.sc; compiler/test-resources/scripting/sqlDateError_scalacli.sc; compiler/test-resources/scripting/touchFile.sc; compiler/test-resources/scripting/unglobClasspath.sc; compiler/test-resources/scripting/unglobClasspath_scalacli.sc; compiler/test/dotty/tools/io/ClasspathTest.scala; compiler/test/dotty/tools/scripting/BashExitCodeTests.scala; compiler/test/dotty/tools/scripting/BashScriptsTests.scala; compiler/test/dotty/tools/scripting/ClasspathTests.scala,WojciechMazur,2024-06-20T14:32:24Z,2024-06-21T06:13:26Z
20095,20096,Fix by-name parameter in beta-reduction,Fixes #20095,closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; tests/run/i20095.check; tests/run/i20095.scala,nicolasstucki,2024-04-05T07:47:50Z,2024-04-05T13:52:59Z
20095,21037,"Backport ""Fix by-name parameter in beta-reduction"" to LTS",Backports #20096 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; tests/run/i20095.check; tests/run/i20095.scala,WojciechMazur,2024-07-05T10:29:19Z,2024-07-05T13:26:01Z
20088,20256,Fix default args lookup for given classes,Fixes #20088.,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/20088.scala; tests/pos/20088b.scala,mbovel,2024-04-24T16:50:14Z,2024-04-26T10:27:49Z
20083,20247,Enhance help message for language flag,"Partial fix #20083  Enhance help message for language flag by displaying all available choises  ``` > scalac -language:help -language  Enable one or more language features.            Choices :             - help :                 Display all available features              - noAutoTupling :                 Disable automatic tupling              - dynamics :                 Allow direct or indirect subclasses of scala.Dynamic              - unsafeNulls :                 Enable unsafe nulls for explicit nulls              - postfixOps :                 Allow postfix operators (not recommended)              - strictEquality :                 Enable strict equality (disable canEqualAny)              - implicitConversions :                 Allow implicit conversions without warnings              - adhocExtensions :                 Allow ad-hoc extension methods              - experimental.namedTypeArguments :                 Allow named type arguments              - experimental.genericNumberLiterals :                 Allow generic number literals              - experimental.macros :                 Allow Scala 2 macros              - experimental.dependent :                 Allow dependent method types              - experimental.erasedDefinitions :                 Allow erased definitions              - deprecated.symbolLiterals :                 Allow symbol literals              - experimental.fewerBraces :                 Enable support for using indentation for arguments              - experimental.saferExceptions :                 Enable safer exceptions              - experimental.clauseInterleaving :                 Enable clause interleaving              - experimental.pureFunctions :                 Enable pure functions for capture checking              - experimental.captureChecking :                 Enable experimental capture checking              - experimental.into :                 Allow into modifier on parameter types  ```",closed,community-build/community-projects/Monocle; community-build/community-projects/akka; community-build/community-projects/endpoints4s; community-build/community-projects/izumi-reflect; community-build/community-projects/parboiled2; community-build/community-projects/scala-collection-compat; community-build/community-projects/scala-xml; community-build/community-projects/scalaz; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/CompilerCommand.scala; compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/ScalaSettingsProperties.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/test/dotty/tools/DottyTest.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala,noti0na1,2024-04-22T13:57:19Z,2024-05-14T17:52:14Z
20080,20092,Allow SAM types to contain match alias refinements,Fixes #20080,closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i20080.scala,EugeneFlesselle,2024-04-04T23:13:19Z,2024-04-05T14:04:45Z
20080,21554,"Backport ""Allow SAM types to contain match alias refinements"" to 3.3.4","Backports #20092 to Scala 3.3.4-RC2 LTS on top of #21553. Fixes regression introduced in 3.3.1   No new Open Community Build regressions were detected for this changes",closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; tests/pos/i20080.scala; tests/run/i18315.scala,WojciechMazur,2024-09-06T11:26:48Z,2024-09-06T14:11:22Z
20079,20195,Fix isAliasType,"Symbols that had the TypeParam flag set were classified as alias types unless they also had the Deferred flag set. Maybe this did not break that much since Namer always added the Deferred for type parameters. But export forwarders use synthesized parameters which did not have Deferred set.  Fixes #20079   ",closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/neg/i20079/Lib_1.scala; tests/neg/i20079/Test_2.scala,odersky,2024-04-15T18:48:40Z,2024-04-24T14:14:11Z
20078,20116,Don't dealias when deciding which arguments to defer,"Don't dealias when deciding which arguments to defer for subtype checking  Fixes #20078",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i20078/AbstractShapeBuilder.java; tests/pos/i20078/Shape.java; tests/pos/i20078/Test.scala; tests/pos/i20078/Trait.java,odersky,2024-04-07T16:44:54Z,2024-04-08T15:28:38Z
20073,20904,Add sources of synthetic classes to sources jar,Closes #20073 ,closed,library-aux/src/scala/AnyKind.scala; library-aux/src/scala/Matchable.scala; library-aux/src/scala/andType.scala; library-aux/src/scala/orType.scala; project/Build.scala,Florian3k,2024-07-01T11:52:20Z,2024-07-12T11:06:57Z
20071,19871,Make aliases of `MatchAlias`es normal `TypeAlias`es ,"Proposes to make `isMatch` true only for `MatchType`s and higher-kinded abstraction of them.  As a result  code using `isMatch` to choose between a `TypeAlias` and `MatchAlias` will now use a `TypeAlias` when aliasing a `MatchAlias`. Which in turn allows for better de-aliasing  since `dealias` only de-aliases standard type aliases.  `tryNormalize` on `AppliedType` should only attempt reduction if there is an underlying match type. This could previously be identified by a `MatchAlias` tycon. We now need a recursive check.  Fixes #19821",closed,compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/neg-macros/i11795.scala; tests/neg/i20071.scala; tests/pos-macros/i11795.scala; tests/pos/i15183/test_2.scala; tests/pos/i19821.scala,EugeneFlesselle,2024-03-04T16:25:46Z,2024-04-08T20:52:33Z
20071,20147,Do not flag match types as `Deferred` and amend #20077,"Match types are already not flagged as `Deferred` when unpickled. This caused varying results for `ImplicitRunInfo#isAnchor`  by not reaching the `isMatchAlias` condition when created from the Namer.  Ensures both #20071 and #20136 each have the same result  when compiled with a classpath dependency as when merged into a single file.  Fixes #20136",closed,compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i20071a.scala; tests/neg/i20071b/A_1.scala; tests/neg/i20071b/B_2.scala; tests/pos/i20136a.scala; tests/pos/i20136b/A_1.scala; tests/pos/i20136b/B_2.scala,EugeneFlesselle,2024-04-10T09:12:18Z,2024-04-10T11:00:59Z
20052,22104,Do not return java outline dummy constructor in `primaryConstructor`,"Fixes #20052 Java outline parser phase for various reasons adds a dummy constructor to java classes compiling simultenously from scalac. Since they provide no information to the user and are overall misleading (with always having the same fake flags and parameters)  we filter them out and return the first constructor that can be found in the source. This is also what happened up to this point when running the macro with a java classfile on the classpath instead  since those dummy constructors cannot be found there.",closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/run-macros/i20052.check; tests/run-macros/i20052/JavaClass.java; tests/run-macros/i20052/JavaClassEmpty.java; tests/run-macros/i20052/JavaClassParam.java; tests/run-macros/i20052/JavaClassPrivate.java; tests/run-macros/i20052/JavaClassStartsWithPrivate.java; tests/run-macros/i20052/Macro.scala; tests/run-macros/i20052/Test_2.scala,jchyb,2024-12-03T18:39:30Z,2025-01-09T10:38:26Z
20016,20020,Avoid duplications of properties in pom.xml,"Inspired by how to add release notes URL : https://contributors.scala-lang.org/t/add-release-notes-urls-to-your-poms/6059  Closes #20016",closed,project/Build.scala,hamzaremmal,2024-03-26T13:07:53Z,2024-03-26T15:48:53Z
20002,20043,Extra check to avoid converting block expressions on the rhs of an in…,"…fix expression.  Tests added for: * Original cast as per the ticket should not be changed * Similar match statement that should update * Code blocks in this position  as opposed to a partial function  cant update here * Simple change that should apply but in a code position where the op stack is nonempty * Equivalent code  but passing in the partial function as a single parameter  again  not updating  Fixes #20002 ",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/rewrites/i20002.check; tests/rewrites/i20002.scala,LucySMartin,2024-03-28T10:36:19Z,2024-04-11T08:37:25Z
19999,20007,Delay hard argument comparisons,"When comparing arguments of two applied types  perform hard comparisons after easy ones. A comparison is hard if it entails a subtype test A <: B where A is an AndType or B is an OrType. Such comparisons need to perform an either  which might lose solutions.  Fixes #19999",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i19999.scala,odersky,2024-03-23T12:16:22Z,2024-03-26T14:43:12Z
19999,21020,"Backport ""Delay hard argument comparisons"" to LTS",Backports #20007 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i19999.scala,WojciechMazur,2024-07-04T14:38:59Z,2024-07-05T13:22:28Z
19998,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
19990,20005,Check `This` references in `refersToParamOf`,"fixes #19990  See the [comment](https://github.com/scala/scala3/issues/19990#issuecomment-2016273754) of that issue for an explanation of this issue.",closed,compiler/src/dotty/tools/dotc/core/Annotations.scala; tests/pos-custom-args/captures/i19990.scala,Linyxus,2024-03-23T01:27:06Z,2024-03-23T08:41:03Z
19988,19993,Add more methods in `SeqViewOps`,"fixes #19988  The issue is caused by the change of class hierarchy in Scala 2 library CC: `SeqView` no longer extends `SeqOps`. To fix this we have to copy methods from `SeqOps` to `SeqViewOps`. Similar to what is done in #19873.",closed,scala2-library-cc/src/scala/collection/Seq.scala; scala2-library-cc/src/scala/collection/SeqView.scala; tests/pos/i19988.scala,Linyxus,2024-03-20T21:27:38Z,2024-03-23T08:43:54Z
19972,20274,Add pattern completion for unapply contexts,"<!--   TODO first sign the CLA   https://www.lightbend.com/contribute/cla/scala -->  Fixes #19972.  Add pattern completion for `Unapply` tree contexts.  A typical example would be ```scala optionList match     case List(S@@) ``` which should be prompted `Some(value)`  due to `List.unapplySeq` expecting `Option[T]` patterns as arguments.  - Add unapply pattern completion test - Add pattern completion based on the Unapply argument type  <!-- TODO description of the change -->   <!-- Ideally should have a called ""Fix #XYZ: A SHORT FIX DESCRIPTION"" --> ",closed,presentation-compiler/src/main/dotty/tools/pc/completions/Completions.scala; presentation-compiler/src/main/dotty/tools/pc/completions/MatchCaseCompletions.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,natsukagami,2024-04-27T04:47:43Z,2024-05-22T10:28:28Z
19971,20201,Interactive: handle context bounds in extension construct workaround,Fixes https://github.com/scala/scala3/issues/19971,closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,rochala,2024-04-16T15:38:46Z,2024-04-17T11:11:08Z
19971,21075,"Backport ""Interactive: handle context bounds in extension construct workaround"" to LTS",Backports #20201 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,WojciechMazur,2024-07-06T09:57:13Z,2024-07-06T14:01:49Z
19969,20142,Fix active param index for empty param lists,Fixes #19969 with @mbovel @rochala ,closed,compiler/src/dotty/tools/dotc/util/Signatures.scala; presentation-compiler/test/dotty/tools/pc/base/BaseSignatureHelpSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/signaturehelp/SignatureHelpSuite.scala,iusildra,2024-04-09T17:05:40Z,2024-04-10T06:42:00Z
19969,21054,"Backport ""Fix active param index for empty param lists"" to LTS",Backports #20142 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/util/Signatures.scala; presentation-compiler/test/dotty/tools/pc/base/BaseSignatureHelpSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/signaturehelp/SignatureHelpSuite.scala,WojciechMazur,2024-07-05T16:13:08Z,2024-07-05T21:32:03Z
19968,20304,Don't show enum completions in new keyword context,"Fixes https://github.com/scala/scala3/issues/19968 Kudos to @aherlihy and @nmcb for solving this together during a spree. I hope you had fun :D",closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; language-server/test/dotty/tools/languageserver/CompletionTest.scala; presentation-compiler/src/main/dotty/tools/pc/completions/Completions.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,rochala,2024-04-30T19:55:24Z,2024-05-06T08:23:54Z
19968,21093,"Backport ""Don't show enum completions in new keyword context"" to LTS",Backports #20304 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; language-server/test/dotty/tools/languageserver/CompletionTest.scala; presentation-compiler/src/main/dotty/tools/pc/completions/Completions.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,WojciechMazur,2024-07-06T14:38:17Z,2024-07-06T21:53:57Z
19967,20333,Scaladoc: improve refined function types rendering,"Fixes #19967 Improves rendering of refined function types - unneeded parameters names are omitted when possible",closed,scaladoc-testcases/src/tests/refinedFunctionTypes.scala; scaladoc-testcases/src/tests/thisType.scala; scaladoc-testcases/src/tests/typesSignatures.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TypesSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2024-05-04T17:45:03Z,2024-05-06T14:22:05Z
19962,19966,Avoid eta-reduction of `(...  f: T => R  ...) => f.apply(..)` into `f`,Fixes #19962,closed,compiler/src/dotty/tools/dotc/transform/EtaReduce.scala; tests/pos/i19962.scala,nicolasstucki,2024-03-18T07:34:28Z,2024-03-18T13:14:31Z
19962,20996,"Backport ""Avoid eta-reduction of `(...  f: T => R  ...) => f.apply(..)` into `f`"" to LTS",Backports #19966 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/EtaReduce.scala; tests/pos/i19962.scala,WojciechMazur,2024-07-03T14:41:24Z,2024-07-04T10:00:33Z
19958,19975,Avoid repetitions in name hints,Fixes #19958,closed,compiler/src/dotty/tools/dotc/reporting/DidYouMean.scala; tests/neg/i19958.check; tests/neg/i19958.scala,odersky,2024-03-18T13:22:16Z,2024-03-19T11:05:44Z
19958,20998,"Backport ""Avoid repetitions in name hints"" to LTS",Backports #19975 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/reporting/DidYouMean.scala; tests/neg/i19958.check; tests/neg/i19958.scala,WojciechMazur,2024-07-03T14:47:57Z,2024-07-04T10:00:46Z
19955,20109,Rollback constraints if `isSameType` failed second direction,"It turns out the following assertion does not hold in the current definition of `isSameType` ```scala 3 val preConstraint = constraint val isSame = isSubType(tp1  tp2) && isSubType(tp2  tp1) isSame.ensuring(_ || constraint == preConstraint) ```  I didn't try to form a minimised snippet where this would cause a problem. But as an example  the code in https://github.com/scala/scala3/issues/19955#issuecomment-2037681171 produces invalid constraints which lead to suspicious looking `<notypes>`s in the subtyping trace.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala,EugeneFlesselle,2024-04-05T18:03:17Z,2024-04-06T10:27:38Z
19955,20175,Improve ConstraintHandling of SkolemTypes,"By retaining instantiated type vars in LevelAvoidMap when possible.  Fixes #19955  Consider pos/i19955a as an example. We try to adapt the given_IsInt_U for skolems of the form (?2 : Int) and (?7 : ?8.Out) where ?8 is an unknown value of type given_IsWrapOfInt_R[Int  Wrap[Int]]  but only the former succeeds  even though ?8.Out is trivially within the bounds of U.  The typing trace from the two implicit search results includes: ``` [log typer] ==> typedImplicit(Cand(given_IsInt_U L4)  IsInt[(?2 : Int)]  <empty>  <399..399>)? [log typer]   ==> isSubType(IsInt[U]  IsInt[(?2 : Int)])? [log typer]     ==> isSameType((?2 : Int)  U)? [log typer]       ==> isSubType((?2 : Int)  U)? [log typer]       <== isSubType((?2 : Int)  U) = true [log typer]       ==> isSubType(U  (?2 : Int))? [log typer]       <== isSubType(U  (?2 : Int)) = true [log typer]     <== isSameType((?2 : Int)  U) = true [log typer]   <== isSubType(IsInt[U]  IsInt[(?2 : Int)]) = true [log typer] <== typedImplicit(Cand(given_IsInt_U L4)  IsInt[(?2 : Int)]  <empty>  <399..399>) = SearchSuccess: (given_IsInt_U : [U <: Int]: IsInt[U]) via given_IsInt_U[(?2 : Int)] [log typer] ==> typedImplicit(Cand(given_IsInt_U L4)  IsInt[(?7 : ?8.Out)]  <empty>  <423..423>)? [log typer]   ==> isSubType(IsInt[U]  IsInt[(?7 : ?8.Out)])? [log typer]     ==> isSameType((?7 : ?8.Out)  U)? [log typer]       ==> isSubType((?7 : ?8.Out)  U)? [log typer]       <== isSubType((?7 : ?8.Out)  U) = true [log typer]       ==> isSubType(Int  (?7 : ?8.Out))? [log typer]       <== isSubType(Int  (?7 : ?8.Out)) = false [log typer]     <== isSameType((?7 : ?8.Out)  U) = false [log typer]   <== isSubType(IsInt[U]  IsInt[(?7 : ?8.Out)]) = false [log typer] <== typedImplicit(Cand(given_IsInt_U L4)  IsInt[(?7 : ?8.Out)]  <empty>  <423..423>) = Search Failure: given_IsInt_U[U] ``` The difference in the failing case from the passing case is that the type variable U has been instantiated to Int by the first direction of isSameType before attempting the second direction.  If we look closer at the ConstraintHandling: ``` [log typer]         ==> addConstraint(U  (?2 : Int)  true)? [log typer]           ==> legalBound(U  (?2 : Int)  false)? [log typer]             ==> ApproximatingTypeMap#derivedSkolemType((?2 : Int)  Int)? [log typer]             <== ApproximatingTypeMap#derivedSkolemType((?2 : Int)  Int) = (?2 : Int) [log typer]           <== legalBound(U  (?2 : Int)  false) = (?2 : Int) [log typer]           ==> isSubType((?2 : Int)  Int)? [log typer]           <== isSubType((?2 : Int)  Int) = true [log typer]         <== addConstraint(U  (?2 : Int)  true) = true [log typer]         ==> addConstraint(U  (?7 : ?8.Out)  true)? [log typer]           ==> legalBound(U  (?7 : ?8.Out)  false)? [log typer]             ==> ApproximatingTypeMap#derivedSkolemType((?8 : given_IsWrapOfInt_R[Int  Wrap[Int]])  given_IsWrapOfInt_R[Int  Wrap[Int]])? [log typer]             <== ApproximatingTypeMap#derivedSkolemType((?8 : given_IsWrapOfInt_R[Int  Wrap[Int]])  given_IsWrapOfInt_R[Int  Wrap[Int]]) = given_IsWrapOfInt_R[Int  Wrap[Int]] [log typer]             ==> ApproximatingTypeMap#derivedSkolemType((?7 : ?8.Out)  Int)? [log typer]             <== ApproximatingTypeMap#derivedSkolemType((?7 : ?8.Out)  Int) = Int [log typer]           <== legalBound(U  (?7 : ?8.Out)  false) = Int [log typer]         <== addConstraint(U  (?7 : ?8.Out)  true) = true ``` we can see that the issue lies in the approximation in the LevelAvoidMap used to obtain the legalBound.  Modifying `ApproximatingTypeMap#derivedSkolemType` from `if info eq tp.info then tp` to `if info frozen_=:= tp.info then tp.derivedSkolem(info)`  allows each direction of the subtyping checks in `isSameType` to obtain the more precise skolem as legal bound. But it does not solve the issue  since they obtain distinct skolems even if they equivalently-shaped  the constraints are still unsatisfiable.  We can instead try to make `info eq tp.info` be true. It was not the case in the above example because `given_IsWrapOfInt_R[Int  Wrap[Int]]` contained a type variable `R := Wrap[Int]` which was substituted by the map.  We can modify TypeMap to keep type variables rather than replace them by their instance when possible  i.e. when the instance is itself not transformed by the map. This solves the issue but breaks other places which assumed the stripping of type vars in TypeMaps. That problem is avoided by doing the changes in LevelAvoidMap only.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i19955a.scala; tests/pos/i19955b.scala; tests/pos/i20053b.scala,EugeneFlesselle,2024-04-12T21:35:52Z,2024-04-13T10:08:57Z
19955,20399,Retry `constraint.replace` after `constraint.updateEntry`,"Checking `isSub` on the resulting bounds can have introduced new constraints  which might allow us to replace the type parameter entirely.  Fix #20120 Close #20208 the original implementation",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala,EugeneFlesselle,2024-05-13T17:54:14Z,2024-05-16T21:19:00Z
19955,21063,"Backport ""Improve ConstraintHandling of SkolemTypes"" to LTS",Backports #20175 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i19955a.scala; tests/pos/i19955b.scala; tests/pos/i20053b.scala,WojciechMazur,2024-07-05T16:55:50Z,2024-07-05T21:32:59Z
19955,21111,"Backport ""Retry `constraint.replace` after `constraint.updateEntry`"" to LTS",Backports #20399 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala,WojciechMazur,2024-07-08T10:22:41Z,2024-07-08T17:03:47Z
19951,20539,Fix #19951: Align TASTy with the Java annotation model.,"Scala annotations are classes  with a real constructor  which has a real signature where order is relevant but names are irrelevant.  On the contrary  Java annotations are interfaces  without any real constructors. The names of ""fields"" are relevant  whereas their order is irrelevant.  As illustrated by https://github.com/scala/scala3/issues/19951  trying to shoehorn Java annotations into the Scala annotation model is not sustainable  and breaks in real ways. Therefore  in this commit we align how Java annotations are stored in TASTy with the Java annotation model.  During pickling:  * Selection of the constructor is pickled without a signature. * Default arguments are dropped. * (Due to the parent commit  all arguments are `NamedArg`s at this point.)  During unpickling:  * Selection of the constructor resolves to the unique constructor (instead of complaining because a signature-less `SELECT` should not resolve to a member with a signature). * Arguments to the constructor are reordered and extended with defaults to match the target constructor; we can do this because all the arguments are `NamedArg`s.  For backward compatibility  during unpickling:  * If we read a `SELECTin` for a Java annotation constructor  we disregard its signature and pretend it was a `SELECT`. * We adapt arguments in best-effort way if not all of them are `NamedArg`s.  ---  ~~Still needs new tests. CI only for now.~~",closed,compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; sbt-test/scala3-compat/java-annotations-3.4/app/Main.scala; sbt-test/scala3-compat/java-annotations-3.4/build.sbt; sbt-test/scala3-compat/java-annotations-3.4/lib/AnnotMacro.scala; sbt-test/scala3-compat/java-annotations-3.4/lib/JavaAnnot.java; sbt-test/scala3-compat/java-annotations-3.4/lib/ScalaUser.scala; sbt-test/scala3-compat/java-annotations-3.4/project/DottyInjectedPlugin.scala; sbt-test/scala3-compat/java-annotations-3.4/test; tests/run-macros/annot-arg-value-in-java.check; tests/run-macros/annot-java-tree/AnnoMacro.scala; tests/run-macros/i19951-java-annotations-tasty-compat-2/AnnotMacro_1.scala; tests/run-macros/i19951-java-annotations-tasty-compat-2/JavaAnnot_1.java; tests/run-macros/i19951-java-annotations-tasty-compat-2/JavaAnnot_2.java; tests/run-macros/i19951-java-annotations-tasty-compat-2/ScalaUser_1.scala; tests/run-macros/i19951-java-annotations-tasty-compat-2/Test_2.scala; tests/run-macros/i19951-java-annotations-tasty-compat.check; tests/run-macros/i19951-java-annotations-tasty-compat/AnnotMacro_2.scala; tests/run-macros/i19951-java-annotations-tasty-compat/JavaAnnot_1.java; tests/run-macros/i19951-java-annotations-tasty-compat/JavaAnnot_3.java; tests/run-macros/i19951-java-annotations-tasty-compat/ScalaUser_2.scala; tests/run-macros/i19951-java-annotations-tasty-compat/Test_4.scala,sjrd,2024-06-10T08:27:23Z,2024-07-03T13:24:15Z
19950,19954,Update unreducible match types error reporting,"Match type reduction can fail for any of the following reasons: - EmptyScrutinee: would be unsound to reduce - Stuck: selector does not match a case and is not provably disjoint from it either - NoInstance: selector does not uniquely determine params captures in pattern - NoMatches: selector matches none of the cases - LegacyPattern: match type contains an illegal case and sourceVersion >= 3.4  Out of those  only Stuck and NoInstance  *could* get reduced in a refined context.  ## Status quo  The match reducer returns: - `ErrorType` for NoMatches and LegacyPattern  - `NoType`  which implies the match type is left unreduced  in all other cases.  In addition  the implementation has an issue where the `ErrorType`s can be left unreported  then entering the flexible type logic  thereby conforming to anything.  ## Proposed changes  In addition to fixing the aforementioned bug  this PR proposes to leave all unreducible match types as unreduced. Of course the reduction may be needed at a later point for conformance  in which case the error message will still contain the same explanations from the `MatchTypeTrace`.  Fixes #19949  Fixes #19950   ## Discussion  All cases of failed match type reductions which we know will never reduce  even with refined scrutinee  should have a consistent behaviour. So NoMatches and EmptyScrutinee should either both be an error or both be left unreduced.  The current implementation attempts to do the former approach (but only for NoMatches)  which has some limitations as discussed below (I'm not saying I can do better  hence the latter approach).  ### Undesirable errors  We dont always want an error for a NoMatches failed reduction  for example if we just need `Nothing` to conform to it: ```scala 3 trait TupleWrap[T <: Tuple]:     def head: Tuple.Head[T]      object EmptyTupleWrap extends TupleWrap[EmptyTuple]:     def head = throw NoSuchElementException() // Error: // |      ^   // |      Match type reduction failed since selector EmptyTuple   // |      matches none of the cases ``` But we could do `def head: Nothing = ...` to avoid the error here.   Generally speaking  places where the bounds of the match type suffice can still get a reduction error  and adding an ascription to avoid an inferred match type doesn't always do the trick.  Another refused example could be: ```scala 3 type Default[N <: Int] = N match     case 0 => 'a' | 'c'   case 1 => 'b' | 'd'    def default(n: Int): Option[Default[n.type]] = n match     case _: (0 | 1) => Some[Default[n.type]]:       n match         case _: 0 => 'a'        case _: 1 => 'b'   case _ => None      default(2): Option[Char] // Error   // |   ^   // |   Match type reduction failed since selector (2 : Int)   // |   matches none of the cases ``` even though the function looks reasonable and type-checking would be sound.  ### Missed errors  Also note in the `EmptyTupleWrap` example  we get a reduction error from a match type application which does not appear in the source code. A valid question might be when and for what exactly these conditions are checked ?   The goal is to report a type error early on for a NoMatches application right  but we are actually only doing so if we happen to do `tryNormalize` and end up in the `MatchReducer`.   Here is an example where were a match type with NoMatches is accepted ```scala 3 trait A:   type X   type R = X match     case 0 => 'a'     case 1 => 'b'  trait B extends A:   type S = 2  type R1 = B#R // no error ```  Generally speaking  the NoMatches error can be circumvented with: ```scala 3 type AllowNoMatchesM[X] = {   type X1 = X   type R = X1 match     case 0 => 'a'     case 1 => 'b' }#R type R2 = AllowNoMatchesM[2] // no error ```  Also note the projections are used in the examples for simplicity but are not necessary  `R` *can be* used within `B` as unreduced without a reported error.  See #19799 for another example of inconsistent errors",closed,compiler/src/dotty/tools/dotc/core/MatchTypeTrace.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-macros/toexproftuple.scala; tests/neg/10349.scala; tests/neg/10747.scala; tests/neg/i12049.check; tests/neg/i17944.check; tests/neg/i19949.scala; tests/neg/matchtype-seq.check; tests/pos/i18488.scala; tests/pos/i19434.scala; tests/pos/i19950.scala; tests/warn/12974.scala,EugeneFlesselle,2024-03-15T15:23:22Z,2024-03-27T19:44:21Z
19949,19954,Update unreducible match types error reporting,"Match type reduction can fail for any of the following reasons: - EmptyScrutinee: would be unsound to reduce - Stuck: selector does not match a case and is not provably disjoint from it either - NoInstance: selector does not uniquely determine params captures in pattern - NoMatches: selector matches none of the cases - LegacyPattern: match type contains an illegal case and sourceVersion >= 3.4  Out of those  only Stuck and NoInstance  *could* get reduced in a refined context.  ## Status quo  The match reducer returns: - `ErrorType` for NoMatches and LegacyPattern  - `NoType`  which implies the match type is left unreduced  in all other cases.  In addition  the implementation has an issue where the `ErrorType`s can be left unreported  then entering the flexible type logic  thereby conforming to anything.  ## Proposed changes  In addition to fixing the aforementioned bug  this PR proposes to leave all unreducible match types as unreduced. Of course the reduction may be needed at a later point for conformance  in which case the error message will still contain the same explanations from the `MatchTypeTrace`.  Fixes #19949  Fixes #19950   ## Discussion  All cases of failed match type reductions which we know will never reduce  even with refined scrutinee  should have a consistent behaviour. So NoMatches and EmptyScrutinee should either both be an error or both be left unreduced.  The current implementation attempts to do the former approach (but only for NoMatches)  which has some limitations as discussed below (I'm not saying I can do better  hence the latter approach).  ### Undesirable errors  We dont always want an error for a NoMatches failed reduction  for example if we just need `Nothing` to conform to it: ```scala 3 trait TupleWrap[T <: Tuple]:     def head: Tuple.Head[T]      object EmptyTupleWrap extends TupleWrap[EmptyTuple]:     def head = throw NoSuchElementException() // Error: // |      ^   // |      Match type reduction failed since selector EmptyTuple   // |      matches none of the cases ``` But we could do `def head: Nothing = ...` to avoid the error here.   Generally speaking  places where the bounds of the match type suffice can still get a reduction error  and adding an ascription to avoid an inferred match type doesn't always do the trick.  Another refused example could be: ```scala 3 type Default[N <: Int] = N match     case 0 => 'a' | 'c'   case 1 => 'b' | 'd'    def default(n: Int): Option[Default[n.type]] = n match     case _: (0 | 1) => Some[Default[n.type]]:       n match         case _: 0 => 'a'        case _: 1 => 'b'   case _ => None      default(2): Option[Char] // Error   // |   ^   // |   Match type reduction failed since selector (2 : Int)   // |   matches none of the cases ``` even though the function looks reasonable and type-checking would be sound.  ### Missed errors  Also note in the `EmptyTupleWrap` example  we get a reduction error from a match type application which does not appear in the source code. A valid question might be when and for what exactly these conditions are checked ?   The goal is to report a type error early on for a NoMatches application right  but we are actually only doing so if we happen to do `tryNormalize` and end up in the `MatchReducer`.   Here is an example where were a match type with NoMatches is accepted ```scala 3 trait A:   type X   type R = X match     case 0 => 'a'     case 1 => 'b'  trait B extends A:   type S = 2  type R1 = B#R // no error ```  Generally speaking  the NoMatches error can be circumvented with: ```scala 3 type AllowNoMatchesM[X] = {   type X1 = X   type R = X1 match     case 0 => 'a'     case 1 => 'b' }#R type R2 = AllowNoMatchesM[2] // no error ```  Also note the projections are used in the examples for simplicity but are not necessary  `R` *can be* used within `B` as unreduced without a reported error.  See #19799 for another example of inconsistent errors",closed,compiler/src/dotty/tools/dotc/core/MatchTypeTrace.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg-macros/toexproftuple.scala; tests/neg/10349.scala; tests/neg/10747.scala; tests/neg/i12049.check; tests/neg/i17944.check; tests/neg/i19949.scala; tests/neg/matchtype-seq.check; tests/pos/i18488.scala; tests/pos/i19434.scala; tests/pos/i19950.scala; tests/warn/12974.scala,EugeneFlesselle,2024-03-15T15:23:22Z,2024-03-27T19:44:21Z
19947,19948,Avoid spurious `val` binding in quote pattern,"In quoted patterns  we do not want to generate the val bindings. We care about the original structure if the pattern expression.  Fixes #19947",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-macros/i19947/Macro_1.scala; tests/pos-macros/i19947/Test_2.scala,nicolasstucki,2024-03-14T16:23:17Z,2024-03-19T14:17:11Z
19947,20999,"Backport ""Avoid spurious `val` binding in quote pattern"" to LTS",Backports #19948 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-macros/i19947/Macro_1.scala; tests/pos-macros/i19947/Test_2.scala,WojciechMazur,2024-07-03T15:29:36Z,2024-07-04T10:00:52Z
19942,19974,Make sure typeParams returns a stable result even in the presence of completions,"Fixes #19942   Based on #19960   @dwijnand I would have pushed onto the original PR if it had been on staging. Better to always push to staging  not your own repo. ",closed,compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg-macros/quote-type-variable-no-inference-3.check; tests/pos/i19942.1.scala; tests/pos/i19942.scala,odersky,2024-03-18T12:17:41Z,2024-03-18T18:37:47Z
19941,19944,Detect non `Expr[..]` splice patterns,"We compute the pattern using `Expr[pt]` of the prototype `pt` of the splice  but this is not enough to reject non-matching patterns. The quoted splices are encoded away before we get to the pattern matching phase where we could potentially detect that they will not match. Instead we check that all quote patterns are `Expr[..]` when typing the pattern.  Fixes #19941",closed,compiler/src/dotty/tools/dotc/quoted/QuotePatterns.scala; tests/neg-macros/i19941.check; tests/neg-macros/i19941.scala; tests/neg-macros/quotedPatterns-4.scala,nicolasstucki,2024-03-14T08:19:32Z,2024-03-19T14:40:45Z
19929,20188,Avoid crash when superType does not exist after erasure,"Fixes #19929  Two main changes:   - In TypeErasure  throw a TypeError instead of a FatalError if a supertype of an applied type does not exist. That way  we get a proper error with a position.  - Move some catch-and-rethrow logic from ReTyper to TreeChecker. ReTyper already had special exceptions that disabled the logic for all uses of ReTyper except TreeChecker. Unfortunately the ReTyper override also disabled the special TypeError handling in Typer.  The root cause of #19929 got fixed by another PR  but I think it's still good to do the hardening of this commit.  ",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/dotty/tools/dotc/typer/ReTyper.scala; tests/pos/i19929.scala,odersky,2024-04-15T11:40:41Z,2024-04-15T18:58:00Z
19929,21067,"Backport ""Avoid crash when superType does not exist after erasure"" to LTS",Backports #20188 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/dotty/tools/dotc/typer/ReTyper.scala; tests/pos/i19929.scala,WojciechMazur,2024-07-05T18:18:47Z,2024-07-05T21:34:24Z
19925,20467,Fix handling of right associative extension methods across scaladoc and printers,"Fixes #19925  The same issue with handling right associative extension methods was also present in RefinedPrinter and ShortenedTypePrinter  so I fixed those as well",closed,compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; presentation-compiler/src/main/dotty/tools/pc/printer/ShortenedTypePrinter.scala; presentation-compiler/test/dotty/tools/pc/tests/hover/HoverTermSuite.scala; scaladoc-testcases/src/tests/rightAssocExtension.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2024-05-24T13:55:40Z,2024-05-28T09:21:19Z
19925,21125,"Backport ""Fix handling of right associative extension methods across scaladoc and printers"" to LTS",Backports #20467 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; presentation-compiler/src/main/dotty/tools/pc/printer/ShortenedTypePrinter.scala; presentation-compiler/test/dotty/tools/pc/tests/hover/HoverTermSuite.scala; scaladoc-testcases/src/tests/rightAssocExtension.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,WojciechMazur,2024-07-08T17:25:36Z,2024-07-09T16:54:52Z
19924,20193,Regression: fix compilation performance on Windows,"Caches isDirectory calls  Too many of them were added in https://github.com/scala/scala3/commit/607e4d59d93e4ceb0e46469923161516c4e04b60 and this degraded compilation performance by up to 100% on Windows  Fixes #19924 backport to release-3.4.2",closed,compiler/src/dotty/tools/io/AbstractFile.scala; compiler/src/dotty/tools/io/NoAbstractFile.scala; compiler/src/dotty/tools/io/PlainFile.scala; compiler/src/dotty/tools/io/VirtualDirectory.scala; compiler/src/dotty/tools/io/VirtualFile.scala; compiler/src/dotty/tools/io/ZipArchive.scala,OlegYch,2024-04-15T14:38:02Z,2024-05-07T16:40:12Z
19913,19914,Check deprecation of inline methods,"We must check these constraint just before inlining as later on there on the call might completely disappear. We do the same as we did for experimental definition checks.  Fixes #19913   ### Changes  - Define `CrossVersionChecks.checkRef` that checks both deprecation and experimental.   - Used in `Inlines` and `PostTyper` to check the deprecation of inlined calls. - Rename `checkDeprecated` to `checkDeprecatedRef` - Move `checkDeprecatedRef` and `skipWarning` to `object CrossVersionChecks`",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/CrossVersionChecks.scala; scaladoc-testcases/src/tests/hugetype.scala; tests/warn/i19913.check; tests/warn/i19913.scala,nicolasstucki,2024-03-11T08:12:27Z,2024-03-19T15:04:22Z
19913,21004,"Backport ""Check deprecation of inline methods"" to LTS",Backports #19914 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/CrossVersionChecks.scala; scaladoc-testcases/src/tests/hugetype.scala; tests/warn/i19913.check; tests/warn/i19913.scala,WojciechMazur,2024-07-03T16:22:30Z,2024-07-04T10:02:19Z
19910,19911,Fix undercompilation upon ctor change,"Fixes https://github.com/scala/scala3/issues/19910 Fixes https://github.com/sbt/zinc/issues/1334  ## Problem Scala 3 compiler registers special `zincMangledName` for constructors for the purpose of incremental compilation. Currently the `zincMangledName` contains the package name  which does not match the use site tracking  thereby causing undercompilation during incremental compilation after a ctor change  like adding a parameter.  There is an existing scripted test  but coincidentally the test class does NOT include packages  so the test ends up passing.  ## Solution 1. This PR reproduces the issue by adding package name to the test. 2. This also fixes the problem by changing the `zincMangedName` to `sym.owner.name ++ "";init;""`.  ## Note about zincMangedName `zincMangedName` in general is a good idea  which adds the class name into otherwise common name `<init>`.  By making the name more unique it prevents overcompilation when one of the ctors changes in a file.",closed,compiler/src/dotty/tools/dotc/sbt/package.scala; sbt-bridge/test/xsbt/ExtractUsedNamesSpecification.scala; sbt-test/source-dependencies/constructors/A.scala; sbt-test/source-dependencies/constructors/B.scala; sbt-test/source-dependencies/constructors/changes/A2.scala; sbt-test/source-dependencies/constructors/changes/B2.scala,eed3si9n,2024-03-10T03:37:39Z,2024-03-17T11:59:52Z
19909,19915,Add regression test for #19909,"Closes #19909  Probably fixed by #19645",closed,tests/pos-macros/i19909/Macro_1.scala; tests/pos-macros/i19909/Test_2.scala; tests/pos-macros/i19909b/Macro.scala; tests/pos-macros/i19909b/Test.scala,nicolasstucki,2024-03-11T08:24:12Z,2024-03-11T12:09:52Z
19909,20981,"Backport ""Add regression test for #19909"" to LTS",Backports #19915 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos-macros/i19909/Macro_1.scala; tests/pos-macros/i19909/Test_2.scala; tests/pos-macros/i19909b/Macro.scala; tests/pos-macros/i19909b/Test.scala,WojciechMazur,2024-07-02T22:52:02Z,2024-07-03T08:38:44Z
19907,19995,Fix #19907: Skip soft unions in widenSingle of widenInferred,"Fix #19907.  If the inferred type `inst` is too large  the subtype check for `bound` in `widenSingle` can be expensive  due to comparisons between large union types  so we avoid it by skipping soft unions in the first step. Singletons of soft unions are widened when we `widenUnion` now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i19907_slow_1000_3.scala; tests/pos/i19907_slow_1000_4.scala; tests/pos/i19907_slow_100_3.scala,noti0na1,2024-03-20T22:20:50Z,2024-03-25T17:41:56Z
19907,20034,Optimize lub algorithm,"Replace mergeIfSuper by a different algorithm that is more efficient. We drop or-summands in both arguments of a lub that are subsumed by the other. This avoids expensive recursive calls to lub or expensive comparisons with union types on the right.  I tested the previous performance regression #19907 with the new algorithm  and without the changes in #19995 that avoid a slow lub. Where previously it took minutes it now compiles fast.   Specifically  we get for i19907_slow_1000_3.scala: 2.9s with the optimizations in #19995  3.3s with just this PR. And for i19907_slow_1000_4.scala: 3.9s with the optimizations in #19995  4.5s with just this PR. So the optimizations in #19995 are much less critical now since lubs are much faster. Still  it's probably worthwhile to leave them in in case there is a humongous program that stresses lubs even more.  ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/i10693.scala; tests/semanticdb/metac.expect,odersky,2024-03-27T13:56:05Z,2024-03-29T09:40:41Z
19905,19906,Improve message when tree cannot be shown as source,Closes #19905,closed,compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; tests/run-macros/i19905.check; tests/run-macros/i19905/Macro_1.scala; tests/run-macros/i19905/Test_2.scala,nicolasstucki,2024-03-08T16:13:16Z,2024-03-11T12:15:38Z
19905,20982,"Backport ""Improve message when tree cannot be shown as source"" to LTS",Backports #19906 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; tests/run-macros/i19905.check; tests/run-macros/i19905/Macro_1.scala; tests/run-macros/i19905/Test_2.scala,WojciechMazur,2024-07-02T22:52:26Z,2024-07-03T08:38:50Z
19892,19931,Reduce projections of type aliases with class type prefixes,"Projections P # X are types that we would like to avoid. If X is a class type  there's nothing we can do. If X is an abstract type  we use skolemization and rewrite to (x?: P).X. If X is an alias type we should simply dealias but this was not done before.  This caused an exponential blowup in #19892  where we constructed types of the form     ZPartialServerEndpoint[R  A  B  I  E  O  -C] # EndpointType[A  I  E  T  R] ... # EndpointType[A  I  E  T  R]  When the were 5 or more such selections  compile times blew up (33s for 5  timeout after 5 minutes for 6). I am still not quite sure where the blowup happened. Looking at stacktraces of random interrupts it seemed to be in a deep recursion of memberDenot and asSeenFrom calls.I believe it would still be interesting to find out more about this  in case there are other similar situations where combinations of deep projections with wide applications cannot be avoided.  But for this precise problem  eagerly dealiasing fixes it.  Fixes #19892",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotc/pos-test-pickling.blacklist; presentation-compiler/test/dotty/tools/pc/tests/highlight/TypeDocumentHighlightSuite.scala; tests/pos/i19892.scala,odersky,2024-03-12T16:03:14Z,2024-03-27T21:15:11Z
19892,21025,"Backport ""Reduce projections of type aliases with class type prefixes"" to LTS",Backports #19931 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotc/pos-test-pickling.blacklist; presentation-compiler/test/dotty/tools/pc/tests/highlight/TypeDocumentHighlightSuite.scala; tests/pos/i19892.scala,WojciechMazur,2024-07-04T17:08:27Z,2024-07-05T13:23:22Z
19888,19934,Don't allow implicit conversions on prefixes of type selections,Fixes #19888,closed,compiler/src/dotty/tools/dotc/typer/ImportSuggestions.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i11994.check; tests/neg/i19888.scala,odersky,2024-03-12T21:35:11Z,2024-03-14T12:32:59Z
19862,19877,Restore pre-3.3.2 behavior of `inline implicit def`,"`inline implicit def` is not really a supported feature since it combines Scala 3's `inline` with Scala 2's `implicit` where the latter should eventually be deprecated. This however didn't prevent at least one project from using this combination in a way that was broken by #18249  see #19862 for the details.  The issue is that when definining:      implicit def foo(x: A): B = ...  Then `foo` is a valid implicit search candidate when looking up an implicit `Function1[A  B]`. However  before #18249 if instead we wrote:      inline implicit def foo(x: A): B = ...  Then `foo` would be considered as an implicit search candidate but discarded because eta-expansion was disabled.  There is no particular reason for `inline implicit def` to behave differently from `implicit def` here  but since `implicit def` is a legacy feature and since Scala 3.3 is an LTS release  we choose to restore the pre-#18249 behavior for compatibility reasons.  Fixes #19862.",closed,compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i19862.scala,smarter,2024-03-05T00:01:57Z,2024-03-05T08:32:57Z
19862,20975,"Backport ""Restore pre-3.3.2 behavior of `inline implicit def`"" to LTS",Backports #19877 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i19862.scala,WojciechMazur,2024-07-02T21:53:57Z,2024-07-03T08:38:07Z
19859,19860,Fix i19859,Fixes #19859.,closed,compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala,Linyxus,2024-03-03T22:21:03Z,2024-03-04T15:11:57Z
19856,19869,Disallow ill-staged references to local classes,Fixes #19856,closed,compiler/src/dotty/tools/dotc/staging/HealType.scala; tests/neg-macros/i19856.scala; tests/neg-macros/i19856b.scala,nicolasstucki,2024-03-04T14:40:57Z,2024-03-11T13:30:07Z
19856,20985,"Backport ""Disallow ill-staged references to local classes"" to LTS",Backports #19869 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/staging/HealType.scala; tests/neg-macros/i19856.scala; tests/neg-macros/i19856b.scala,WojciechMazur,2024-07-02T22:54:43Z,2024-07-03T08:39:33Z
19853,20311,Fix scaladoc crash on Windows - illegal path character,Fixes #19853 ,closed,scaladoc/src/dotty/tools/scaladoc/renderers/SiteRenderer.scala; scaladoc/src/dotty/tools/scaladoc/site/StaticSiteContext.scala; scaladoc/src/dotty/tools/scaladoc/util/escape.scala,Florian3k,2024-05-01T12:33:38Z,2024-05-07T13:15:31Z
19853,21102,"Backport ""Fix scaladoc crash on Windows - illegal path character"" to LTS",Backports #20311 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,scaladoc/src/dotty/tools/scaladoc/renderers/SiteRenderer.scala; scaladoc/src/dotty/tools/scaladoc/site/StaticSiteContext.scala; scaladoc/src/dotty/tools/scaladoc/util/escape.scala,WojciechMazur,2024-07-06T14:53:33Z,2024-07-06T21:54:46Z
19848,19864,Update links in the repository to scala/scala3,Related to #19839 and #19848 ,closed,.github/ISSUE_TEMPLATE/feature.md; .github/ISSUE_TEMPLATE/improve-error.md; .github/workflows/scripts/publish-sdkman.sh; MAINTENANCE.md; NOTICE.md; README.md; bench/profiles/compiletime.yml; bench/profiles/default.yml; bench/profiles/empty.yml; bench/profiles/exhaustivity.yml; bench/profiles/implicits.yml; bench/profiles/misc.yml; bench/profiles/projects.yml; bench/profiles/pull.yml; bench/profiles/quotes.yml; bench/profiles/sbt.yml; bench/profiles/tuples.yml; bench/profiles/typing.yml; compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/DottyBackendInterface.scala; compiler/src/dotty/tools/dotc/Driver.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/interactive/Interactive.scala; compiler/src/dotty/tools/dotc/interactive/SourceTree.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/transform/ExpandPrivate.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; compiler/test/dotty/tools/io/PathTest.scala,hamzaremmal,2024-03-04T10:02:20Z,2024-03-06T12:40:45Z
19847,19873,Various fixes to stdlib-cc,"fixes #19819  fixes #19652  fixes #19847  supersedes #19858 ",closed,compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; scala2-library-cc/src/scala/collection/Seq.scala; scala2-library-cc/src/scala/collection/SeqView.scala; scala2-library-cc/src/scala/collection/generic/IsSeq.scala; tests/run/enrich-gentraversable.scala,Linyxus,2024-03-04T16:38:15Z,2024-03-06T14:28:38Z
19846,22002,Make sure symbols in annotation trees are fresh before pickling,"In a nutshell: when mapping annotated types  we can currently end up with the same symbol being declared in distinct trees  which crashes the pickler as it expects each symbol to be declared in a single place. See https://github.com/scala/scala3/pull/19957#discussion_r1644920020 and https://github.com/scala/scala3/pull/19957#discussion_r1644921716 for more context.  This PR ensures that all symbols in annotation trees are different by creating fresh symbols for all symbols in annotation tree during `PostTyper`.  In my [previous attempt](https://github.com/scala/scala3/commit/ab70f18ae89bb547717dfd73a35de42939d62c16) which was discussed on #19957  I did it in `Annotations.mapWith`. Here  it's only done once in `PostTyper`  so this is more lightweight.  Fixes #17939  fixes #19846 and fixes (partially?) #20272.",closed,compiler/src/dotty/tools/dotc/transform/PostTyper.scala; tests/pos/annot-17939.scala; tests/pos/annot-19846.scala; tests/pos/annot-19846b.scala; tests/pos/annot-body.scala; tests/pos/annot-i20272a.scala,mbovel,2024-11-21T20:32:12Z,2024-12-17T22:18:59Z
19845,19849,Drop FreeSeqFactory from stdlib-cc,"FreeSeqFactory was a construction to demonstrate type safety for certain iterableFactory.from calls where we rely in the fact that for all Seqs iterableFactory has an eager implementation of from.  While that shows that we _can_ make it typesafe  it does not work at runtime as a drop-in replacement for stdlib since of course stdlib does not have a FreeSeqFactory.  This commit drops FreeSeqFactory and adds three unsafeAssumePure calls instead  with explanations.  Fixes #19845",closed,scala2-library-cc/src/scala/collection/Factory.scala; scala2-library-cc/src/scala/collection/Seq.scala; scala2-library-cc/src/scala/collection/generic/IsSeq.scala,odersky,2024-03-01T19:16:04Z,2024-03-02T13:42:31Z
19842,19866,Add test for #19842,"Add test for #19842  Doesn't close it.",closed,tests/neg-macros/i19842.check; tests/neg-macros/i19842/Macro.scala; tests/neg-macros/i19842/Test.scala,hamzaremmal,2024-03-04T11:35:02Z,2024-03-04T13:18:58Z
19842,19870,Add check for parents in Quotes (#19842),Fix #19842 ,closed,compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/neg-macros/i19842-a.check; tests/neg-macros/i19842-a/Macro.scala; tests/neg-macros/i19842-a/Test.scala; tests/neg-macros/i19842-b.check; tests/neg-macros/i19842-b/Macro.scala; tests/neg-macros/i19842-b/Test.scala,hamzaremmal,2024-03-04T15:29:44Z,2024-03-13T08:22:59Z
19821,19871,Make aliases of `MatchAlias`es normal `TypeAlias`es ,"Proposes to make `isMatch` true only for `MatchType`s and higher-kinded abstraction of them.  As a result  code using `isMatch` to choose between a `TypeAlias` and `MatchAlias` will now use a `TypeAlias` when aliasing a `MatchAlias`. Which in turn allows for better de-aliasing  since `dealias` only de-aliases standard type aliases.  `tryNormalize` on `AppliedType` should only attempt reduction if there is an underlying match type. This could previously be identified by a `MatchAlias` tycon. We now need a recursive check.  Fixes #19821",closed,compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/neg-macros/i11795.scala; tests/neg/i20071.scala; tests/pos-macros/i11795.scala; tests/pos/i15183/test_2.scala; tests/pos/i19821.scala,EugeneFlesselle,2024-03-04T16:25:46Z,2024-04-08T20:52:33Z
19819,19873,Various fixes to stdlib-cc,"fixes #19819  fixes #19652  fixes #19847  supersedes #19858 ",closed,compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; scala2-library-cc/src/scala/collection/Seq.scala; scala2-library-cc/src/scala/collection/SeqView.scala; scala2-library-cc/src/scala/collection/generic/IsSeq.scala; tests/run/enrich-gentraversable.scala,Linyxus,2024-03-04T16:38:15Z,2024-03-06T14:28:38Z
19815,19818,Hotfix 3.3.3,"Fixes #19815  contents: - [c5169f0] - fix by @smarter - [1f5a667] - forward and backward compatibility tests (by @bishabosha). Probably  it's overkill  but it's better to be paranoid than sorry. They only take a few seconds. - [df10488] - a copy of the 3.3.2 changelog with annotation about the hotfix. - [e497a42] - version bump. I decided to stay on 3.3.1 as a reference version and version that we check the compatibility against.",closed,changelogs/3.3.3.md; compiler/src/dotty/tools/dotc/core/NameKinds.scala; project/Build.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.1/app/Main.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.1/build.sbt; sbt-test/scala3-compat/name-kinds-backward-3.3.1/lib/Foo.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.1/project/DottyInjectedPlugin.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.1/test; sbt-test/scala3-compat/name-kinds-backward-3.3.2/app/Main.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.2/build.sbt; sbt-test/scala3-compat/name-kinds-backward-3.3.2/lib/Foo.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.2/project/DottyInjectedPlugin.scala; sbt-test/scala3-compat/name-kinds-backward-3.3.2/test; sbt-test/scala3-compat/name-kinds-forward-3.3.1/app/Main.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.1/build.sbt; sbt-test/scala3-compat/name-kinds-forward-3.3.1/lib/Foo.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.1/project/DottyInjectedPlugin.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.1/test; sbt-test/scala3-compat/name-kinds-forward-3.3.2/app/Main.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.2/build.sbt; sbt-test/scala3-compat/name-kinds-forward-3.3.2/lib/Foo.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.2/project/DottyInjectedPlugin.scala; sbt-test/scala3-compat/name-kinds-forward-3.3.2/test; tests/neg/i11350.check; tests/run-staging/multi-staging.check; tests/run-staging/quote-nested-2.check; tests/run-staging/quote-nested-5.check,Kordyjan,2024-02-28T17:58:40Z,2024-02-29T09:35:10Z
19809,19982,Add support for `var` in refinements,Closes #19809,closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/syntax.md; tests/neg/i13703.check; tests/neg/i13703.scala; tests/neg/i19809.check; tests/neg/i19809.scala; tests/neg/i4496b.scala; tests/neg/illegal-refinements.scala; tests/neg/structural.scala; tests/pos/i19809.scala,hamzaremmal,2024-03-19T17:54:17Z,2024-04-03T14:20:32Z
19808,19813,Fix #19808: Don't force to compute the owner of a symbol when there is no denotation,"Fix #19808: Don't force to compute the owner of a symbol when there is no denotation.  ",closed,compiler/src/dotty/tools/dotc/typer/Nullables.scala; tests/explicit-nulls/pos/i19808.scala; tests/pos/i19808.scala,noti0na1,2024-02-28T15:45:41Z,2024-02-28T20:16:27Z
19808,20962,"Backport ""Fix #19808: Don't force to compute the owner of a symbol when there is no denotation"" to LTS",Backports #19813 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Nullables.scala; tests/explicit-nulls/pos/i19808.scala; tests/pos/i19808.scala,WojciechMazur,2024-07-02T20:42:15Z,2024-07-03T08:32:02Z
19806,19827,fix(#19806): wrong tasty of scala module class reference,"This commit makes the following diff to TASTy for i17255 files. The TASTy before this commit relied on the compiler (aka all TASTy clients) intrinsically knowing how to resolve Module$ when the definition is actually Module[ModuleClass].  ```sh scalac tests/run/i17255/J.java tests/run/i17255/Module.scala -Yprint-tasty -Yjava-tasty ```  ```diff     90:         EMPTYCLAUSE     91:         TERMREF 17 [Module]     93:           SHAREDtype 12     95:         ELIDED     96:           SHAREDtype 91     98:         STATIC     99:       DEFDEF(12) 18 [module]    102:         EMPTYCLAUSE -  103:         SELECTtpt 19 [Module$] +  103:         SELECTtpt 19 [Module[ModuleClass]]    105:           SHAREDtype 3    107:         ELIDED    108:           TYPEREF 17 [Module]    110:             SHAREDtype 3    112:         STATIC ```  fixes #19806",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/ContextOps.scala; compiler/src/dotty/tools/dotc/core/tasty/TastyAnsiiPrinter.scala; compiler/src/dotty/tools/dotc/core/tasty/TastyPrinter.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i19806/J.tastycheck; tests/pos/i19806/J_SCALA_ONLY.java; tests/pos/i19806/Module.scala; tests/run/i17255/J.java; tests/run/i17255/Module.scala,i10416,2024-02-29T16:46:59Z,2024-03-13T15:30:59Z
19789,20090,Fix #19789: Merge same TypeParamRef in orDominator,"Fix #19789  Merge refined or applied types if they share the same `TypeParamRef` as tycon in `orDominator`.  ",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i19789.scala,noti0na1,2024-04-04T18:45:40Z,2024-04-10T20:48:45Z
19789,21056,"Backport ""Fix #19789: Merge same TypeParamRef in orDominator"" to LTS",Backports #20090 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i19789.scala,WojciechMazur,2024-07-05T16:23:15Z,2024-07-05T21:32:16Z
19767,20102,Fix TermRef prefixes not having their type healed,"Fixes #19767  In the minimization from the issue  after the splicing phase we ended up with a quote with illegal `k1` types  which should have been healed during the splicing phase: ```scala '<k1$given2>{   new ICons[(ICons[k1]#key : k1)](   //... ``` To fix that  we now map over and heal the prefix of the TermRef as well  so we end up with: ```scala '<k1$given2>{   new ICons[(ICons[k1$given2]#key : k1$given2)](   //... ```",closed,compiler/src/dotty/tools/dotc/staging/HealType.scala; tests/pos-macros/i19767.scala,jchyb,2024-04-05T13:23:31Z,2024-04-05T15:36:38Z
19762,19774,test: add test for #19762,"close https://github.com/lampepfl/dotty/issues/19762 and close https://github.com/lampepfl/dotty/issues/19755 too. Add a test to confirm issue#19762 is solved.",closed,tests/neg/i19762.check; tests/neg/i19762.scala,i10416,2024-02-24T07:58:10Z,2024-02-24T10:47:36Z
19762,20935,"Backport ""test: add test for #19762"" to LTS",Backports #19774 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/neg/i19762.check; tests/neg/i19762.scala,WojciechMazur,2024-07-01T22:00:12Z,2024-07-02T19:17:57Z
19755,19774,test: add test for #19762,"close https://github.com/lampepfl/dotty/issues/19762 and close https://github.com/lampepfl/dotty/issues/19755 too. Add a test to confirm issue#19762 is solved.",closed,tests/neg/i19762.check; tests/neg/i19762.scala,i10416,2024-02-24T07:58:10Z,2024-02-24T10:47:36Z
19751,19822,Fix Function tree copier,"It did not copy correctly instances of the FunctionWithMods subclass.  Fixes #19751",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; tests/pos-custom-args/captures/i19751.scala,odersky,2024-02-28T21:25:45Z,2024-02-29T15:16:33Z
19750,20018,Add comment about Java version in CI,Closes #19750 ,closed,.github/workflows/ci.yaml,hamzaremmal,2024-03-26T12:39:55Z,2024-03-26T14:01:40Z
19749,20177,Add regression tests,"Closes #19749 Closes #16208",closed,tests/pos/i16208.scala; tests/pos/i19749.scala,EugeneFlesselle,2024-04-13T21:15:41Z,2024-04-14T13:28:46Z
19749,21066,"Backport ""Add regression tests"" to LTS",Backports #20177 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos/i19749.scala,WojciechMazur,2024-07-05T18:10:04Z,2024-07-05T21:34:18Z
19746,20015,Fix #19746: Do not follow param term refs in `isConcrete`.,"Term refs that reference term parameters can be substituted later by more precise ones  which can lead to different instantiations of type captures. They must therefore be considered as non concrete when following `baseType`s to captures in variant positions  like we do for type param refs and other substitutable references.  We actually rewrite `isConcrete` in the process to be more based on an ""allow list"" of things we know to be concrete  rather than an ""exclusion list"" of things we know to be non-concrete. That should make it more straightforward to evaluate the validity of the algorithm.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg/i19746.check; tests/neg/i19746.scala; tests/pos/TupleReverse.scala; tests/pos/TupleReverseOnto.scala,sjrd,2024-03-25T16:18:53Z,2024-04-04T14:05:42Z
19743,18880,Add support for Pipelined builds,"This includes support for a single pass pipelined build  compatible with sbt's `ThisBuild/usePipelining`  - adds `-Ypickle-java` and `-Ypickle-write` flags  expected by Zinc when pipelining is enabled in sbt. - when `-Ypickle-write <directory|jar>` is set  then write tasty from pickler to that output  (building upon https://github.com/lampepfl/dotty/pull/19074 support for Java signatures in TASTy files). - call `apiPhaseCompleted` and `dependencyPhaseCompleted` callbacks  which will activate early downstream compilation - calls `generatedNonLocalClass` callbacks early  which enables Zinc to run the incremental algorithm before starting downstream compilation (including checking for macro definitions).  generally this can be reviewed commit-by-commit  as they each do an isolated feature.  As well as many tests in the `sbt-test/pipelining` directory  this has also been tested locally on `akka/akka-http`  `apache/incubator-pekko`  `lichess-org/lila`  `scalacenter/scaladex`  `typelevel/fs2`  `typelevel/http4s`  `typelevel/cats`  `slick/slick`.  This PR sets the ground work for an optional 2-pass compile (reusing the `OUTLINEattr`)  which should use a faster frontend (skipping rhs when possible) before producing tasty signatures  fixes #19743",closed,compiler/src/dotty/tools/backend/jvm/CodeGen.scala; compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/Driver.scala; compiler/src/dotty/tools/dotc/classpath/AggregateClassPath.scala; compiler/src/dotty/tools/dotc/classpath/ClassPath.scala; compiler/src/dotty/tools/dotc/classpath/DirectoryClassPath.scala; compiler/src/dotty/tools/dotc/classpath/FileUtils.scala; compiler/src/dotty/tools/dotc/classpath/VirtualDirectoryClassPath.scala; compiler/src/dotty/tools/dotc/classpath/ZipAndJarFileLookupFactory.scala; compiler/src/dotty/tools/dotc/classpath/ZipArchiveFileLookup.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/SymbolLoaders.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/core/tasty/TastyPrinter.scala; compiler/src/dotty/tools/dotc/fromtasty/Debug.scala; compiler/src/dotty/tools/dotc/fromtasty/TASTYRun.scala; compiler/src/dotty/tools/dotc/fromtasty/TastyFileUtil.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/ExtractDependencies.scala; compiler/src/dotty/tools/dotc/sbt/interfaces/IncrementalCallback.java; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/util/EnumFlags.scala; compiler/src/dotty/tools/io/AbstractFile.scala; compiler/src/dotty/tools/io/ClassPath.scala; compiler/src/dotty/tools/io/File.scala; compiler/src/dotty/tools/io/FileExtension.scala,bishabosha,2023-11-08T15:02:59Z,2024-04-04T16:14:09Z
19732,19930,Fix #19732: quotes.reflect.Ref incorrectly casting `This` to `RefTree`,"In the issue minimisation  `tpd.ref` returns a tpd.This(Ident(Inner$)) tree  where the inner ident is a type ident  which was unexpected. Trying to adjust the `tpd.ref` to return a RefType for that case seems dangerous  so I instead opted for a workaround directly inside the QuotesImpl.   At first I wanted to reuse the `tpd.This` tree somehow (or at least to use a correctly retyped `Ident`)  but nothing I tried with it worked  so I ended up writing the correct Ref by hand.  Fixes #19732",closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/run-macros/i19732.check; tests/run-macros/i19732/Macro_1.scala; tests/run-macros/i19732/Test_2.scala,jchyb,2024-03-12T14:13:28Z,2024-03-14T09:03:34Z
19732,20990,"Backport ""Fix #19732: quotes.reflect.Ref incorrectly casting `This` to `RefTree`"" to LTS",Backports #19930 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/run-macros/i19732.check; tests/run-macros/i19732/Macro_1.scala; tests/run-macros/i19732/Test_2.scala,WojciechMazur,2024-07-03T12:50:26Z,2024-07-04T10:11:28Z
19731,19800,Improve error reporting for missing members,Fixes: #19731 ,closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/i19731.check; tests/neg/i19731.scala,hamzaremmal,2024-02-27T17:28:34Z,2024-02-29T01:58:24Z
19724,19801,Specialized retained inline FunctionN apply methods,Fixes #19724,closed,compiler/src/dotty/tools/dotc/transform/SpecializeFunctions.scala; tests/pos/i19724.scala; tests/run/i19724.scala,nicolasstucki,2024-02-27T17:31:12Z,2024-03-01T07:52:42Z
19724,20968,"Backport ""Specialized retained inline FunctionN apply methods"" to LTS",Backports #19801 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/SpecializeFunctions.scala; tests/pos/i19724.scala; tests/run/i19724.scala,WojciechMazur,2024-07-02T20:58:35Z,2024-07-03T08:37:10Z
19721,19722,[regression] Publish nightly releases and releases using Java 8,"Close #19721  [test_java8]",closed,.github/workflows/ci.yaml,hamzaremmal,2024-02-17T23:25:55Z,2024-02-19T11:20:47Z
19721,20925,"Backport ""[regression] Publish nightly releases and releases using Java 8"" to LTS",Backports #19722 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,.github/workflows/ci.yaml,WojciechMazur,2024-07-01T20:14:56Z,2024-07-02T19:15:57Z
19715,19717,Prefer extensions over conversions for member selection,Fixes #19715,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i19715.scala,odersky,2024-02-17T16:50:33Z,2024-02-19T10:24:17Z
19715,20924,"Backport ""Prefer extensions over conversions for member selection"" to LTS",Backports #19717 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/pos/i19715.scala,WojciechMazur,2024-07-01T20:13:56Z,2024-07-02T19:15:47Z
19712,19720,Fix nightly build failure + Address issue with the self-hosted runner,"Closes #19712   This PR introduce a workaround for actions/runner#2033. This workaround was already introduced in #19703 in some of the jobs.   `actions/checkout` has an issue filled about this too: actions/checkout#1169",closed,.github/workflows/ci.yaml; .github/workflows/releases.yml,hamzaremmal,2024-02-17T19:14:04Z,2024-02-17T22:51:10Z
19711,19719,Tweak parameter accessor scheme,"To qualify as a super-parameter alias  a parameter of a subclass has to be passed to the primary constructor of the superclass.  Fixes #19711",closed,compiler/src/dotty/tools/dotc/transform/PostTyper.scala; tests/run/i19711.scala,odersky,2024-02-17T17:38:23Z,2024-02-19T17:33:36Z
19711,20927,"Backport ""Tweak parameter accessor scheme"" to LTS",Backports #19719 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/PostTyper.scala; tests/run/i19711.scala,WojciechMazur,2024-07-01T20:17:55Z,2024-07-02T19:16:49Z
19704,19744,Bump JLine 3.19.0 -> 3.24.1 & sbt 1.9.7 -> 1.9.9,"Fixes #5755  #19704  Tested locally and the difference in behaviour was observed. I'm not sure how to test it with the CI  if anybody has an idea  please let me know.  Also  this issue might be a problem sbt/sbt#7177   Tested as follow: - Observe that the issue in `3.4.1-RC1` ```scala scala-cli repl -S 3.4.1-RC1 Welcome to Scala 3.4.1-RC1 (17.0.7  Java Java HotSpot(TM) 64-Bit Server VM). Type in expressions for evaluation. Or try :help.  scala> class 😃 // defined class 😃  scala> cclas -- [E006] Not Found Error: ----------------------------------------------------- 1 |clas   |^^^^   |Not found: clas - did you mean caps?   |   | longer explanation available when compiling with `-explain` 1 error found  scala> ``` - Publish dotty locally with the correct jline version - Observe that the issue is fixed ```scala scala-cli repl -S 3.4.2-RC1-bin-SNAPSHOT Welcome to Scala 3.4.2-RC1-bin-SNAPSHOT-git-174d4c6 (17.0.7  Java Java HotSpot(TM) 64-Bit Server VM). Type in expressions for evaluation. Or try :help.  scala> class 😃 // defined class 😃  scala> clas -- [E006] Not Found Error: ----------------------------------------------------- 1 |clas   |^^^^   |Not found: clas - did you mean caps?   |   | longer explanation available when compiling with `-explain` 1 error found  scala> ``",closed,compiler/test-coursier/dotty/tools/coursier/CoursierScalaTests.scala; project/Build.scala; project/build.properties,hamzaremmal,2024-02-20T16:04:09Z,2024-02-26T16:52:51Z
19702,19705,Add patch for undefined behavior with `object $`,"Add an ad-hoc patch to make it possible to use the broken `object $` definitions in https://github.com/com-lihaoyi/Ammonite/blob/main/amm/interp/api/src/main/scala/ammonite/Stubs.scala.  This is a temporary patch while these definitions get deprecated. There is not guarantee that the semantics of these objects are correct. There is also no way to adapt the spec to allow there definition without breaking the language. For example consider `object $` and `object $$`  how would we know if the `$$.class` is the class of `$$` or the module class of `$`. We need to know this before we read the file.  Closes #19702",closed,compiler/src/dotty/tools/dotc/classpath/FileUtils.scala; tests/pos/i19702/Macro_1.scala; tests/pos/i19702/Test_2.scala,nicolasstucki,2024-02-16T08:12:21Z,2024-02-19T15:22:55Z
19695,20246,Implement SIP-42 Support for binary integer literals,"Closes #19695  Cherry-picked without changes from reverted PR #19405",closed,compiler/src/dotty/tools/dotc/parsing/Scanners.scala; docs/_docs/reference/other-new-features/binary-literals.md; docs/_spec/01-lexical-syntax.md; docs/sidebar.yml; project/resources/referenceReplacements/sidebar.yml; tests/neg/binaryLiterals.scala; tests/run/binaryLiterals.scala,Kordyjan,2024-04-22T13:23:59Z,2024-04-22T19:24:53Z
19693,20199,Lift Scala Settings from experimental to stabilized,"Fixes: https://github.com/scala/scala3/issues/19693  This is the tracking list from the issue and the status of migraton. - [x] lift to `-X`   - [x] `-Yresolve-term-conflict`   - [x] `-YnoGenericSig`   - [x] `-Ydumpclasses`   - [x] `-YjarCompressionLevel`   - [x] `-YkindProjector`   - [x] `-YdropComments`   - [x] `-YcookComments`   - [x] `-YreadComments`   - [x] `-YnoDecodeStacktraces`   - [x] `-YnoEnrichErrorMessages`   - [x] `-YdebugMacros`   - [ ] `-YjavaTasty`- deprecate in 3.7.0   - [ ] `-YjavaTastyOutput`- deprecate in 3.7.0   - [ ] `-YallowOutlineFromTasty`- deprecate in 3.7.0 - [x] lift to `-W`   - [x] `-Wsafe-init` - [x] to be removed   - [x] `--Yforce-inline-while-typing` // Note: this was already removed by https://github.com/scala/scala3/commit/05eb7f7ae514d1db5e0bece30d63cf5a30164ee8 - [ ] TBD   - [ ] `-YfromTastyIgnoreList` // this flag was not decided   - [x] `-YoutputOnlyTasty`  I suppose 2 last flags that have to be decided are maintained by @bishabosha  Do you know their status ?  Other than that  this PR implemented a deprecation mechanism for the future e.g. ```scala Deprecation(   msg = ""message""    replacedBy = Some(""newMessage"")  ) ```  EDIT: As it was decided  options responsible for pipelining will be retained until 3.7.0. The code is commented and following PR which will deprecate them will be created after merging this one.  EDIT2: `-Xlint` is a very problematic flag. It was added into the compiler in 3.4 bypassing argument verification. Then in the future  when it was deprecated in favour of `-Wshadow` we couldn't exactly map them 1-1  and it was deprecated in following way: - Scala 2: `-Xlint` is valid flag  - Scala pre 3.4: `-Xlint` was skipped as it was not implemented  - Scala post 3.4 pre flag refactor: `-Xlint` was implemented allowing for `all`  `private-shadow` and `type-parameter-shadow` options. It also bypassed argument verification allowing standalone `-Xlint` to be ignored  not reported as error  - Scala post 3.4 post flag refactor: This flag was then deprecated in favour of `-Wshadow`. We didn't want to commit this mistake again and allow standalone `-Wshadow` thus when it was deprecated  we didn't handle it as we should (deprecated option should trigger replacement when possible).  That's why I'm retaining the previous behaviour of `-Xlint`. It will be removed in the future versions as it is already deprecated. ",closed,community-build/community-projects/AsyncFile; community-build/community-projects/Equal; community-build/community-projects/FingerTree; community-build/community-projects/Log; community-build/community-projects/Lucre; community-build/community-projects/Model; community-build/community-projects/Numbers; community-build/community-projects/Serial; community-build/community-projects/Span; community-build/community-projects/discipline; community-build/community-projects/discipline-munit; community-build/community-projects/discipline-specs2; community-build/community-projects/fs2; community-build/community-projects/scala-stm; community-build/community-projects/scodec; community-build/community-projects/verify; community-build/src/scala/dotty/communitybuild/projects.scala; compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/backend/jvm/PostProcessorFrontendAccess.scala; compiler/src/dotty/tools/dotc/Driver.scala; compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/SymbolLoaders.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala,rochala,2024-04-16T12:20:47Z,2024-05-07T12:30:30Z
19692,19923,Cover patterns using `reflect.TypeTest` in isMatchTypeShaped,Fixes #19692 ,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i19692.scala,EugeneFlesselle,2024-03-11T18:09:33Z,2024-03-19T15:01:49Z
19691,19986,Add `versionLine` marker to pom.xml,"Closes #19691   When it is backported to 3.3.x  the string will be changed to ""LTS"". We handle version number in a similar manner.",closed,project/Build.scala,Kordyjan,2024-03-20T12:06:25Z,2024-03-25T12:44:33Z
19681,19690,Java TASTy: use new threadsafe writer implementation,"Also fix bug where Jar entries for -Yjava-tasty-output have backslash on Windows.  Copies implementation from `compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala`  but this time I don't close the jar archive except from within Pickler (when its more explicit that we wont write any longer to the early output jar)  I also no longer perform substitution of `.` by `/` in Pickler  instead leave it to TastyWriter to decide how to process the classname.  fixes #19681 ",closed,compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/io/ClassfileWriterOps.scala; compiler/src/dotty/tools/io/FileWriters.scala,bishabosha,2024-02-14T14:34:57Z,2024-02-14T16:01:32Z
19680,20023,Add note about type mismatch in automatically inserted apply argument,"Started during the last spree with @jan-pieter and @iusildra.  Fixes #19680.",closed,compiler/src/dotty/tools/dotc/reporting/ExploringReporter.scala; compiler/src/dotty/tools/dotc/reporting/Reporter.scala; compiler/src/dotty/tools/dotc/reporting/StoreReporter.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/neg/19680.check; tests/neg/19680.scala; tests/neg/19680b.check; tests/neg/19680b.scala,mbovel,2024-03-26T14:13:03Z,2024-05-01T08:10:40Z
19679,19768,Update base version to 3.4.0,"Part of #19679 Includes #18481",closed,library/src/scala/runtime/ErasedFunction.scala; project/Build.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala,nicolasstucki,2024-02-23T07:56:56Z,2024-02-26T09:30:18Z
19676,19677,Allow macro annotation to transform companion,"### Allow MacroAnnotations to update the companion of a definition  We extend the MacroAnnotation api to allow to modify the companion of a class or an object.  ### Specification  1. Order of expansion  - We expand the definitions in program order.  - We expand the annotations of the outer scope first  then we expand the inner definitions. -  Annotations are expanded from the outer annotation to the inner annotation.   In the following example  we expand the annotations in this order: `a1`  `a2`  `a3`.  ```scala @a1 @a2 class Foo:   @a3 def foo = ??? ``` 2. Expansion of the companion  We always expand the latest available tree. If an annotation defined on `class Foo` changes its companion (`object Foo`) and the `class` is defined before `object`  the expansion of the annotations on the `object` will be performed on the result of the expansion of `class`.  3. The program order is maintained  We maintain the program order in the definitions that were expanded.  4. Backtrack and reprocess  Example:  ```scala @a1 class Foo @a2 object Foo ``` If the `@a2` annotation changes the definitions in `class Foo`  we will rerun the algorithm on the result of this new expansion. Please note that we don't allow to generate code with MacroAnnotations  the reason for rerunning the algorithm is to expand and inline possible macros that we generated.  --- Closes #19676 ",closed,compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/ast/TreeMapWithTrackedStats.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; library/src/scala/annotation/MacroAnnotation.scala; tests/neg-macros/annot-accessIndirect/Macro_1.scala; tests/neg-macros/annot-accessIndirect/Macro_2.scala; tests/neg-macros/annot-crash/Macro_1.scala; tests/neg-macros/annot-empty-result.check; tests/neg-macros/annot-empty-result/Macro_1.scala; tests/neg-macros/annot-error-annot/Macro_1.scala; tests/neg-macros/annot-ill-abort/Macro_1.scala; tests/neg-macros/annot-mod-class-add-top-method/Macro_1.scala; tests/neg-macros/annot-mod-class-add-top-val/Macro_1.scala; tests/neg-macros/annot-mod-top-method-add-top-method/Macro_1.scala; tests/neg-macros/annot-mod-top-method-add-top-val/Macro_1.scala; tests/neg-macros/annot-on-type/Macro_1.scala; tests/neg-macros/annot-result-owner/Macro_1.scala; tests/neg-macros/annot-suspend-cycle.check; tests/neg-macros/annot-suspend-cycle/Macro.scala; tests/neg-macros/i18677-a/Macro_1.scala; tests/neg-macros/i18677-b/Macro_1.scala; tests/neg-macros/i18825/Macro_1.scala; tests/neg-macros/i19676.check; tests/neg-macros/i19676/Macro_1.scala; tests/neg-macros/i19676/Test_2.scala; tests/neg-macros/wrong-owner.check; tests/neg-macros/wrong-owner/Macro_1.scala; tests/pos-macros/annot-dependency-between-modules/Macro_1.scala,hamzaremmal,2024-02-13T12:13:13Z,2024-04-30T06:18:11Z
19675,21159,Add regression test for i19675,"Originally fixed by #19926 Closes #19675  Even though this is a slower sbt scripted test  I think it's worth adding  since it showcases a different issue than what #19926 was fixing  and I do not believe it is reproducible in any way without a scala-2 dependency (so we cannot minimize it into regular compilation test). ",closed,sbt-test/scala2-compat/i19675/UnrelatedDeprecationWarning.scala; sbt-test/scala2-compat/i19675/build.sbt; sbt-test/scala2-compat/i19675/test,jchyb,2024-07-10T13:48:41Z,2024-08-20T13:18:11Z
19675,21493,"Backport ""Add regression test for i19675"" to 3.5.2",Backports #21159 to the 3.5.2 branch.  PR submitted by the release tooling. [skip ci],closed,sbt-test/scala2-compat/i19675/UnrelatedDeprecationWarning.scala; sbt-test/scala2-compat/i19675/build.sbt; sbt-test/scala2-compat/i19675/test,WojciechMazur,2024-08-28T12:05:41Z,2024-08-28T14:31:54Z
19675,22106,"Backport ""Add regression test for i19675"" to LTS",Backports #21159 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,sbt-test/scala2-compat/i19675/UnrelatedDeprecationWarning.scala; sbt-test/scala2-compat/i19675/build.sbt; sbt-test/scala2-compat/i19675/test,WojciechMazur,2024-12-03T19:15:18Z,2024-12-04T17:19:02Z
19671,20321,Make CheckUnused not slow.,"It doesn't mean that it's *fast* yet  but it is already a significant step in that direction. In particular  this goes in the direction of addressing #19671.  The most important commit is ""Simplify the logic for checking unused imports.""  whose commit message follows:  Instead of dealing with entire `tpd.Import`s at the end of the scope  we eagerly flatten them into individual `ImportSelector`s. We store them along with some data  including a mutable flag for whether a selector has been used.  This allows to dramatically simplify `isInImport`  as well as more aggressively cache the resolution of selectors. We also get rid of the `IdentityHashMap`.  The algorithm is still `O(n*m)` where n is the number of imports in a scope  and m the number of references found in that scope. It is not entirely clear to me whether the previous logic was already `O(n*m)` or worse (it may have included an additional `p` factor for the number of possible selections from a given qualifier).  Regardless  it is already quite a bit faster than before  thanks to smaller constant factors.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/warn/i15503i.scala,sjrd,2024-05-02T12:31:34Z,2024-05-07T11:11:31Z
19668,19670,Update syntax.md," 1. Add missing soft modifiers  2. Port changes from multiple type parameter sections to reference. Now that multiple type parameter sections are merged  this is the official syntax. This also covers extension method declarations.  Fixes #19667 Fixes #19668",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/syntax.md; tests/neg/lambda-infer.scala; tests/neg/polymorphic-erased-functions-types.check; tests/neg/polymorphic-erased-functions-types.scala; tests/run/erased-lambdas.scala; tests/run/polymorphic-erased-functions.scala,odersky,2024-02-11T19:11:58Z,2024-02-14T10:14:38Z
19668,20917,"Backport ""Update syntax.md"" to LTS",Backports #19670 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/syntax.md; tests/neg/lambda-infer.scala; tests/run/erased-lambdas.scala,WojciechMazur,2024-07-01T19:29:57Z,2024-07-02T07:35:32Z
19667,19670,Update syntax.md," 1. Add missing soft modifiers  2. Port changes from multiple type parameter sections to reference. Now that multiple type parameter sections are merged  this is the official syntax. This also covers extension method declarations.  Fixes #19667 Fixes #19668",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/syntax.md; tests/neg/lambda-infer.scala; tests/neg/polymorphic-erased-functions-types.check; tests/neg/polymorphic-erased-functions-types.scala; tests/run/erased-lambdas.scala; tests/run/polymorphic-erased-functions.scala,odersky,2024-02-11T19:11:58Z,2024-02-14T10:14:38Z
19667,20917,"Backport ""Update syntax.md"" to LTS",Backports #19670 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; docs/_docs/internals/syntax.md; docs/_docs/reference/syntax.md; tests/neg/lambda-infer.scala; tests/run/erased-lambdas.scala,WojciechMazur,2024-07-01T19:29:57Z,2024-07-02T07:35:32Z
19662,19797,Fix the pickling of `This` inside capture sets,Fixes #19662,closed,compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; tests/pos-custom-args/captures/i19662.scala,Linyxus,2024-02-27T14:05:23Z,2024-02-27T18:59:20Z
19661,19684,Ignore orphan parameters inside a retains annotation during Ycheck,"Fixes #19661.  ## Cause of the issue  As reported in #19661  the following code triggers an assertation failure during Ycheck: ```scala import language.experimental.captureChecking  trait MySet[A]:   def collect[B](pf: PartialFunction[A  B]^): MySet[B]^{this  pf}  class Test:   def f(xs: MySet[Int]) = xs collect { case x => x }   def g(xs: MySet[Int]): MySet[Int] = f(xs) ```  The failure happens when checking the tree `f(xs)`  whose type is `MySet[Int]^{this  PartialFunction[Int  Int]}`. The `checkNoOrphans` function is invoked on `this`  whose type turns out to be an orphan parameter reference (`xs`).  We first inspect the tree outputed by `typer`: ```scala class Test() extends Object() {   def f(xs: MySet[Int]): MySet[Int]^{this  PartialFunction[Int  Int]} =     xs.collect[Int](       {         def $anonfun(x$1: Int): Int =           x$1 match             {               case x @ _ =>                 x:Int             }         closure($anonfun:PartialFunction[Int  Int])       }     )   def g(xs: MySet[Int]): MySet[Int] = this.f(xs) } ```  The problem roots in the signature of the method `f`: in the capture set of its result type  the `this` reference is dangling.  How come? It turns out that the `asSeenFrom` map is not working correctly for the typing of `xs.collect`: ``` (xs.collect : [B](pf: PartialFunction[Int  B]^): MySet[B]^{this  pf}) ``` Instead of replacing `this` with `xs`  `asSeenFrom` keeps `this` untouched. This is what happened: - When mapping `asSeenFrom` on the method type  the `asSeenFrom` map recurses and applies on the annotated type. - When mapping the annotation (`@retains(this  pf)`)  the `asSeenFrom` map derives a `TreeTypeMap` from itself and uses it to map the `tree` of the annotation. - During that  the type of `this` is properly mapped to `xs.type` but the tree `this` is never changed (since the `TreeTypeMap` is an identity on the structure of trees).  To solve this issue  there are (at least) two possibilities: - Refactor the `TypeMap` machineries on annotations to enable it to properly handle these cases. But it is hard: when mapping the capture annotation  we are at a pre-CC phase  so tools for manipulating capture sets are not available. And it is unnecessary: even if we compute these references properly  it gets discarded during CC. - During Ycheck  ignore orphan parameter references inside a normal `@retains` annotation (as opposed to an optimised `CaptureAnnotation`). This feels like a dangerous fix but these `@retains` annotations  even if they are ill-formed  is already treated as being unreliable in CC and get rechecked. Also  CC turns these concrete annotations into optimised `CaptureAnnotation`s  which are not ignored by Ycheck.  ## Fix  So this PR implements the second option: - Ignore orphan parameter errors inside a normal `@retains` annotation during Ycheck. - The check for `CaptureAnnotation`s will not be bypassed.  ",closed,compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; tests/pos-custom-args/captures/i19661.scala,Linyxus,2024-02-13T16:39:01Z,2024-02-15T16:20:59Z
19660,19798,Add updated to SeqViewOps,Fixes #19660,closed,scala2-library-cc/src/scala/collection/SeqView.scala,Linyxus,2024-02-27T14:16:52Z,2024-02-27T18:58:23Z
19657,20894,In selector check  prefix of reference must match import qualifier,"This PR changes the `CheckUnused` phase to rely on the `MiniPhase` API (instead of custom traversal). That improves fidelity to `Context` (instead of approximate scoping).  The phase should work seamlessly with subsequent linting phases (currently  `CheckShadowed`).  It is a goal of the PR to eliminate false reports. It is also a goal not to regress previous work on efficiency.  A remaining limitation of the current approach is that contexts don't provide a nesting level. Practically  this means that for a wildcard import nested below a higher precedence named import  the wildcard is deemed ""unused"". (A more general tool for ""managing"" or ""formatting"" imports could do more to pick a preferred scope.)  This PR adds `-Wunused:patvars`  as forward-ported from Scala 2: it relies on attachments for some details about desugaring  but otherwise uses positions (where only the original patvar has a non-synthetic position).  As in Scala 2  it does not warn about patvars with the ""canonical"" name of a case class element (this is complicated by type tests and the quotes API); other exclusions are to be ported  such as ""name derived from the match selector"".  Support is added for `-Wconf:origin=full.path.selector`  as in Scala 2. That allows  for example: ``` -Wconf:origin=scala.util.chaining.given:s ``` to exclude certain blessed imports from warnings  or to work around false positives (should they arise).  Support is added to `-rewrite` unused imports. There are no options to ""format""; instead  textual deletions preserve existing formatting  except that blank lines are removed and braces removed when there is only one selector.  Notable fixes are to support `compiletime` and `inline`; there are more fixes to pursue in this area.  The commits are not organized around these changes; ~commits are preserved here just for comparison to previous art  so that useful existing behaviors do not regress~.  Unsquashed history included several fixes atop the unrefactored code  but lack of fidelity in superconstructor contexts could not be reasonably worked out. That is why a refactor was eventually required  albeit not undertaken lightly. History is not preserved here because of conflicts on the main branch. It is not yet demonstrated whether the miniphase API will prove more efficient or otherwise better than using a custom traverser  especially if more lints are added later. A particular goal in refactoring was not to lose ""feature knowledge"" gained in the existing effort (derived in part from the Scala 2 lint).  Fixes #19657 Fixes https://github.com/scala/scala3/issues/20520 Fixes https://github.com/scala/scala3/issues/19998 Fixes https://github.com/scala/scala3/issues/18313 Fixes #17371 Fixes #18708 Fixes https://github.com/scala/scala3/issues/21917 Fixes https://github.com/scala/scala3/issues/21420 Fixes https://github.com/scala/scala3/issues/20951 Fixes https://github.com/scala/scala3/issues/19252 Fixes https://github.com/scala/scala3/issues/18289 Fixes https://github.com/scala/scala3/issues/17667 Fixes https://github.com/scala/scala3/issues/17252 Fixes https://github.com/scala/scala3/issues/21807 Fixes https://github.com/scala/scala3/issues/17753 Fixes https://github.com/scala/scala3/issues/17318 Fixes https://github.com/scala/scala3/issues/18564 Fixes https://github.com/scala/scala3/issues/22376 Fixes https://github.com/scala/scala3/issues/21525",closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriters.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/report.scala; compiler/src/dotty/tools/dotc/reporting/Diagnostic.scala; compiler/src/dotty/tools/dotc/reporting/WConf.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/package.scala; compiler/src/dotty/tools/dotc/semanticdb/TypeOps.scala; compiler/src/dotty/tools/dotc/transform/CheckShadowing.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/localopt/FormatChecker.scala; compiler/src/dotty/tools/dotc/typer/Deriving.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/dotty/tools/dotc/util/ReusableInstance.scala; compiler/src/dotty/tools/dotc/util/SourceFile.scala; compiler/src/dotty/tools/dotc/util/StackTraceOps.scala; compiler/src/dotty/tools/dotc/util/chaining.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/utils.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; library/src/scala/deriving/Mirror.scala,som-snytt,2024-06-29T06:50:06Z,2025-01-28T19:29:30Z
19652,19816,Add nightly tests for `scala2-library-cc-tasty`,"Only test a subset of tests that are known to currently work.  [test_scala2_library_tasty]  All `pos` tests work now. We will increase coverage to all tests once failures in https://github.com/lampepfl/dotty/issues/19652#issuecomment-1969370722 are fixed.",closed,.github/workflows/ci.yaml,nicolasstucki,2024-02-28T16:42:36Z,2024-02-28T21:28:01Z
19652,19873,Various fixes to stdlib-cc,"fixes #19819  fixes #19652  fixes #19847  supersedes #19858 ",closed,compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; scala2-library-cc/src/scala/collection/Seq.scala; scala2-library-cc/src/scala/collection/SeqView.scala; scala2-library-cc/src/scala/collection/generic/IsSeq.scala; tests/run/enrich-gentraversable.scala,Linyxus,2024-03-04T16:38:15Z,2024-03-06T14:28:38Z
19642,22391,Fix annotations being not expected in the middle of an array type by java parser,"Closes #19642  Currently Java parser doesn't expect annotation between type name and square brackets in an array type  or between pairs of square brackets in nested array types.  I added a call to corresponding parser method `annotations` when parsing array types.  I also changed an unnecessary `var` to `val`  as IDEA suggested.",closed,compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; tests/pos/i19642/Valid.java; tests/pos/i19642/i19642.java,fan-tom,2025-01-16T22:03:37Z,2025-01-21T10:08:10Z
19641,19654,Drop special treatment of function types in overloading resolution,"Fixes #19641   How we got here:  Originally  overloading resolution for types that were not applied was handled like this: ```scala       case defn.FunctionOf(args  resultType  _) =>         narrowByTypes(alts  args  resultType)        case pt =>         val compat = alts.filterConserve(normalizedCompatible(_  pt  keepConstraint = false))         if (compat.isEmpty)           /*            * the case should not be moved to the enclosing match            * since SAM type must be considered only if there are no candidates            * For example  the second f should be chosen for the following code:            *   def f(x: String): Unit = ???            *   def f: java.io.OutputStream = ???            *   new java.io.ObjectOutputStream(f)            */           pt match {             case SAMType(mtp  _) =>               narrowByTypes(alts  mtp.paramInfos  mtp.resultType)             case _ =>               // pick any alternatives that are not methods since these might be convertible               // to the expected type  or be used as extension method arguments.               val convertible = alts.filterNot(alt =>                   normalize(alt  IgnoredProto(pt)).widenSingleton.isInstanceOf[MethodType])               if convertible.length == 1 then convertible else compat           }         else compat ``` Note the warning comment that the case for SAM types should not be moved out  yet we do exactly the same thing for plain function types. I believe this was simply wrong  but it was not discovered in a test.  Then in #16507 we changed the `defn.FunctionOf` extractor so that aliases of function types were matched by it. This triggered test failures since we now hit the wrong case with aliases of function types.  In #18286  we moved the extractor test around  but that was not enough  as #19641 shows. Instead the test for `FunctionOf` should be aligned with the test for SAM case. But it turns out that's not even necessary since the  preceding `val compat = ...` handles function prototypes correctly by simulating an eta expansion. So in the end we could simply delete the problematic case. ",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/run/i19641.scala; tests/run/i4364a.scala,odersky,2024-02-09T10:05:42Z,2024-02-12T16:45:21Z
19637,19659,More careful type variable instance improvements,"The previous code tried to recursively apply the current instance of FullyDefinedAccumulator to the prospective instance type. This can have unforeseen side-effects  as i19637 shows. We now are more conservative: We check that the prospective instance type is already fully defined without the possibility to instantiate more type variables. This still passes the test cases that type variable improvement solves and avoids the problem with #19637.  Fixes #19637",closed,compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i19637.scala,odersky,2024-02-09T14:50:24Z,2024-02-09T16:56:36Z
19633,20013,Fix #19633: Add regression test.,Not sure what fixed it  but it seems to be good now.,closed,tests/pos/i19633.scala,sjrd,2024-03-25T12:56:22Z,2024-03-25T14:38:15Z
19633,21019,"Backport ""Fix #19633: Add regression test."" to LTS",Backports #20013 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos/i19633.scala,WojciechMazur,2024-07-04T13:33:03Z,2024-07-05T13:21:53Z
19629,19838,used derived types to type arguments of dependent function type,"We don't need to repeat the tree twice  instead derive a type tree from the original tree  and reuse its spans.  fixes #19629 ",closed,compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i19629.scala; tests/run/i19629/Test_2.scala; tests/run/i19629/lib_1.scala,bishabosha,2024-03-01T11:04:43Z,2024-03-01T18:08:59Z
19623,19646,Inline transparent implicit parameters when typing Unapply trees,"We needed to delay the inlining of the transparent inline when typing the unapply function application. We used the NoInline mode  but this also stopped the inlining of the arguments of the unapply. To fix this we target more precisely the inlining of the unapply method and not the implicit arguments. To do this we detect the dummy argument that is used type the unapply as an application  before it is transformed into a pattern.  Fixes #19623 Fixes solution added in #19380",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i19623.scala,nicolasstucki,2024-02-08T09:44:45Z,2024-02-27T20:38:22Z
19623,21048,"Backport ""Inline transparent implicit parameters when typing Unapply trees"" to LTS",Backports #19646 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i19623.scala,WojciechMazur,2024-07-05T15:45:34Z,2024-07-05T21:28:42Z
19619,19747,Fix java typer problems with inner class references and raw types,"Tests changes against source dependency  Tasty dependency  and class dependency.  fixes #19619",closed,compiler/src/dotty/tools/dotc/core/ContextOps.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; sbt-test/pipelining/Yjava-tasty-paths/a/InnerClass.java; sbt-test/pipelining/Yjava-tasty-paths/a/InnerClassGen.java; sbt-test/pipelining/Yjava-tasty-paths/a/InnerClassSub.java; sbt-test/pipelining/Yjava-tasty-paths/a/RawTypes.java; sbt-test/pipelining/Yjava-tasty-paths/a/package.scala; sbt-test/pipelining/Yjava-tasty-paths/b/Test.scala; sbt-test/pipelining/Yjava-tasty-paths/build.sbt; sbt-test/pipelining/Yjava-tasty-paths/project/DottyInjectedPlugin.scala; sbt-test/pipelining/Yjava-tasty-paths/test; tests/neg/i19619/InnerClass.java; tests/neg/i19619/InnerClassGen.java; tests/neg/i19619/Test.scala; tests/run/i19619/InnerClass.java; tests/run/i19619/InnerClassGen.java; tests/run/i19619/InnerClassSub.java; tests/run/i19619/RawTypes.java; tests/run/i19619/Test.scala,bishabosha,2024-02-20T17:31:51Z,2024-02-22T14:54:13Z
19607,19627,Fix #19607: Allow to instantiate *wildcard* type captures to TypeBounds.,"When matching in a match type  if we encounter a `TypeBounds` scrutinee and we have a wildcard capture on the right  we used to pick the `hi` bound ""because anything between between `lo` and `hi` would work"".  It turns out that *nothing* between `lo` and `hi` works when the type constructor is invariant. Instead  we must be keep the type bounds  and instantiate the wildcard capture to a wildcard type argument.  This is fine because a wildcard capture can never be referred to in the body of the case. However  previously this could never happen in successful cases  and we therefore used the presence of a `TypeBounds` in the `instances` as the canonical signal for ""fail as not specific"". We now use a separate `noInstances` list to be that signal.  This change departs from the letter of the spec but not from its spirit. As evidenced by the wording  the spec always *intended* for ""the pick"" to one that would always succeed. We wrongly assumed `hi` was always working.  ---  Companion PR to fix the spec/SIP: https://github.com/scala/improvement-proposals/pull/77",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i19607.scala,sjrd,2024-02-06T09:34:21Z,2024-02-15T16:05:10Z
19604,19605,Refine handling of StaleSymbol type errors,"Regular StaleSymbol can be caught and masked in some situations. Stale symbol type errors need to allow the same.  Fixes #19604",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; tests/pos/i19604/ZSet.scala; tests/pos/i19604/core.scala; tests/pos/i19604/macro.scala; tests/pos/i19604/prelude.scala,odersky,2024-02-03T15:41:56Z,2024-02-05T09:56:47Z
19604,20898,"Backport ""Refine handling of StaleSymbol type errors"" to LTS",Backports #19605 to the LTS branch.  PR submitted by the release tooling.,closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; tests/pos/i19604/ZSet.scala; tests/pos/i19604/core.scala; tests/pos/i19604/macro.scala; tests/pos/i19604/prelude.scala,WojciechMazur,2024-06-30T22:06:08Z,2024-07-01T08:43:04Z
19601,19645,Fix module symbol recovery from `NoClassDefFoundError`,Fixes #19601,closed,compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; tests/neg-macros/i19601/Macro.scala; tests/neg-macros/i19601/Test.scala,nicolasstucki,2024-02-08T08:12:23Z,2024-02-08T17:41:45Z
19601,20889,"Backport ""Fix module symbol recovery from `NoClassDefFoundError`"" to LTS",Backports #19645 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; tests/neg-macros/i19601/Macro.scala; tests/neg-macros/i19601/Test.scala,WojciechMazur,2024-06-28T18:20:12Z,2024-07-01T08:42:19Z
19594,19737,Attempt implicit search for old style `implicit` parameters in Application matchArgs,Fixes #19594,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/neg/i19594.check; tests/neg/i19594.scala,EugeneFlesselle,2024-02-19T16:43:14Z,2024-02-25T17:03:07Z
19586,19603,Avoid cycles when loading standard library under cc,"Two measures:   - Introduce a new annotation @retainsCap that's equivalent to `@retains(cap)` but that does not need to load Seq to analyze a vararg argument.  - Don't use `&` when computing self types of classes with explicitly declared capturing self types.  Partial fix of #19586 ",closed,compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CapturingType.scala; compiler/src/dotty/tools/dotc/cc/RetainingType.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; library/src/scala/annotation/retains.scala; tests/run-tasty-inspector/stdlibExperimentalDefinitions.scala; tests/semanticdb/metac.expect,odersky,2024-02-03T13:13:58Z,2024-02-04T20:22:19Z
19586,19615,Enable some regression tests on Scala 2 library CC tasty,"Tests the fixes in #19603. Follow-up of #19586.  Tests `scala3-bootstrapped/testCompilation i3`  this is a subset that currently works and use to fail.",closed,.github/workflows/ci.yaml,nicolasstucki,2024-02-05T10:33:31Z,2024-02-05T12:36:14Z
19578,19583,Fix Java record problems (#19578) and (#19386),"This is a dependency of #19577 and should be reviewed and merged first.  fixes #18639 fixes #19386 fixes #19578",closed,compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-java16+/i19386/FromScala.scala; tests/pos-java16+/i19386/R1.java; tests/pos-java16+/java-records/FromScala.scala; tests/pos-java16+/java-records/R0.java; tests/pos-java16+/java-records/R4.java,yilinwei,2024-01-31T21:24:05Z,2024-02-09T14:40:01Z
19578,20890,"Backport ""Fix Java record problems (#19578) and (#19386)"" to LTS",Backports #19583 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos-java16+/i19386/FromScala.scala; tests/pos-java16+/i19386/R1.java; tests/pos-java16+/java-records/FromScala.scala; tests/pos-java16+/java-records/R0.java; tests/pos-java16+/java-records/R4.java,WojciechMazur,2024-06-28T18:20:42Z,2024-07-01T08:42:28Z
19560,19567,Fix possible crash in Desugar,This might fix #19560.,closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala,odersky,2024-01-30T12:11:45Z,2024-01-30T13:27:55Z
19560,20865,"Backport ""Fix possible crash in Desugar"" to LTS",Backports #19567 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala,WojciechMazur,2024-06-28T16:22:57Z,2024-07-01T08:29:21Z
19548,19558,Heal occurrences of => T between ElimByName and Erasure,"There's a window of vulnerability between ElimByName and Erasure where some ExprTypes `=> T` that appear as parameters of function types are not yet converted to by-name functions `() ?=> T`. These would cause an assertion violation when used as operands of & or |. We fix this on the fly when forming these types in TypeComparer. As explained in ElimByName  we can't fix it beforehand by mapping all occurrences of `=> T` to `() ?=> T` since that could lead to cycles.  Fixes #19548",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i19548.scala,odersky,2024-01-29T11:35:03Z,2024-01-31T09:54:10Z
19548,20871,"Backport ""Heal occurrences of => T between ElimByName and Erasure"" to LTS",Backports #19558 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i19548.scala,WojciechMazur,2024-06-28T17:11:24Z,2024-07-01T08:30:12Z
19539,19579,Check and enter missing symbols in MacroAnnotations only for definitions,"Fixes #19537 Fixes #19539 ",closed,compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; tests/pos-macros/i19537/Macro_1.scala; tests/pos-macros/i19537/Test_2.scala; tests/pos-macros/i19539/Macro_1.scala; tests/pos-macros/i19539/Test_2.scala,pweisenburger,2024-01-31T17:25:54Z,2024-02-01T07:43:11Z
19537,19579,Check and enter missing symbols in MacroAnnotations only for definitions,"Fixes #19537 Fixes #19539 ",closed,compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; tests/pos-macros/i19537/Macro_1.scala; tests/pos-macros/i19537/Test_2.scala; tests/pos-macros/i19539/Macro_1.scala; tests/pos-macros/i19539/Test_2.scala,pweisenburger,2024-01-31T17:25:54Z,2024-02-01T07:43:11Z
19530,19550,Make eraseInfo work for classes with EmptyScopes,Fixes #19530,closed,compiler/src/dotty/tools/dotc/core/Scopes.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/pos/i19530.scala,odersky,2024-01-27T20:41:20Z,2024-01-30T16:06:42Z
19528,19536,Fix #19528: Actually remove Dynamic from interfaces of native JS classes.,One boolean value was the wrong way around for native JS classes and traits. That caused `scala.Dynamic` not to be removed from the super-interfaces of native JS classes at the IR level  causing the linking error.,closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; tests/sjs-junit/test/org/scalajs/testsuite/jsinterop/CustomDynamicTestScala3.scala,sjrd,2024-01-26T08:31:18Z,2024-01-30T13:41:22Z
19528,19979,Backport fix #19536 of Scala.js Dynamic ,Backport cherry-pick  as discussed in #19536,closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; tests/sjs-junit/test/org/scalajs/testsuite/jsinterop/CustomDynamicTestScala3.scala,OndrejSpanel,2024-03-19T09:19:40Z,2024-04-08T08:37:50Z
19528,20866,"Backport ""Fix #19528: Actually remove Dynamic from interfaces of native JS classes."" to LTS",Backports #19536 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; tests/sjs-junit/test/org/scalajs/testsuite/jsinterop/CustomDynamicTestScala3.scala,WojciechMazur,2024-06-28T16:23:08Z,2024-07-01T08:29:29Z
19527,19533,classfile reader: handle JDK 9+ constant types in constant pool,"forward-port of scala/scala#10675 and scala/scala#8595 references scala/bug#12396 and scala/bug#11635 fixes lampepfl/dotty#19527 (""bad constant pool tag 17"") also fixes unreported potential ""bad constant pool tag 19"" and ""bad constant pool tag 20"" errors  should be backported to 3.3.x  IMO",closed,compiler/src/dotty/tools/dotc/core/classfile/ClassfileConstants.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/test/dotty/tools/backend/jvm/ClassfileParserTest.scala; tests/pos/t12396/A_1.java; tests/pos/t12396/B_2.scala,SethTisue,2024-01-26T00:27:34Z,2024-01-30T19:31:44Z
19526,19688,Add regression test and imporve -Xprint-suspension message,Closes https://github.com/lampepfl/dotty/issues/19526,closed,compiler/src/dotty/tools/dotc/Run.scala; tests/neg-macros/annot-suspend-cycle.check; tests/neg-macros/i19526.check; tests/neg-macros/i19526/Macro.scala; tests/neg-macros/i19526/Test.scala; tests/neg-macros/macros-in-same-project-4.check; tests/pos-macros/i19526b/Macro.scala; tests/pos-macros/i19526b/Test.scala,nicolasstucki,2024-02-14T09:14:07Z,2024-02-16T14:53:10Z
19526,20922,"Backport ""Add regression test and imporve -Xprint-suspension message"" to LTS",Backports #19688 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/Run.scala; tests/neg-macros/annot-suspend-cycle.check; tests/neg-macros/i19526.check; tests/neg-macros/i19526/Macro.scala; tests/neg-macros/i19526/Test.scala; tests/neg-macros/macros-in-same-project-4.check; tests/pos-macros/i19526b/Macro.scala; tests/pos-macros/i19526b/Test.scala,WojciechMazur,2024-07-01T20:05:25Z,2024-07-02T19:14:59Z
19524,19884,Fix #19524: Protect use of `HeaderIdGenerator` with `synchronized`.,Hopefully this is the only source of the race condition that we have been observing.,closed,scaladoc/src/dotty/tools/scaladoc/tasty/comments/markdown/SectionRenderingExtension.scala,sjrd,2024-03-05T12:32:12Z,2024-03-05T15:38:09Z
19524,20978,"Backport ""Fix #19524: Protect use of `HeaderIdGenerator` with `synchronized`."" to LTS",Backports #19884 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,scaladoc/src/dotty/tools/scaladoc/tasty/comments/markdown/SectionRenderingExtension.scala,WojciechMazur,2024-07-02T22:05:35Z,2024-07-03T08:38:26Z
19506,19512,Handle default implicits to context parameters under -3.4-migration,"Synthesized calls for default implicits need a using clause when the method is an implicit method with a context bound parameter  but only in in 3.4-migration. Before this PR we still generated a normal empty parameter list.  Also  we can't rewrite adding a `using` clause if the argument list is empty  since we are lacking precise position info.  Fixes #19506",closed,compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/typer/Migrations.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i19506.scala,odersky,2024-01-22T18:15:25Z,2024-01-23T11:54:53Z
19506,19518,"Backport ""Handle default implicits to context parameters under -3.4-migration""",Backports #19512 ,closed,compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/typer/Migrations.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i19506.scala,Kordyjan,2024-01-23T11:57:16Z,2024-01-24T16:04:09Z
19506,19550,Make eraseInfo work for classes with EmptyScopes,Fixes #19530,closed,compiler/src/dotty/tools/dotc/core/Scopes.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/pos/i19530.scala,odersky,2024-01-27T20:41:20Z,2024-01-30T16:06:42Z
19506,20868,"Backport ""Make eraseInfo work for classes with EmptyScopes"" to LTS",Backports #19550 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Scopes.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/pos/i19530.scala,WojciechMazur,2024-06-28T16:24:40Z,2024-07-01T08:29:49Z
19505,19509,Do not propagate `@tailrec` to exported methods,Fixes #19505,closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/export-main.scala; tests/pos/i19505.scala; tests/run-macros/annot-export/Macro_1.scala; tests/run-macros/annot-export/Test_2.scala; tests/warn/i19505.scala,nicolasstucki,2024-01-22T14:26:10Z,2024-01-23T16:49:40Z
19505,20851,"Backport ""Do not propagate `@tailrec` to exported methods"" to LTS",Backports #19509 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/export-main.scala; tests/pos/i19505.scala; tests/run-macros/annot-export/Macro_1.scala; tests/run-macros/annot-export/Test_2.scala; tests/warn/i19505.scala,WojciechMazur,2024-06-27T12:26:02Z,2024-06-28T11:24:27Z
16639,17160,Improve -Wunused: locals  privates with unset vars warning #16639,"This PR is related to my Bachelor Semester Project  supervised by @anatoliykmetyuk.  The latter consist in improving and implementing more Scala 3 linter options (see  #15503)  with #16639 as a starting issue fixed in this PR.  - During the traversal in CheckUnused.scala (Miniphase & local TreeTraverser)  when reaching an `Assign` case  symbols are collected as set  and then used to filter used locals and privates variable at reporting time. - Adapt test suit  and Add more test accordingly. - Note that for a same variable the unused warning always has priority and shadows the unset warning.  That feature follows the Scala 2 `-Ywarn-unused:<args>` behavior.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/neg-custom-args/fatal-warnings/i15503b.scala; tests/neg-custom-args/fatal-warnings/i15503c.scala; tests/neg-custom-args/fatal-warnings/i15503i.scala; tests/neg-custom-args/fatal-warnings/i16639a.scala; tests/pos/i16639false-pos-on-trait.scala,schuetzcarl,2023-03-28T12:37:40Z,2023-05-16T14:24:18Z
16636,16570,Use tree checker in macros,"Trees are only checked if `-Xcheck-macros` is enabled.  Fixes:  - Add missing positions to `{ValDef Bind}.apply`  - Inline by-name ascribed param  - Unbound type variables after implicit search  - Fixes #15779  - Fixes #16636",closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/neg-macros/annot-mod-top-method-add-top-method/Macro_1.scala; tests/pos-macros/exprSummonWithTypeVar/Macro_1.scala; tests/pos-macros/exprSummonWithTypeVar/Test_2.scala; tests/pos-macros/i15779/Macro_1.scala; tests/pos-macros/i15779/Test_2.scala; tests/pos-macros/i16636/Macro_1.scala; tests/pos-macros/i16636/Test_2.scala; tests/pos-macros/macro-inline-by-name-cast/Macro_1.scala; tests/pos-macros/macro-inline-by-name-cast/Test_2.scala,nicolasstucki,2022-12-21T17:13:29Z,2023-01-16T10:30:16Z
16634,18437,Coverage: mark case bodies as branches; don't ignore branches with synthetic spans,"Marking bodies of CaseDefs as branches seems like an uncontroversial change  it was probably an oversight.  Not ignoring synthetic spans when creating coverage calls in branches seems like a good trade off. There might be some auto-generated `else ()` interpreted as branches  but Scala introduces quite a lot of synthetic trees that wrap non-synthetic trees (e.g. implicit classes). Also  it looks like Scala 2 includes those compiler-generated `else` branches in coverage. (Another possibility here would be to also check if the span is zero extent  but that approach would be different to the Scala 2 one)  partial fix for https://github.com/lampepfl/dotty/issues/16634",closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/MatchNumbers.scoverage.check; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/scoverage-samples-case.scala; tests/coverage/pos/scoverage-samples-case.scoverage.check; tests/coverage/pos/scoverage-samples-implicit-class.scala; tests/coverage/pos/scoverage-samples-implicit-class.scoverage.check,KacperFKorban,2023-08-21T13:17:03Z,2023-08-22T15:58:15Z
16634,19232,"Backport ""Coverage: mark case bodies as branches; don't ignore branches with synthetic spans"" to LTS",Backports #18437 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/MatchNumbers.scoverage.check; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/scoverage-samples-case.scala; tests/coverage/pos/scoverage-samples-case.scoverage.check; tests/coverage/pos/scoverage-samples-implicit-class.scala; tests/coverage/pos/scoverage-samples-implicit-class.scoverage.check,Kordyjan,2023-12-11T12:33:34Z,2023-12-13T16:31:34Z
16630,18663,fix scala 2 macros in traits with type parameters,"Fixes https://github.com/lampepfl/dotty/issues/16630  This PR fixes the above issue which affects cross scala2/3 projects that use a common macro library as per https://docs.scala-lang.org/scala3/guides/migration/tutorial-macro-mixing.html   e.g. scala-logging is blocked from fixing this issue https://github.com/lightbend-labs/scala-logging/issues/317  The fix makes the scala 2 macro check read the Erased flag from the initial flags rather than completing the RHS first.  This will work in the case of scala 2 macros because the erased flag is explicitly added rather than being in the source code.  However it relies on using an ""UNSAFE"" value.  More background on my investigation:  1. The scala 2 macros are identified by being flagged as Macro and Erased https://github.com/lampepfl/dotty/blob/f2aa33c3643655fd9a48a1e448d7d79e6e52ea79/compiler/src/dotty/tools/dotc/ast/Desugar.scala#L275 3. Namer.completeConstructor indexes the constructor and then other statements (the macros here) and then completes the constructor symbol. https://github.com/lampepfl/dotty/blob/7c0a848d0ed6330873a39129e6d02da169150fa7/compiler/src/dotty/tools/dotc/typer/Namer.scala#L1458-L1461 5. When we index a statement  we check it's not a scala 2 macro so that we don't enter it into the symbol table for the scope. https://github.com/lampepfl/dotty/blob/7c0a848d0ed6330873a39129e6d02da169150fa7/compiler/src/dotty/tools/dotc/typer/Namer.scala#L307-L308 7. However  although the Erased flag is actually set in the SymDenotation at init time  Erased is not in the AfterLoadFlags that are in Flags.scala  meaning that ensureCompleted() is called on the SymDenotation in order to populate the final flag set. https://github.com/lampepfl/dotty/blob/e1a136a0076e260d1e12ca397f0a2816cbdc9015/compiler/src/dotty/tools/dotc/core/SymDenotations.scala#L128 9. Since we are still only  part way through the process of completing the constructor  I don't think it's correct to try to complete the scala 2 macro yet.  It actually fails because the type parameter A in the (trait?) definition does not have the actual type A as an attachment yet. https://github.com/lampepfl/dotty/blob/9464bf008694506250f3fd061d7de27f1dea5d38/compiler/src/dotty/tools/dotc/typer/Typer.scala#L2133  I think the fix without any restructuring must be to check the Erased flag without needing to call ensureCompleted on the symbol  but I'm not sure if there's a better way to identify scala 2 macros at this point in the code.  I managed to get it to compile by any of these:  - hacking Namer.completeConstructor to ensure the constructor symbol is completed before indexing the rest of the statements  but that seems backwards. i.e. add `symbolOfTree(constr).ensureCompleted()` between these two lines https://github.com/lampepfl/dotty/blob/7c0a848d0ed6330873a39129e6d02da169150fa7/compiler/src/dotty/tools/dotc/typer/Namer.scala#L1458-L1459 - adding Erased to Flags.FromStartFlags but I think this is missing for a good reason - things can become Erased later in the process. https://github.com/lampepfl/dotty/blob/6ff1774363208cfdd7e4d7f4eac60aad68c52cb1/compiler/src/dotty/tools/dotc/core/Flags.scala#L466 - This PR implementation.  I have added a minimal test to the macros suite  which now passes.   I managed to make something that detects the bug and doesn't depend on scala-reflect library  however beyond compiling we don't know if it actually did something useful.  Tips on making a better test case would be appreciated!  Any tips or corrections would be useful",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; tests/pos-macros/i16630.scala,johnduffell,2023-10-07T15:13:13Z,2023-10-12T14:21:31Z
16615,16773,Fix #16615 - crashes of path dependent types in spliced Type.of,"Fixes #16615  Previously it was assumed that the type in Type.of could be captured as a whole  which meant that path dependent types for which a separate @SplicedType hole definitions were included in a block  would end up with missing references.  Now when find a block in Type.of  we try to analise all parts of the type separately  adding additional hole definitions to the block as necessary. For types that can be captured as a whole (those which did not have a block generated previously  meaning they do not include any @SplicedType hole definitions)  old method is used.  In essence  ended up replicating the trees proposed in the original issue thread  which were incredibly helpful.",closed,compiler/src/dotty/tools/dotc/transform/Splicing.scala; tests/pos-macros/i16615.scala,jchyb,2023-01-27T09:28:18Z,2023-02-09T09:27:52Z
16610,19555,fix(#16610): warn ignored Scaladoc on multiple enum cases,"close #16610   Before this commit  the compiler ignored Scaladoc comment on multiple enum cases without warning.  This is partly expected because the case to which the doc is attached is ambiguous  but we should at least warn users that the comment is ignored by compiler due to ambiguity and they should take an action if they want the doc to be displayed.",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/warn/i16610.check; tests/warn/i16610.scala,i10416,2024-01-28T13:13:39Z,2024-03-11T13:14:15Z
16610,20983,"Backport ""fix(#16610): warn ignored Scaladoc on multiple enum cases"" to LTS",Backports #19555 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/warn/i16610.check; tests/warn/i16610.scala,WojciechMazur,2024-07-02T22:54:18Z,2024-07-03T08:38:56Z
16588,17024,Fix: Correct the nightly version cut off in scaladoc,"In this commit I corrected the cut off of the nightly version by changing :  - The width in auto for desktop version - The max-width in `calc(12 * var(--base-spacing));` for better responsiveness   Desktop Before: <img width=""994"" alt=""Screenshot 2023-03-01 at 11 04 44"" src=""https://user-images.githubusercontent.com/44496264/222109159-79249ec2-359c-4782-9dcc-88c75ca10454.png"">  After: <img width=""1001"" alt=""Screenshot 2023-03-01 at 11 04 27"" src=""https://user-images.githubusercontent.com/44496264/222109141-630a85ef-d2c2-4312-b143-d54f97c2506e.png"">  Mobile Before: <img width=""409"" alt=""Screenshot 2023-03-01 at 11 13 07"" src=""https://user-images.githubusercontent.com/44496264/222109747-253c685e-44ea-4e5d-8330-f2576c729895.png"">  After: <img width=""409"" alt=""Screenshot 2023-03-01 at 11 07 12"" src=""https://user-images.githubusercontent.com/44496264/222108968-ae3cc503-cca2-4a65-a76d-9d7e1006e131.png"">  Fixes: #16588",closed,scaladoc/resources/dotty_res/styles/theme/layout/header.css,Dedelweiss,2023-02-28T16:13:00Z,2023-03-02T10:17:44Z
16582,16749,Improve error message for CyclicReference in macros,Closes #16582,closed,compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; tests/neg-macros/i16582.check; tests/neg-macros/i16582/Macro_1.scala; tests/neg-macros/i16582/Test_2.scala,nicolasstucki,2023-01-23T10:17:56Z,2023-02-16T09:35:26Z
16555,16614,Stabilize new lazy vals,Resolve #16555 ,closed,community-build/community-projects/scala-parallel-collections; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/transform/LazyVals.scala; compiler/test/dotc/run-lazy-vals-tests.allowlist; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; library/src/scala/runtime/LazyVals.scala; project/MiMaFilters.scala; tests/printing/transformed/lazy-vals-legacy.flags; tests/printing/transformed/lazy-vals-new.flags; tests/run-custom-args/tasty-inspector/stdlibExperimentalDefinitions.scala,szymon-rd,2023-01-04T12:39:31Z,2023-01-09T17:18:45Z
16544,16552,Reuse typed prefix for `applyDynamic` and `applyDynamicNamed`,Fixes #16544,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i16544a.scala; tests/pos/i16544b.scala; tests/pos/i16544c.scala; tests/pos/i16544d.scala,nicolasstucki,2022-12-19T09:50:05Z,2022-12-20T06:44:26Z
16532,16572,Add error hint on local inline def used in quotes,Closes #16532,closed,compiler/src/dotty/tools/dotc/transform/PCPCheckAndHeal.scala; tests/neg-macros/i16532.check; tests/neg-macros/i16532.scala,nicolasstucki,2022-12-22T10:54:44Z,2022-12-23T15:59:13Z
16522,18133,Compile quote patterns directly into QuotePattern AST,"Fixes #14708 Fixes #16522 Fixes #18125 Fixes #18250",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/quoted/QuotePatterns.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; tests/neg-macros/i16522.check; tests/neg-macros/i16522.scala; tests/neg-macros/i6997b.scala; tests/pos-macros/i14708.scala; tests/pos-macros/i16522.scala; tests/pos-macros/i18125.scala; tests/pos-macros/i18125b.scala; tests/pos-macros/i18250.scala; tests/pos-macros/mirrorQuotePattern.scala; tests/pos-macros/mirrorQuotePattern2.scala,nicolasstucki,2023-07-04T13:00:29Z,2023-07-25T12:46:38Z
16508,16510,Do not add dummy RHS to abstract inline methods,Fixes #16508,closed,compiler/src/dotty/tools/dotc/transform/PickleQuotes.scala,nicolasstucki,2022-12-13T10:19:01Z,2022-12-13T11:33:52Z
16506,16511,Handle context function arguments in overloading resolution,"Fixes #16506  We now handle the cases where an argument of an overloaded method is a context closure. The closure must be given implicitly. It cannot be inferred since at the time where the argument is typed  there is no expected expected type to expand it to a context closure.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i16506.scala,odersky,2022-12-13T11:43:35Z,2022-12-15T12:55:31Z
16502,18498,Coverage: Do not lift applications of context functions,closes lampepfl#16502,closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/i16502.scala; tests/coverage/pos/i16502.scoverage.check,KacperFKorban,2023-09-01T11:44:25Z,2023-09-04T08:50:34Z
16502,19235,"Backport ""Coverage: Do not lift applications of context functions"" to LTS",Backports #18498 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/i16502.scala; tests/coverage/pos/i16502.scoverage.check,Kordyjan,2023-12-11T12:34:01Z,2023-12-13T16:31:50Z
16500,16501,Allow case classes with up to 254 parameters,"To achieve this  we need to avoid linear composition of conditions in the `equals` method.  Fixes #16500",closed,compiler/src/dotty/tools/dotc/core/Decorators.scala; compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; tests/pos/i16500.scala,odersky,2022-12-11T15:37:45Z,2022-12-12T09:58:05Z
16497,16499,Warn on inline given aliases with functions as RHS,"```scala     inline given a: Conversion[String  Item] = Item(_) ``` will now produce this warning: ```  5 |  inline given a: Conversion[String  Item] = Item(_)    |                                             ^^^^^^^    |An inline given alias with a function value as right-hand side can significantly increase    |generated code size. You should either drop the `inline` or rewrite the given with an    |explicit `apply` method.    |----------------------------------------------------------------------------    | Explanation (enabled by `-explain`)    |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -    | A function value on the right-hand side of an inline given alias expands to    | an anonymous class. Each application of the inline given will then create a    | fresh copy of that class  which can increase code size in surprising ways.    | For that reason  functions are discouraged as right hand sides of inline given aliases.    | You should either drop `inline` or rewrite to an explicit `apply` method. E.g.    |    |     inline given Conversion[A  B] = x => x.toB    |    | should be re-formulated as    |    |     inline given Conversion[A  B] with    |       def apply(x: A) = x.toB    | ``` Fixes #16497 Alternative to #16498",closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg-custom-args/fatal-warnings/inline-givens.scala,odersky,2022-12-10T18:06:24Z,2022-12-15T10:21:41Z
16488,16490,Don't search implicit arguments in singleton type prefix,"In a singleton type `f.type`  if `f` is a context function value  don't complete with implicit arguments.  Fixes #16488",closed,compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i16488.scala,odersky,2022-12-09T18:10:20Z,2022-12-12T10:17:04Z
16486,16489,Don't rely on isProvisional to determine whether atoms computed,"isProvisional can flip at unpredictable points  so we cannot rely on it to be stable between the call to `ensureAtomsComputed` and after it.  Fixes #16486",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i16486/defs_1.scala; tests/pos/i16486/usage_2.scala,odersky,2022-12-09T16:36:02Z,2022-12-12T09:16:45Z
16484,16485,Fix curried overloading resolution for polymorphic methods,Fixes #16484,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i16484.scala,odersky,2022-12-09T14:45:12Z,2022-12-09T17:08:49Z
16484,16576,"Backports ""Fix curried overloading resolution for polymorphic methods""",Backports #16485,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i16484.scala,Kordyjan,2022-12-22T13:28:40Z,2022-12-22T15:55:40Z
16474,16477,Only include accessible base classes in orDominator,"By joining union types we could previously uncover inaccessible base classes that could lead to access errors at runtime. We now filter out such classes when computing the orDominator.  Fixes #16474",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i16474.scala; tests/run/i16474/BaseProvider.java; tests/run/i16474/Case1.java; tests/run/i16474/Case1Provider.java; tests/run/i16474/Case2.java; tests/run/i16474/Case2Provider.java; tests/run/i16474/Encrypter.java; tests/run/i16474/test.scala,odersky,2022-12-07T20:54:36Z,2022-12-08T00:28:39Z
16474,16575,"Backport ""Only include accessible base classes in orDominator""",Backports #16477,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i16474.scala; tests/run/i16474/BaseProvider.java; tests/run/i16474/Case1.java; tests/run/i16474/Case1Provider.java; tests/run/i16474/Case2.java; tests/run/i16474/Case2Provider.java; tests/run/i16474/Encrypter.java; tests/run/i16474/test.scala,Kordyjan,2022-12-22T13:20:02Z,2022-12-22T15:33:28Z
16471,16514,Fix regression in cyclic constraint handling,"This regressed in 50eb0e979407cf2348d82eb34d6fe8a168ba5171 when `current.ensureNonCyclic` was incorrectly replaced by `validBoundsFor` which operates on `this`  not `current`.  This isn't the first time we make this error (cf a8641c5cbe6ad22707ea52c639ee894cfa09db57)  maybe we should refactor OrderingConstraint so that operations on `current` are done in the companion object where `this` isn't accessible.  Fixes #16471. Note that the test case from this issue couldn't be added because it fails `-Ycheck:typer`  but this was also the case before the regression. This is now tracked by #16524.",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/test/dotty/tools/dotc/core/ConstraintsTest.scala,smarter,2022-12-13T20:58:53Z,2022-12-14T18:30:25Z
16469,16757,Prepare bodies of inline forwarders eagerly,"* Fix context owner of `PrepareInlineable.registerInlineInfo`. It should have as owner the inline method (`forwarder` in this case). * Eagerly compute the inlinable RHS. Because we create the forwarder already typed  we do not evaluate/force in typer the `LazyBodyAnnotation` which is what triggers the computation of the inline accessors. This happened in posttyper which was too late. There might be a cleaner solution to this problem  maybe forcing the annotation explicitly.  Fixes #14131 Fixes #16469",closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos-macros/i14131.scala; tests/pos/i16469.scala,nicolasstucki,2023-01-24T15:19:47Z,2023-02-12T09:44:58Z
16464,16487,Take @targetName into account when resolving extension methods,"Take @targetName into account when resolving extension methods of value classes  Before target name we only matched on signatures. This was OK  since multiple extension methods of the same class must be different  otherwise we will get a ""have the same erasure"" error later at erasurePhase. But with @targetName that's now a legal situation that needs to be resolved correctly. We do this by propagating the target name to the extension method and verifying that the target names of the original and extension methods match.  Fixes #16464",closed,compiler/src/dotty/tools/dotc/transform/ExtensionMethods.scala; tests/neg/i16464.scala; tests/pos/i16464.scala; tests/run/i16464.scala,odersky,2022-12-09T16:07:08Z,2022-12-12T09:58:26Z
16463,20269,Add regression test for 16463,Closes #16463,closed,tests/neg/16463.scala,mbovel,2024-04-26T09:03:54Z,2024-04-26T17:06:52Z
16459,19531,Fix(#16459) xml parse regression,"close #16459   The parser could not parse `if expr` that contains single-quoted text(s) inside XML literal with newline(s) because `followedByToken`  which is used to detect `do` or `then` token after `if`  unintentionally consumed XMLSTART symbol  which prevented the parser from delegating parse to XML parser.",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/run/i16459.scala,i10416,2024-01-25T14:49:58Z,2024-02-01T11:26:52Z
16459,20877,"Backport ""Fix(#16459) xml parse regression"" to LTS",Backports #19531 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/run/i16459.scala,WojciechMazur,2024-06-28T17:13:24Z,2024-07-01T08:40:21Z
16458,19522,fix(#16458): regression in xml syntax parsing,"close https://github.com/lampepfl/dotty/issues/16458 xLiteral mistakenly assumed that the element just after `<` is always non-special element  but it is not true. It could be xCharData  comment  xProcInstr.",closed,compiler/src/dotty/tools/dotc/parsing/xml/MarkupParsers.scala; tests/run/i16458.scala,i10416,2024-01-23T22:03:56Z,2024-02-15T16:22:41Z
16458,20920,"Backport ""fix(#16458): regression in xml syntax parsing"" to LTS",Backports #19522 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/parsing/xml/MarkupParsers.scala; tests/run/i16458.scala,WojciechMazur,2024-07-01T19:58:30Z,2024-07-02T19:13:19Z
16453,16735,Hint about forbidden combination of implicit values and conversions,"For fixing #16453.  When an implicit argument of some type `T` is missing  this looks for all `Conversion`s in scope resulting in type `T` and includes a note that you can't combine implicit values and conversions. However  if it does find a `Conversion[A  T]`  it doesn't check if there's actually an implicit `A` in scope. The desired example message in the original issue did also find an implicit value to give as input to the `Conversion`  but I figured that's extra work for the compiler to do and might not be desired.  Also  the error message doesn't show the actual source of the found conversions  it's showing generated mangled names. I'll have to fix that.  It's my first time making a change to the dotc code  so please tell me if I've done something wrong.",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/i16453.check; tests/neg/i16453.scala,ysthakur,2023-01-20T23:57:01Z,2023-02-01T09:36:42Z
16452,16466,Require indent after colon at EOL,"Require indented definitions after a `:` at the end of a line where an argument is expected.  Fixes #16452",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/neg/i16452.check; tests/neg/i16452.scala,odersky,2022-12-04T18:20:39Z,2022-12-05T14:44:27Z
16443,16519,Correctly unpickle Scala 2 private case classes in traits,"Fixes #16443  I don't know how to make a test that reproduces the exact problem. In the test of this commit `TypeHints_1.scala` should be compiled with Scala 2.13  but I am not sure how to implement that.",closed,compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/core/unpickleScala2/Scala2Unpickler.scala; tests/pos/i16443/Test_2.scala; tests/pos/i16443/TypeHints_1.scala,odersky,2022-12-14T13:06:17Z,2022-12-14T15:28:48Z
16438,16448,Fix #16438: Supply dummy args for erroneous parent call in init check,Fix #16438: Supply dummy args for erroneous parent call in init check,closed,compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; tests/neg/i16438.scala,liufengyun,2022-11-30T21:39:39Z,2022-12-06T08:30:00Z
16437,16441,Fix object selftype match error,Fixes #16437,closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; tests/pos/i16437/def_1.scala; tests/pos/i16437/use_2.scala,dwijnand,2022-11-30T09:55:23Z,2022-12-01T17:32:07Z
16420,16426,Add regression test,Closes #16420,closed,tests/pos-macros/i16420/Macro.scala; tests/pos-macros/i16420/Test.scala,nicolasstucki,2022-11-28T12:27:44Z,2022-11-28T14:33:54Z
16408,17937,Run all MatchType reduction under Mode.Type,"Transcribing and paraphrasing from @smarter's comment in https://github.com/lampepfl/dotty/issues/16408#issuecomment-1533347659 :  Type erasure assumes method signatures aren't simplified  since simplification logic is implementation-defined.  For instance  some intersection types can be simplified down  but intersection types and their simplification can erase to different types - prefering classes over traits  for instance (for Java interop  as it matches Java's erasure).  Also note  simplify doesn't simplify intersections and unions in Type mode.  But Match Types will cache their reduction without considering the type mode as a cache input  thus the simplified reduction leaks even when called in Type mode.  So we call simplified in Mode.Type  in both cases (another desire)  so only that result is cached instead.  Using normalise doesn't work because  for example  that doesn't normalise match types that are applied type args (e.g. args of Pair). And not caching the result of those reductions means that they'll get repeat over and over. ",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i16408.min1.scala; tests/pos/i16408.min2.scala; tests/pos/i16408.scala,dwijnand,2023-06-07T13:10:04Z,2023-06-23T07:53:25Z
16407,16648,Drop requirement that self types are closed,"#702 introduced a requirement that self types are closed. This means  > If trait X has self type S and C is a class symbol of S  then S also conforms to the self type of C.  An example that violates this requirement is ```scala trait X { self: Y => } // error: missing requirement: self type Y & X of trait X does not conform to self type Z of required trait Y trait Y { self: Z => } trait Z ``` But it's no longer clear what the requirement should achieve. If we let the example above typecheck and try to implement X with something like ```scala class C extends X  Y ``` we would at that point get an error saying that `C` does not conform to the self type Z of Y. So it would have to be ```scala class C extends X  Y  Z ``` and this one looks fine.  The original change in #702 was made to avoid a crash in pending/run/t7933.scala. Unfortunately  we cannot reproduce this anymore since it depends on nsc.interpreter  which is no longer part of Scala 2.13.  Since we are no longer sure what the restriction should achieve I think it's better to drop it for now. If people discover problems with code that uses ""open"" self types  we can try to fix those problems  and if that does not work  would fallback re-instituting the restriction. It's not ideal  but I don't see another way.  Fixes #16407",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/i16407.check; tests/neg/i16407.scala; tests/neg/selfInheritance.scala; tests/pos/i16407.scala; tests/pos/open-selftype.scala,odersky,2023-01-10T13:12:00Z,2023-01-12T16:08:08Z
16405,16764,Fix #16405 ctd - wildcards prematurely resolving to Nothing,"Fixes https://github.com/lampepfl/dotty/issues/16405  which was a problem because it could it get in the way of some metaprogramming techniques. The main issue was the fact that when typing functions  the type inference would first look at the types from the source method (in decomposeProtoFunction resolving found type wildcards to Nothing) and only after that  it could look at the target method.  This is a continuation and simplification of #16625 ",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/run/16405.scala,odersky,2023-01-25T08:45:31Z,2023-01-26T11:16:38Z
16387,16393,REPL: Fix crash when printing instances of value classes,"By fixing `Rendering`'s `rewrapValueClass` to use the fully qualified class name  Sequel to #15545  Fixes #16322 Fixes #16387 ",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; compiler/src/dotty/tools/dotc/sbt/ExtractDependencies.scala; compiler/src/dotty/tools/repl/Rendering.scala; compiler/test-resources/repl/i15493,dwijnand,2022-11-22T18:21:46Z,2022-12-09T19:11:39Z
16374,16376,Improve output of -Xprint-inline,Used to debug #16374,closed,compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala,nicolasstucki,2022-11-18T15:32:39Z,2022-11-21T09:51:27Z
16374,16377,Handle binding of beta reduced inlined lambdas ,"Handle all inline beta-reduction in the InlineReducer. All these applications will contain `Inlined` nodes that need to be handled without changing the nestedness of expressions in inlining scopes.  Fixes https://github.com/lampepfl/dotty/issues/16374",closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/inlines/InlineReducer.scala; compiler/test/dotty/tools/backend/jvm/InlineBytecodeTests.scala; tests/pos/i16374a.scala; tests/pos/i16374b.scala; tests/pos/i16374c.scala; tests/pos/i16374d.scala,nicolasstucki,2022-11-18T16:25:20Z,2022-11-23T08:24:28Z
16368,16373,Make it a fatal error if erasure cannot resolve a type,"Fixes #16368 (?)  It would be good if somebody else would follow up here. I have just identified and avoided the immediate source of the crash  but I don't know what else could go wrong. In any case it's probably just a matter of surviving non-existing types.",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala,odersky,2022-11-18T11:53:35Z,2022-12-14T19:51:36Z
16367,16369,Workaround `case x @ U() : T =>` (fix main branch),"This kind of patterns were disabled in #16150.  Fixes #16367",closed,tests/pos-with-compiler-cc/dotc/core/Types.scala; tests/pos-with-compiler-cc/dotc/typer/Typer.scala,nicolasstucki,2022-11-18T07:43:41Z,2022-11-18T09:06:01Z
16363,16733,-Xcheck-macros: add hint when a symbol in created twice,Closes #16363,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala,nicolasstucki,2023-01-20T14:41:06Z,2023-05-09T18:59:11Z
16360,16371,Compute completions at typerPhase,Fixes #16360,closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala,odersky,2022-11-18T09:42:26Z,2022-11-18T13:45:44Z
16357,16746,Improve `New`/`Select` -Ycheck message,"We mention that the constructor must be selected. This should be all the information needed in case someone writes a buggy macro that does not include the `Select` around the `New`.  Closed #16357",closed,compiler/src/dotty/tools/dotc/transform/TreeChecker.scala,nicolasstucki,2023-01-23T08:26:23Z,2023-02-16T14:53:02Z
16355,16362,Disallow local term references in staged types,"Fixes #15917 Fixes #16355",closed,compiler/src/dotty/tools/dotc/transform/PCPCheckAndHeal.scala; tests/neg-macros/i15917.scala; tests/neg-macros/i16355a.scala; tests/neg-macros/i16355b.scala,nicolasstucki,2022-11-17T14:53:30Z,2023-01-23T21:29:00Z
16351,16354,Patch to avoid crash in #16351,"This needs follow up but I don't have the time.   - figure out why we crash and what is the right fix  - fix the test to compile lib with 2.13  Fixes #16351  (provisionally)",closed,compiler/src/dotty/tools/dotc/transform/HoistSuperArgs.scala; sbt-test/scala2-compat/i16351/app/App.scala; sbt-test/scala2-compat/i16351/build.sbt; sbt-test/scala2-compat/i16351/lib/lib.scala; sbt-test/scala2-compat/i16351/test,odersky,2022-11-16T20:45:05Z,2022-11-17T12:09:29Z
16343,16381,Avoid stackoverflow in ExplicitOuter,"When transforming a class at ExplicitOuter we create outer accessors for it. The newSymbol call to do this takes place at phase ExplicitOuter + 1  but its arguments need to be evaluated at phase ExplicitOuter. This was not true for the nestingLevel argument  which demanded the denotation of the class at phase ExplicitOuter + 1  thus leading to the SO.  Interestingly  the same path is not taken if the class has all abstract members defined or is declared abstract. It's only in the error case that I could reproduce the SO.  Fixes #16343 ",closed,compiler/src/dotty/tools/dotc/transform/ExplicitOuter.scala; tests/neg/i16343.scala,odersky,2022-11-19T12:06:47Z,2022-11-19T13:18:18Z
16342,16344,Fix calculation to drop transparent classes,"Two fixes:   1. Don't forget about refinements  2. Don't dealias  Fixes #16342 Fixes #16338  The first fix is essential for #16342. The second fix is just to keep types tidy and not open aliases needlessly.  It probably fixes issues #16337 and #16336 as well  but the test cases were not self-contained  so I could not try them out. It might fix other recent regressions as well.  The previous incorrect version hid errors in previous regressions #15365 and #16311 which will need to be re-opened now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; docs/_docs/reference/other-new-features/transparent-traits.md; tests/pending/pos/i15365.scala; tests/pending/pos/i16311.scala; tests/pos/i16338.scala; tests/pos/i16342.scala; tests/pos/transparent-intersect.scala,odersky,2022-11-15T09:49:06Z,2022-11-15T14:01:13Z
16339,16526,Freeze constraints in a condition check of maximiseType,Not doing so  in a context where GADT inferrence is enabled  such as in TypeOps.refineUsingParent  leads to false inferrences.  Doing so  and removing the previous fix for #15967  fixes the regression in #16339  and keeps #15967 as well as #16123 (which is somewhat related) fixed. ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i16339.scala,dwijnand,2022-12-14T17:44:58Z,2022-12-15T12:38:10Z
16337,16344,Fix calculation to drop transparent classes,"Two fixes:   1. Don't forget about refinements  2. Don't dealias  Fixes #16342 Fixes #16338  The first fix is essential for #16342. The second fix is just to keep types tidy and not open aliases needlessly.  It probably fixes issues #16337 and #16336 as well  but the test cases were not self-contained  so I could not try them out. It might fix other recent regressions as well.  The previous incorrect version hid errors in previous regressions #15365 and #16311 which will need to be re-opened now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; docs/_docs/reference/other-new-features/transparent-traits.md; tests/pending/pos/i15365.scala; tests/pending/pos/i16311.scala; tests/pos/i16338.scala; tests/pos/i16342.scala; tests/pos/transparent-intersect.scala,odersky,2022-11-15T09:49:06Z,2022-11-15T14:01:13Z
16336,16344,Fix calculation to drop transparent classes,"Two fixes:   1. Don't forget about refinements  2. Don't dealias  Fixes #16342 Fixes #16338  The first fix is essential for #16342. The second fix is just to keep types tidy and not open aliases needlessly.  It probably fixes issues #16337 and #16336 as well  but the test cases were not self-contained  so I could not try them out. It might fix other recent regressions as well.  The previous incorrect version hid errors in previous regressions #15365 and #16311 which will need to be re-opened now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; docs/_docs/reference/other-new-features/transparent-traits.md; tests/pending/pos/i15365.scala; tests/pending/pos/i16311.scala; tests/pos/i16338.scala; tests/pos/i16342.scala; tests/pos/transparent-intersect.scala,odersky,2022-11-15T09:49:06Z,2022-11-15T14:01:13Z
16322,16393,REPL: Fix crash when printing instances of value classes,"By fixing `Rendering`'s `rewrapValueClass` to use the fully qualified class name  Sequel to #15545  Fixes #16322 Fixes #16387 ",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; compiler/src/dotty/tools/dotc/sbt/ExtractDependencies.scala; compiler/src/dotty/tools/repl/Rendering.scala; compiler/test-resources/repl/i15493,dwijnand,2022-11-22T18:21:46Z,2022-12-09T19:11:39Z
16318,16378,Set Span for top level annotations generated in PostTyper,"This should help avoid macros throwing assertion errors in the case of annotations not having assigned Spans/positions. Since the annotation is generated and does not have a position corresponding to the source file  it inherits Span from the tree to which it is assigned.  Fixes #16318",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/transform/CompleteJavaEnums.scala; compiler/src/dotty/tools/dotc/transform/ContextFunctionResults.scala; compiler/src/dotty/tools/dotc/transform/LazyVals.scala; compiler/src/dotty/tools/dotc/transform/MoveStatics.scala; compiler/src/dotty/tools/dotc/transform/PCPCheckAndHeal.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/RepeatableAnnotations.scala; compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotty/tools/dotc/transform/TypeTestsCastsTest.scala; tests/pos-macros/i16318/Macro_1.scala; tests/pos-macros/i16318/Test_2.scala,jchyb,2022-11-18T16:59:08Z,2022-12-22T10:57:06Z
16311,16317,Test case for issue 16311,Closes #16311,closed,tests/pos-deep-subtype/i16311.scala,odersky,2022-11-10T18:03:51Z,2022-11-11T09:09:58Z
16311,16344,Fix calculation to drop transparent classes,"Two fixes:   1. Don't forget about refinements  2. Don't dealias  Fixes #16342 Fixes #16338  The first fix is essential for #16342. The second fix is just to keep types tidy and not open aliases needlessly.  It probably fixes issues #16337 and #16336 as well  but the test cases were not self-contained  so I could not try them out. It might fix other recent regressions as well.  The previous incorrect version hid errors in previous regressions #15365 and #16311 which will need to be re-opened now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; docs/_docs/reference/other-new-features/transparent-traits.md; tests/pending/pos/i15365.scala; tests/pending/pos/i16311.scala; tests/pos/i16338.scala; tests/pos/i16342.scala; tests/pos/transparent-intersect.scala,odersky,2022-11-15T09:49:06Z,2022-11-15T14:01:13Z
16311,16353,Two fixes to constraint solving,"## 1. Fix replace operation  In OrderingConstraint#replace we moved the actual replacement of a parameter with a type from the start of replace to its end  since that was more convenient for dependency adjustments. It turns out that doing so causes infinite recursion in instantiations in some cases  specifically if a parameter contains itself as an indirect lower bound that goes through an alias. Here is a situation that arises in i16311.scala: ```scala   type WithTag[T  U] = T & Tagged[U]    T1 >: WithTag[T2  Int]   T2 >: T1 & Tagged[Int] ``` The correct instantiation for T1 and T2 is Nothing. But we ran into a cycle instead.  The fix is to move the parameter replacement back to the start of `replace`  and to account for that in the dependency adjustment logic.  Fixes #16311 (with failing Ycheck)  ## 2. See through aliases before decomposing And/Or in isSubType  There seem to be two missing cases in TypeComparer where we have a TypeParamRef on one side and an And/Or type under an alias on the other. Examples:      type AND = A & B     type OR  = A | B     p <:< AND     OR <:< p  In this case we missed the decomposition into smaller types that would happen otherwise. This broke i16311.scala in Ycheck and broke i15365.scala with an infinite recursion in avoidance.  I verified that having an AndType as super or subtype of an abstract type works as expected. So if in the example above      type AND >: A & B  or      type AND <: A & B  it worked before. It was just aliases that were the problem (I assume it's the same for OrTypes as lower bounds).  This fixes #16311 completely and also Fixes #15365",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i15365.scala; tests/pos/i16311.scala; tests/pos/i16311a.scala; tests/pos/i16311b.scala; tests/pos/i16311c.scala; tests/pos/i16311d.scala,odersky,2022-11-16T16:01:51Z,2022-11-18T13:27:48Z
16271,16278,Improve support for Unicode supplementary characters in identifiers and string interpolation (as in Scala 2),"Forward port https://github.com/scala/scala/pull/9805  Fixes #16271 ",closed,compiler/src/dotty/tools/dotc/core/NameOps.scala; compiler/src/dotty/tools/dotc/core/Names.scala; compiler/src/dotty/tools/dotc/parsing/Scanners.scala; compiler/src/dotty/tools/dotc/parsing/package.scala; compiler/src/dotty/tools/dotc/util/Chars.scala; tests/pos/surrogates.scala; tests/pos/t1406.scala; tests/run/t1406b.scala,som-snytt,2022-11-03T12:09:56Z,2022-12-29T15:39:34Z
16270,16664,Disallow constructor params from appearing in parent types for soundness,Fixes #16270.,closed,compiler/src/dotty/tools/dotc/transform/PostTyper.scala; tests/init/neg/early-promote4.scala; tests/init/neg/early-promote5.scala; tests/neg/i16270a.scala; tests/neg/i16270b.scala; tests/neg/i16270c.scala; tests/neg/i3935.scala; tests/neg/i5636.scala; tests/pos/i3935.scala,smarter,2023-01-11T14:59:02Z,2023-01-12T12:14:36Z
16265,16710,Add regression test,Closes #16265,closed,tests/pos-macros/i16265.scala,nicolasstucki,2023-01-17T16:40:20Z,2023-01-18T09:06:42Z
16252,16262,Test case to show that #16252 works with transparent,Closes #16252,closed,tests/run/i16252.scala,odersky,2022-10-30T14:49:59Z,2022-10-30T18:11:56Z
16238,16243,Merge language-reference-stable into main,"This solves all merge conflicts between `language-reference-stable` and `main` Solves the first part of https://github.com/lampepfl/dotty/issues/16238",closed,docs/_docs/reference/contextual/derivation.md; docs/_docs/reference/dropped-features/this-qualifier.md; docs/_docs/reference/other-new-features/indentation.md,Sporarum,2022-10-24T16:33:08Z,2022-10-25T06:48:42Z
16228,16267,Attempt to fix completion crash,"Fixes #16228 (hopefully)  Note: I could not test this. Maybe somebody else take can this over.    Looking at the stack trace in #16228: ``` at dotty.tools.dotc.core.TypeErasure.dotty$tools$dotc$core$TypeErasure$$sigName(TypeErasure.scala:815) 	at dotty.tools.dotc.core.TypeErasure$.sigName(TypeErasure.scala:204) 	at dotty.tools.dotc.core.Signature.$anonfun$2(Signature.scala:111) 	at scala.collection.immutable.List.map(List.scala:246) 	at dotty.tools.dotc.core.Signature.prependTermParams(Signature.scala:111) 	at dotty.tools.dotc.core.Types$MethodOrPoly.computeSignature$2(Types.scala:3565) 	at dotty.tools.dotc.core.Types$MethodOrPoly.signature(Types.scala:3582) 	at dotty.tools.dotc.core.Types$MethodOrPoly.computeSignature$2(Types.scala:3557) 	at dotty.tools.dotc.core.Types$MethodOrPoly.signature(Types.scala:3582) 	at dotty.tools.dotc.core.Denotations$SingleDenotation.signature(Denotations.scala:615) 	at dotty.tools.dotc.core.Denotations$SingleDenotation.signature(Denotations.scala:605) 	at dotty.tools.dotc.core.Denotations$SingleDenotation.atSignature(Denotations.scala:647) 	at dotty.tools.dotc.core.Denotations$SingleDenotation.atSignature(Denotations.scala:645) 	at dotty.tools.dotc.core.tasty.TreeUnpickler$TreeReader.readLengthTerm$1(TreeUnpickler.scala:1299) ``` I think what happens is that we need to disambiguate an overloaded reference by looking at the signature of each overloaded alternative. But one of the signatures refers to a type that's not on the classpath  which causes the `MissingType` exception. The fix is to catch the exception and declare the alternative that caused it to be non-matching.  About the regression: I have no idea what previous fix could have caused this. ",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala,odersky,2022-11-01T07:38:48Z,2022-12-01T14:30:34Z
16224,18067,Regression test for #16224,Fixes #16224,closed,tests/pos-custom-args/captures/i16224.scala,odersky,2023-06-26T20:34:26Z,2023-06-27T15:51:28Z
16223,17347,deps(scaladoc): update flexmark from 0.42.12 to 0.62.2,"This pr updates the flexmark dependencies used in Scaladoc from 0.42.12  which is from 2019  up to the latest release of 0.64.0 to 0.62.2. This is mainly done to tackle a bunch of CVEs that are attached to the old versions of flexmark.  fixes https://github.com/lampepfl/dotty/issues/16223",closed,dist/bin/scaladoc; project/Dependencies.scala; scaladoc/src/dotty/tools/scaladoc/DocContext.scala; scaladoc/src/dotty/tools/scaladoc/Main.scala; scaladoc/src/dotty/tools/scaladoc/Scaladoc.scala; scaladoc/src/dotty/tools/scaladoc/ScaladocCommand.scala; scaladoc/src/dotty/tools/scaladoc/ScaladocSettings.scala; scaladoc/src/dotty/tools/scaladoc/SocialLinks.scala; scaladoc/src/dotty/tools/scaladoc/SourceLinks.scala; scaladoc/src/dotty/tools/scaladoc/compat.scala; scaladoc/src/dotty/tools/scaladoc/parsers/WikiCodeBlockParser.scala; scaladoc/src/dotty/tools/scaladoc/renderers/HtmlRenderer.scala; scaladoc/src/dotty/tools/scaladoc/renderers/Locations.scala; scaladoc/src/dotty/tools/scaladoc/renderers/MarkdownRenderer.scala; scaladoc/src/dotty/tools/scaladoc/renderers/MemberRenderer.scala; scaladoc/src/dotty/tools/scaladoc/renderers/Renderer.scala; scaladoc/src/dotty/tools/scaladoc/renderers/Resources.scala; scaladoc/src/dotty/tools/scaladoc/site/FlexmarkSectionWrapper.scala; scaladoc/src/dotty/tools/scaladoc/site/common.scala; scaladoc/src/dotty/tools/scaladoc/site/templates.scala; scaladoc/src/dotty/tools/scaladoc/snippets/FlexmarkSnippetProcessor.scala; scaladoc/src/dotty/tools/scaladoc/tasty/comments/Comments.scala; scaladoc/src/dotty/tools/scaladoc/tasty/comments/MarkdownParser.scala; scaladoc/src/dotty/tools/scaladoc/tasty/comments/markdown/DocFlexmarkExtension.scala; scaladoc/src/dotty/tools/scaladoc/tasty/comments/markdown/SectionRenderingExtension.scala; scaladoc/src/dotty/tools/scaladoc/tasty/comments/markdown/SnippetRenderingExtension.scala; scaladoc/test/dotty/tools/scaladoc/site/TemplateFileTests.scala; scaladoc/test/dotty/tools/scaladoc/snippets/SnippetsE2eTest.scala,Dedelweiss,2023-04-25T18:19:18Z,2023-05-02T10:37:30Z
16208,20177,Add regression tests,"Closes #19749 Closes #16208",closed,tests/pos/i16208.scala; tests/pos/i19749.scala,EugeneFlesselle,2024-04-13T21:15:41Z,2024-04-14T13:28:46Z
16208,21066,"Backport ""Add regression tests"" to LTS",Backports #20177 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos/i19749.scala,WojciechMazur,2024-07-05T18:10:04Z,2024-07-05T21:34:18Z
16201,16202,Backport changes to reference docs from 3.2.0,"did a rebase of `release-3.2.0` onto `language-reference-stable` and fixed conflicts  fixes #16201 ",closed,docs/_docs/reference/changed-features/pattern-bindings.md; docs/_docs/reference/changed-features/pattern-matching.md; docs/_docs/reference/contextual/context-bounds.md; docs/_docs/reference/contextual/derivation-macro.md; docs/_docs/reference/contextual/derivation.md; docs/_docs/reference/dropped-features/nonlocal-returns.md; docs/_docs/reference/dropped-features/this-qualifier.md; docs/_docs/reference/enums/enums-index.md; docs/_docs/reference/experimental/explicit-nulls.md; docs/_docs/reference/experimental/fewer-braces.md; docs/_docs/reference/experimental/numeric-literals.md; docs/_docs/reference/experimental/overview.md; docs/_docs/reference/language-versions/binary-compatibility.md; docs/_docs/reference/language-versions/language-versions.md; docs/_docs/reference/language-versions/source-compatibility.md; docs/_docs/reference/metaprogramming/compiletime-ops.md; docs/_docs/reference/new-types/new-types.md; docs/_docs/reference/other-new-features/experimental-defs.md; docs/_docs/reference/other-new-features/export.md; docs/_docs/reference/other-new-features/indentation.md; docs/_docs/reference/other-new-features/targetName.md; docs/_docs/reference/overview.md; docs/_docs/reference/syntax.md; project/resources/referenceReplacements/sidebar.yml,bishabosha,2022-10-18T08:24:38Z,2022-10-18T10:22:54Z
16191,16193,Fix creating forwarders for simple alias givens,Fixes #16191,closed,compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/transform/UncacheGivenAliases.scala; tests/run-deep-subtype/i16191.check; tests/run-deep-subtype/i16191.scala,odersky,2022-10-15T15:25:18Z,2022-10-16T22:11:54Z
16183,17139,Improve subtyping check for not yet eta-expanded higher kinded types,Fixes https://github.com/lampepfl/dotty/issues/16183,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i16183/Lib_1.scala; tests/pos/i16183/Test_2.scala,prolativ,2023-03-22T12:10:38Z,2023-04-22T11:43:46Z
16174,16221,Avoid checking purity of Apply without symbols,closes #16174,closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; tests/pos/i16174.scala,KacperFKorban,2022-10-20T12:41:07Z,2022-10-24T15:33:13Z
16173,16184,Fix #16173: SJS: Fix the detection of inferred types of `= js.native`.,,closed,compiler/src/dotty/tools/dotc/transform/sjs/PrepJSInterop.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,sjrd,2022-10-14T08:38:57Z,2022-10-14T15:13:58Z
16152,16970,Check safe initialization of static objects,"The problem is illustrated by the example below:  ``` Scala class Foo(val opposite: Foo) case object A extends Foo(B)     // A -> B case object B extends Foo(A)     // B -> A ``` The check aims to be simple for programmers to understand  expressive  fast  and sound.  The check is centered around two design ideas: (1) initialization-time irrelevance; (2) partial ordering.  The check enforces the principle of _initialization-time irrelevance_  which means that the time when a static object is initialized should not change program semantics. For that purpose  it enforces the following rule:  > **The initialization of a static object should not directly or indirectly read or write mutable state owned by another static object**.  This principle not only puts the initialization of static objects on a solid foundation but also avoids whole-program analysis.  Partial ordering means that the initialization dependencies of static objects form a directed-acyclic graph (DAG). No cycles with length bigger than 1 allowed --- which might lead to deadlocks in the presence of concurrency and strong coupling & subtle contracts between objects.   Related Issues:  https://github.com/lampepfl/dotty/issues/16152 https://github.com/lampepfl/dotty/issues/9176 https://github.com/lampepfl/dotty/issues/11262 https://github.com/scala/bug/issues/9312 https://github.com/scala/bug/issues/9115 https://github.com/scala/bug/issues/9261 https://github.com/scala/bug/issues/5366 https://github.com/scala/bug/issues/9360 ",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/init/Checker.scala; compiler/src/dotty/tools/dotc/transform/init/Objects.scala; compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; compiler/src/dotty/tools/dotc/transform/init/Util.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; library/src/scala/annotation/init.scala; tests/init-global/neg/context-sensitivity.scala; tests/init-global/neg/global-cycle1.check; tests/init-global/neg/global-cycle1.scala; tests/init-global/neg/global-cycle14.scala; tests/init-global/neg/global-cycle2.scala; tests/init-global/neg/global-cycle3.scala; tests/init-global/neg/global-cycle4.scala; tests/init-global/neg/global-cycle5.scala; tests/init-global/neg/global-cycle6.scala; tests/init-global/neg/global-cycle7.scala; tests/init-global/neg/global-cycle8.scala; tests/init-global/neg/global-irrelevance1.scala; tests/init-global/neg/global-irrelevance2.scala; tests/init-global/neg/global-irrelevance3.scala; tests/init-global/neg/global-irrelevance4.scala; tests/init-global/neg/global-irrelevance5.scala; tests/init-global/neg/global-irrelevance6.scala; tests/init-global/neg/global-irrelevance7.scala; tests/init-global/neg/global-list.scala; tests/init-global/neg/global-local-var.scala,liufengyun,2023-02-20T07:02:25Z,2023-06-16T15:46:52Z
16146,16159,Handle copies of constrained type lambdas when determining an implicit scope," Fixes #16146",closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/neg/i16146.scala,odersky,2022-10-09T16:10:08Z,2022-10-10T15:31:16Z
16143,17213,Scaladoc: type rendering fixes and improvements,"This PR introduces multiple fixes and improvements to type rendering in Scaladoc  - Fixed rendering of TypeRefs (`A#B`) and TermRefs (`a.b.type`) - Fixed rendering of `Tuple1[T]` (previously `(T)`) - Fixed rendering of `this.type` (except for type bounds  see below) - Types with `@showAsInfix` are rendered infix - Correct parenthesizing around infix types  `&` types  `|` types and function types - Type parameters of superclasses in inherited methods are substituted with actual types from inheriting class/trait (see `scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala`) https://github.com/lampepfl/dotty/pull/17213/files#diff-93a78912075a9fdb34fefa437d191be59888cb723ccb244374e77033d9eca779R12-R20 - `this` and `type` are highlighted as keywords  fixes #16024 fixes #16143 fixed #16057 fixes #16084 (partially) - fixed rendering of `Int` instead of `n.type` and `(This  n.type)` instead of `Split[This  n.type]`. `this.type` in type bounds remains unfixed. I created separate issue for that #17226  Documentation with those changes has been deployed to https://scala3doc.virtuslab.com/pr-types-rendering-fixes/scala3/api/index.html",closed,scaladoc-testcases/src/tests/exports1.scala; scaladoc-testcases/src/tests/functionTypeSignatures.scala; scaladoc-testcases/src/tests/infixTypes.scala; scaladoc-testcases/src/tests/matchTypeTuple.scala; scaladoc-testcases/src/tests/pathDependentTypes.scala; scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala; scaladoc-testcases/src/tests/thisType.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TastyParser.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TypesSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/SignatureTest.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2023-04-06T09:47:56Z,2023-06-02T13:47:31Z
16130,16158,Create message for missing arguments,Fixes #16130 ,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/test/dotty/tools/repl/ShadowingTests.scala; tests/neg/i16130.check; tests/neg/i16130.scala; tests/neg/i6778.check; tests/neg/i9436.check,odersky,2022-10-09T14:35:49Z,2022-10-10T14:04:55Z
16127,16235,Make coverage instrumentation more robust,"*As with the last coverage PR  don't worry: most of the changes are ""expect"" files for tests. On top of that  many files have only changed by the order in which the statements are recorded  but this order doesn't matter.*  Small changes which  together  make the instrumentation more robust and fix many bugs: 1. Address comments in #15739 by introducing a type `InstrumentedParts`. The initial problem was that `TypeApply` cannot be instrumented in a straightforward way: `expr[T]` cannot be turned into `{invoked(...); expr}[T]` but must be `{invoked(...); expr[T]}`. To do this  we first try to instrument `expr` and then  if it was successfully instrumented  we move the call to `invoked(...)` to the right place. This gives us the following code in `transform`: ```scala case TypeApply(fun  args) =>   val InstrumentedParts(pre  coverageCall  expr) = tryInstrument(fun) // may generate a call to invoked(...)  but it's not part of the resulting tree yet   if coverageCall.isEmpty then     tree   else     Block(       pre :+ coverageCall  // put the call at the right place (pre contains lifted definitions  if any)       cpy.TypeApply(tree)(expr  args)   ) ``` 2. Exclude more trees from instrumentation  like `Erased` trees and calls to the parents' constructor in `Template#parents`. 3. Escape special characters in `Serializer`. 4. Reposition `Inlined` trees to the current source in order to avoid referencing an unreachable compilation unit. This might be the most controversial change because I've called `Inlines.dropInlined` :eyes:. Any suggestion is welcome!",closed,compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/coverage/Location.scala; compiler/src/dotty/tools/dotc/coverage/Serializer.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/EnumJava.scala; tests/coverage/pos/EnumJava.scoverage.check; tests/coverage/pos/Escaping.scala; tests/coverage/pos/Escaping.scoverage.check; tests/coverage/pos/For.scala; tests/coverage/pos/For.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/InlinedFromLib.scala; tests/coverage/pos/InlinedFromLib.scoverage.check; tests/coverage/pos/Lift.scala; tests/coverage/pos/Lift.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/SimpleMethods.scala; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/pos/TypeLambdas.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/erased/test.check,TheElectronWill,2022-10-23T14:50:48Z,2022-10-24T15:22:36Z
16123,16526,Freeze constraints in a condition check of maximiseType,Not doing so  in a context where GADT inferrence is enabled  such as in TypeOps.refineUsingParent  leads to false inferrences.  Doing so  and removing the previous fix for #15967  fixes the regression in #16339  and keeps #15967 as well as #16123 (which is somewhat related) fixed. ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i16339.scala,dwijnand,2022-12-14T17:44:58Z,2022-12-15T12:38:10Z
16119,16122,Refine checking for outer references,"Outer references should also count anywhere in a type if we are in the scope of an inline method. Expansions of calls to these methods will have to reference these types using outer accessors.  Fixes #16119",closed,compiler/src/dotty/tools/dotc/transform/ExplicitOuter.scala; tests/pos/i16119.scala,odersky,2022-09-29T15:55:05Z,2022-09-30T10:06:02Z
16116,16195,Avoid cyclic references due to experimental check when inlining,Fixes #16116,closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; tests/neg-custom-args/no-experimental/experimentalInline.scala; tests/neg-custom-args/no-experimental/experimentalInline2.scala; tests/pos-custom-args/captures/i16116.scala,odersky,2022-10-16T12:38:02Z,2022-10-31T10:06:35Z
16114,16136,Create boxed environments only for references and function values,"Fixes #16114.  According to the [comment](https://github.com/lampepfl/dotty/issues/16114#issuecomment-1259691904) in the issue  only create boxed environment when the rechecked tree is a reference or a function value.  This PR also fixes a testcase  as explained in this [commit](https://github.com/lampepfl/dotty/commit/25daaa8cf171b255709bb1cb930eeff20365a347).",closed,compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; tests/neg-custom-args/captures/i16114.scala; tests/pos-custom-args/captures/boxmap.scala,Linyxus,2022-10-03T13:34:07Z,2022-10-19T13:35:37Z
16108,21552,Calm param autotupling for overloads,When resolving method overloads  we look to apply the same parameter auto-tupling logic that we have in typedFunctionValue.  But we only checked the function was unary without checking whether it was a tuple. So I reused the same precondition.  Fixes #16108 ,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/run/i16108.scala,dwijnand,2024-09-06T11:16:43Z,2024-09-23T14:28:58Z
16104,16113,Fix tuple casting,"Was truncating tuples of size > 22 before.  Fixes #16104",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i16104.scala,odersky,2022-09-27T12:47:42Z,2022-10-03T15:43:48Z
16104,16197,"Backport ""Fix tuple casting""",Backports #16113,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i16104.scala,Kordyjan,2022-10-17T12:38:54Z,2022-10-17T14:10:02Z
16095,16098,Avoid crash where creator proxies are referenced indirectly," Fixes #16095 ",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i16095.scala,odersky,2022-09-25T19:34:33Z,2022-09-26T11:46:51Z
16092,16096,Disallow overriding val parameters,"We disallow overriding of val parameters  which fixes the soundness problem discovered in #16092.  There is one exception: If a val parameter is overridden by another val parameter that can be shown to always have the same value (in the sense established by Paramforwarding.inheritedAccessor). This exception is needed to make a not-so-uncommon pattern of case class inheritance go through.  Example:      abstract class A(val x: Int)     case class B(override val x: Int) extends A(x)     case class C(override val x: Int) extends A(x)     case object D extends A(0)  Here  the `override val`s are necessary since case class parameters are always vals  so they do override the val in class A. It should be noted that the override val generates a second field  so this not a very efficient representation. A better design would be to use an abstract field in `A`:      abstract class A { val x: Int }     case class B(val x: Int) extends A     case class C(val x: Int) extends A     case object D extends A { val a = 0 }  But that causes slightly more work for cases as in D. Which seems to be why the first pattern is sometimes used. It might be desirable to disallow the first pattern  but that would cause quite a bit of migration hassle since it requires synchronized changes at several places of a class hierarchy.  Fixes #16092",closed,community-build/community-projects/akka; community-build/community-projects/scalacheck; community-build/community-projects/specs2; community-build/community-projects/spire; compiler/src/dotty/tools/dotc/transform/ParamForwarding.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/init/neg/override13.scala; tests/init/neg/override16.scala; tests/init/neg/override5.scala; tests/neg-custom-args/deprecation/i11344.scala; tests/neg-strict/i16092.scala; tests/neg/i16092-members-only.scala; tests/neg/i9460.scala; tests/pos-with-compiler/tasty/test-definitions.scala; tests/pos/i16092.scala; tests/pos/i2051.scala; tests/run/i11344.scala; tests/run/i16092.scala; tests/run/paramForwarding.scala,odersky,2022-09-25T10:03:02Z,2022-09-27T12:58:06Z
16091,16099,Let accessors inherit @experimental annotations from accessed symvbols,Fixes #16091,closed,compiler/src/dotty/tools/dotc/transform/AccessProxies.scala; tests/pos-custom-args/no-experimental/i16091.scala,odersky,2022-09-26T07:54:18Z,2022-09-26T10:45:25Z
16076,16070,Be even more careful when combining argument and info in computeAsSeenFrom,"Fixes #16049  Fixes #16076",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; tests/pos/i16049.scala; tests/pos/i16076.scala,odersky,2022-09-19T10:11:58Z,2022-09-26T11:47:43Z
16076,16101,"Backport ""Be even more careful when combining argument and info in computeAsSeenFrom""",Backports #16070,closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; tests/pos/i16049.scala; tests/pos/i16076.scala,Kordyjan,2022-09-26T11:49:43Z,2022-09-27T08:31:39Z
16065,18201,Properly handle SAM types with wildcards ,"When typing a closure with an expected type containing a wildcard  the closure type itself should not contain wildcards  because it might be expanded to an anonymous class extending the closure type (this happens on non-JVM backends as well as on the JVM itself in situations where a SAM trait does not compile down to a SAM interface).  We were already approximating wildcards in the method type returned by the SAMType extractor  but to fix this issue we had to change the extractor to perform the approximation on the expected type itself to generate a valid parent type. The SAMType extractor now returns both the approximated parent type and the type of the method itself.  The wildcard approximation analysis relies on a new `VarianceMap` opaque type extracted from Inferencing#variances.  Fixes #16065. Fixes #18096.",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15741.scala; tests/neg/i8012.scala; tests/pos/AE-9a131723f09b9f77c99c52b709965e580a61706e.scala; tests/pos/i18096.scala; tests/run/i16065.scala,smarter,2023-07-13T15:23:42Z,2023-07-15T18:29:15Z
16065,19112,"Backport ""Properly handle SAM types with wildcards"" to LTS","Backports #18201 to the LTS branch.  PR submitted by the release tooling.",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15741.scala; tests/neg/i8012.scala; tests/pos/AE-9a131723f09b9f77c99c52b709965e580a61706e.scala; tests/pos/i18096.scala; tests/run/i16065.scala,Kordyjan,2023-11-30T16:18:05Z,2023-12-08T15:19:36Z
16057,17213,Scaladoc: type rendering fixes and improvements,"This PR introduces multiple fixes and improvements to type rendering in Scaladoc  - Fixed rendering of TypeRefs (`A#B`) and TermRefs (`a.b.type`) - Fixed rendering of `Tuple1[T]` (previously `(T)`) - Fixed rendering of `this.type` (except for type bounds  see below) - Types with `@showAsInfix` are rendered infix - Correct parenthesizing around infix types  `&` types  `|` types and function types - Type parameters of superclasses in inherited methods are substituted with actual types from inheriting class/trait (see `scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala`) https://github.com/lampepfl/dotty/pull/17213/files#diff-93a78912075a9fdb34fefa437d191be59888cb723ccb244374e77033d9eca779R12-R20 - `this` and `type` are highlighted as keywords  fixes #16024 fixes #16143 fixed #16057 fixes #16084 (partially) - fixed rendering of `Int` instead of `n.type` and `(This  n.type)` instead of `Split[This  n.type]`. `this.type` in type bounds remains unfixed. I created separate issue for that #17226  Documentation with those changes has been deployed to https://scala3doc.virtuslab.com/pr-types-rendering-fixes/scala3/api/index.html",closed,scaladoc-testcases/src/tests/exports1.scala; scaladoc-testcases/src/tests/functionTypeSignatures.scala; scaladoc-testcases/src/tests/infixTypes.scala; scaladoc-testcases/src/tests/matchTypeTuple.scala; scaladoc-testcases/src/tests/pathDependentTypes.scala; scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala; scaladoc-testcases/src/tests/thisType.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TastyParser.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TypesSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/SignatureTest.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2023-04-06T09:47:56Z,2023-06-02T13:47:31Z
16049,16070,Be even more careful when combining argument and info in computeAsSeenFrom,"Fixes #16049  Fixes #16076",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; tests/pos/i16049.scala; tests/pos/i16076.scala,odersky,2022-09-19T10:11:58Z,2022-09-26T11:47:43Z
16035,16041,Disallow opaque type aliases of context functions,"We could allow them but they would not do what one probably expects (i.e. create context closures). This is because abstract types upper-bounded by context functions don't do that either (see neg/i16035a.scala)  and we have to keep semantic equivalence between the two.  Therefore  it's better to disallow them.  Fixes #16035",closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; docs/_docs/reference/other-new-features/opaques-details.md; tests/neg/i16035.scala; tests/neg/i16035a.scala; tests/pos/i16035.scala,odersky,2022-09-14T15:53:06Z,2022-09-15T17:25:32Z
16024,17213,Scaladoc: type rendering fixes and improvements,"This PR introduces multiple fixes and improvements to type rendering in Scaladoc  - Fixed rendering of TypeRefs (`A#B`) and TermRefs (`a.b.type`) - Fixed rendering of `Tuple1[T]` (previously `(T)`) - Fixed rendering of `this.type` (except for type bounds  see below) - Types with `@showAsInfix` are rendered infix - Correct parenthesizing around infix types  `&` types  `|` types and function types - Type parameters of superclasses in inherited methods are substituted with actual types from inheriting class/trait (see `scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala`) https://github.com/lampepfl/dotty/pull/17213/files#diff-93a78912075a9fdb34fefa437d191be59888cb723ccb244374e77033d9eca779R12-R20 - `this` and `type` are highlighted as keywords  fixes #16024 fixes #16143 fixed #16057 fixes #16084 (partially) - fixed rendering of `Int` instead of `n.type` and `(This  n.type)` instead of `Split[This  n.type]`. `this.type` in type bounds remains unfixed. I created separate issue for that #17226  Documentation with those changes has been deployed to https://scala3doc.virtuslab.com/pr-types-rendering-fixes/scala3/api/index.html",closed,scaladoc-testcases/src/tests/exports1.scala; scaladoc-testcases/src/tests/functionTypeSignatures.scala; scaladoc-testcases/src/tests/infixTypes.scala; scaladoc-testcases/src/tests/matchTypeTuple.scala; scaladoc-testcases/src/tests/pathDependentTypes.scala; scaladoc-testcases/src/tests/supertypeParamsSubstitution.scala; scaladoc-testcases/src/tests/thisType.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TastyParser.scala; scaladoc/src/dotty/tools/scaladoc/tasty/TypesSupport.scala; scaladoc/test/dotty/tools/scaladoc/signatures/SignatureTest.scala; scaladoc/test/dotty/tools/scaladoc/signatures/TranslatableSignaturesTestCases.scala,Florian3k,2023-04-06T09:47:56Z,2023-06-02T13:47:31Z
16021,16118,updated docs after #16021 was closed,[ref] discussion taken from [slack](https://scala3-release.slack.com/archives/C02ASGAQJ76/p1664363162711309) and #16021 ,closed,docs/_docs/reference/new-types/match-types.md,nmcb,2022-09-28T11:36:06Z,2022-09-29T11:48:26Z
16008,16857,Add regression test,Closes #16008,closed,tests/pos-macros/i16008/Macro_1.scala; tests/pos-macros/i16008/Test_2.scala,nicolasstucki,2023-02-08T13:32:22Z,2023-02-09T10:33:28Z
16006,16009,Resolve overloading: keep track of prefix and indices of all default getters ,"Fixes #16006 Fixes #15287  When resolving overloading using parameter lists after the first one  we used mapped symbols that forgot about the prefix of the original call and how many parameters were skipped. Consequently  overloading resolution got confused when there were default parameters in following parameter lists. We now keep track of these values in an  annotation that gets added to the mapped symbols.  We also use `findDefaultGetter` directly to compute the number of default parameters in `sizeFits`. The previous scheme of checking the `HasParam` flag of parameters fails for default values inherited from overriden methods.",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; library/src/scala/annotation/internal/MappedAlternative.scala; project/MiMaFilters.scala; tests/neg/i10901.check; tests/neg/i15000.check; tests/neg/i15287.check; tests/neg/i15287.scala; tests/run/i15287.scala; tests/run/i16006.check; tests/run/i16006.scala,odersky,2022-09-09T12:11:24Z,2022-10-09T10:57:51Z
16003,16007,Fix crash in -Vprofile code,Fixes #16003,closed,compiler/src/dotty/tools/dotc/reporting/Profile.scala,odersky,2022-09-09T09:18:58Z,2022-09-10T16:31:07Z
15998,16001,Improvements for implicit searches with top-level type variables,"Two improvements for implicit searches involving type variables.   1. We now always add a comment when an implicit search is rejected due to the ""too unspecific"" criterion of #13886  commit [Refine checking for underspecified implicit queries](https://github.com/lampepfl/dotty/pull/13886/commits/db5956b36a7e62b77f4b3a9335ab1587e0e47e2c).     There have been quite a few regressions that hit that problem  so it is good to know immediately what    the issue is.    2. There is now a better wildcard approximation of higher-kinded type applications. This makes several programs (including original #15998) compile  which were classified as not specific enough before.  Fixes #15998 Fixes #15820 Fixes #15670 Fixes #15160  Fixes #13986 ",closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,odersky,2022-09-08T16:09:39Z,2022-09-09T13:44:35Z
15998,16045,"Backport ""Improvements for implicit searches with top-level type variables""",Backports #16001,closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,Kordyjan,2022-09-15T14:46:35Z,2022-09-15T16:14:38Z
15988,18013,Intrinsify `constValueTuple` and `summonAll` ,"The new implementation instantiates the TupleN/TupleXXL classes directly. This avoids the expensive unrolling of tuples using `*:` recursively.  Fixes https://github.com/lampepfl/dotty/issues/15988",closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; library/src/scala/compiletime/package.scala; tests/neg/17211.check; tests/neg/i14177a.scala; tests/run/i15988a.scala; tests/run/i15988b.scala,nicolasstucki,2023-06-20T11:08:12Z,2023-09-25T11:31:22Z
15985,16345,Remove contents of inline methods,"Remove contents of inline methods when pickling quotes in case these contain quoted expressions or types. Some artifacts of staging (such as type blocks) are not handled by the transformation phases that follow.  Fixes #15985",closed,compiler/src/dotty/tools/dotc/transform/PickleQuotes.scala; tests/pos-macros/i15985.scala,nicolasstucki,2022-11-15T10:18:01Z,2022-12-12T16:57:31Z
15983,16181,Fix higher-order unification incorrectly substituting tparams,"When creating a fresh type lambda for the purpose of higher-order type inference  we incorrectly substituted references to type parameters before this commit. We want to construct:      bodyArgs := otherArgs.take(d)  T_0  ...  T_k-1     [T_0  ...  T_k-1] =>> otherTycon[bodyArgs]  For this type to be valid  we need the bounds of `T_i` to be the bounds of the (d+i) type parameter of `otherTycon` after substituting references to each type parameter of `otherTycon` by the corresponding argument in `bodyArgs`.  The previous implementation incorrectly substituted only the last `k` type parameters  this was not enough for correctness. It could also lead to a crash because it called `integrate` which implicitly assumes it is passed a full list of type parameters (this is now documented).  Fixes #15983.",closed,compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15983a.scala; tests/pos/i15983b.scala,smarter,2022-10-13T19:06:43Z,2022-10-15T14:55:16Z
15980,16097,Be more lazy when checking CaptureChecked annotation in TreeUnpickler," Fixes #15980 ",closed,compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; tests/new/test.scala; tests/pos/i15980/scalaql/1_syntax_1.scala; tests/pos/i15980/scalaql/2_annotations_1.scala; tests/pos/i15980/scalaql/3_package_1.scala; tests/pos/i15980/scalaql/usage_2.scala,odersky,2022-09-25T10:06:59Z,2022-09-25T21:45:09Z
15976,15986,Refactor class parent handling,"Class parent handling was hard to understand because it consisted of interacting parts that each worked under intricate but separate conditions. It's more centralized now.  Fixes #15976 ",closed,compiler/src/dotty/tools/dotc/transform/TypeUtils.scala; compiler/src/dotty/tools/dotc/typer/ReTyper.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i14432c.check; tests/neg/i14432c.scala; tests/neg/i6778.check; tests/neg/i6778.scala; tests/neg/i7613.check; tests/neg/i7613.scala; tests/pos/i15976.scala,odersky,2022-09-07T10:37:22Z,2022-09-09T19:42:23Z
15969,15970,Only look for synthetic applies under TypeApply with inferred arguments,fixes lampepfl#15969,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15969.scala,KacperFKorban,2022-09-04T22:42:09Z,2022-09-05T10:56:33Z
15969,16044,"Backport ""Only look for synthetic applies under TypeApply with inferred arguments""",Backports #15970,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15969.scala,Kordyjan,2022-09-15T14:43:19Z,2022-09-15T16:18:27Z
15968,16623,Beta-reduce directly applied PolymorphicFunction,"Beta-reduce directly applied PolymorphicFunction such as  ```scala ([Z] => (arg: Z) => { def a: Z = arg; a }).apply[Int](2) ``` into ```scala type Z = Int val arg = 2 def a: Z = arg a ```  Apply this beta reduction in the `BetaReduce` phase and `Expr.betaReduce`. Also  refactor the beta-reduce logic to avoid code duplication.  Fixes #15968",closed,compiler/src/dotty/tools/dotc/inlines/InlineReducer.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; compiler/src/dotty/tools/dotc/transform/InlinePatterns.scala; compiler/src/dotty/tools/dotc/transform/PickleQuotes.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; compiler/test/dotty/tools/backend/jvm/InlineBytecodeTests.scala; tests/run-macros/i15968.check; tests/run-macros/i15968/Macro_1.scala; tests/run-macros/i15968/Test_2.scala; tests/run-macros/inline-beta-reduce-polyfunction.check; tests/run-macros/inline-beta-reduce-polyfunction.scala,nicolasstucki,2023-01-05T18:00:41Z,2023-02-12T09:23:39Z
15967,16526,Freeze constraints in a condition check of maximiseType,Not doing so  in a context where GADT inferrence is enabled  such as in TypeOps.refineUsingParent  leads to false inferrences.  Doing so  and removing the previous fix for #15967  fixes the regression in #16339  and keeps #15967 as well as #16123 (which is somewhat related) fixed. ,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i16339.scala,dwijnand,2022-12-14T17:44:58Z,2022-12-15T12:38:10Z
15964,15965,Avoid adding NoSymbol to gadt constraints in TypeOps.instantiateToSubType,fixes lampepfl#15964,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i15964.scala,KacperFKorban,2022-09-04T13:38:13Z,2022-09-04T16:21:47Z
15964,16047,"Backport ""Avoid adding NoSymbol to gadt constraints in TypeOps.instantiateToSubType""",Backports #15965,closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i15964.scala,Kordyjan,2022-09-15T14:51:43Z,2022-09-15T17:14:26Z
15960,15961,Align implementation with spec of soft modifiers,"The spec in https://dotty.epfl.ch/docs/reference/soft-modifier.html says:  > A soft modifier is treated as potential modifier of a definition if it is followed by a hard modifier or a keyword combination starting a definition (def  val  var  type  given  class  trait  object  enum  case class  case object). Between the two words there may be a sequence of newline tokens and soft modifiers.  But the implementation recognized also soft modifiers in front of just `case`  not followed by `class` or `object`. The change caused some breakage for enum cases  where we have `case` alone  but that one cannot be preceded by any soft modifiers anyway. So only neg tests were affected.  Fixes #15960",closed,compiler/src/dotty/tools/dotc/parsing/Tokens.scala; tests/neg-custom-args/erased/i5525.scala; tests/neg/i5525.scala; tests/pos/i15960.scala,odersky,2022-09-04T09:49:37Z,2022-09-05T11:22:17Z
15943,16014,Only check for Scala2LocalSuffix in methods on Scala2x classes,fixes lampepfl#15943,closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; tests/run/i15943.check; tests/run/i15943.scala,KacperFKorban,2022-09-09T20:56:36Z,2022-09-12T11:51:27Z
15940,15951,Better types for class type parameters,"If we see a class type parameter that has a wildcard argument  we now intersect the original info of the class type parameter and the argument. Previously we replaced the class type parameter info with the argument info  but that might lose information.  Fixes #15940",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15940.scala,odersky,2022-09-02T09:53:39Z,2022-09-09T08:48:10Z
15940,16046,"Backport ""Better types for class type parameters""",Backports #15951,closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15940.scala,Kordyjan,2022-09-15T14:49:34Z,2022-09-15T17:02:53Z
15939,15957,Refine AsSeenFrom approximation scheme,"The previous scheme did not set the approximated flag in some cases  which led to the appearance of unhelpful Nothing types in error messages.  We now always mark the AsSeenFrom map as approximated when encountering an illegal prefix at variance <= 0. But we reset it again when a range in a prefix is dropped because we can follow a type alias or use a singleton type info.  Furthermore  we use an `Int`  `approxCount` instead of `approximated` to keep track of multiple approximation points.  Fixes #15939 in the sense that the error message now makes more sense. We still cannot find the implicit conversion; that would require a more global measure to fix the problem (such as going to ANF) or existential types. ",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i15939.check; tests/neg/i15939.scala,odersky,2022-09-03T10:30:17Z,2022-09-04T11:45:12Z
15934,15936,Simplify level fixing scheme,"Don't instantiate co- and contravariant inner type variables eagerly. Lift them instead to the reference level  same as for invariant type variables.  Fixes #15934",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; tests/pos/i15934.scala,odersky,2022-08-30T15:53:27Z,2022-08-30T21:25:25Z
15931,15959,Fix isSubType for static objects filling in type projections,"Fixes #15931  This also fixes #8338  which was mis-classified as a neg test before. ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; tests/pos/i15931.scala; tests/pos/i8338.scala,odersky,2022-09-03T20:08:44Z,2022-09-12T08:22:42Z
15926,17180,Refine criterion when to widen types,"Refine criterion when to widen types in match type reduction.  We now do not widen if the compared-against type contains variant named type parameters. This is intended to fix the soundness problem in #17149. It also fixes the regression in #15926. @Decel was right in suggesting these two were related.  Fixes #17149 Fixes #15926  Todos:   - [x] Check & fix neg test failures  - [x] Add more tests  - [x] Also consider approximating abstract types to lower bounds. This is completely missing so far. There are neither tests nor an implementation.  - [x] Update the docs on match types to explain what goes on here.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/test/dotc/pos-test-pickling.blacklist; docs/_docs/reference/new-types/match-types.md; tests/neg/11982.scala; tests/neg/i11982.check; tests/neg/i11982.scala; tests/neg/i13780.check; tests/neg/i13780.scala; tests/neg/i17149.scala; tests/pos/i15926.contra.scala; tests/pos/i15926.extract.scala; tests/pos/i15926.min.scala; tests/pos/i15926.scala; tests/pos/i17149.scala,odersky,2023-03-29T21:19:28Z,2023-06-06T12:48:57Z
15925,16542,Fix dependent function setup for capture checking,"Fixes #15925.  This issue is caused by a bug in `mapInferred` during CC `Setup`. In this function we convert all top-level non-dependent functions to its dependent counterpart. However  it does not correctly handle the case when the type is an alias to function types. The problematic case in the pattern matching: ```scala case tp @ AppliedType(tycon  args) =>   val tycon1 = this(tycon)   if defn.isNonRefinedFunction(tp) then     // Convert toplevel generic function types to dependent functions     val args0 = args.init     var res0 = args.last     val args1 = mapNested(args0)     val res1 = this(res0)     // ... do the conversion ``` It retrieves the argument and the result type of the function directly from the applied type arguments. This works for function classes. However  if the type here is a type alias to the function  e.g. `type Lazy[X] = Unit => X`  it is still recognized as a function (since `defn.isNonRefinedFunction` does dealiasing) but it is incorrect to get the argument and result type of the function from the type parameter list here (which is just `X :: Nil`).  To fix this  we will dealias the type and recurse when it is an alias to the function type.",closed,compiler/src/dotty/tools/dotc/cc/Setup.scala; tests/neg-custom-args/captures/i15925.scala,Linyxus,2022-12-16T13:30:36Z,2022-12-20T15:12:41Z
15923,15938,Box arguments in type application,Fixes #15923.,closed,compiler/src/dotty/tools/dotc/core/TypeApplications.scala; tests/neg-custom-args/captures/i15923-cases.scala; tests/neg-custom-args/captures/i15923.scala,Linyxus,2022-08-31T10:38:16Z,2022-09-04T17:16:55Z
15922,15948,Fix mapping TypeMaps over annotations,"Avoids orphan parameters when pickling  Fixes #15922  I am not sure about the status of the test in custome-args/captures. Should it pass or be rejected? But in any case it does not crash anymore.",closed,compiler/src/dotty/tools/dotc/ast/TreeTypeMap.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos-custom-args/captures/i15922.scala; tests/pos/i15922.scala,odersky,2022-09-01T17:36:11Z,2022-09-03T09:56:52Z
15921,16264,Fix capture checking of dependent functions,"Fixes #15921.  Capture checking can be unsound for dependent functions. Minimized example:  ```scala trait Cap { def use(): Unit }  def main() = {   val f: (io: {*} Cap) -> {} () -> Unit =     io => () => io.use()  // should be an error    val g: ({*} Cap) -> {} () -> Unit =     io => () => io.use()  // error  as expected } ``` In the above example  we issue an error for `g`  but not for `f`  which is unsound.  The root cause of this issue is that in the `Typer` phase  we only create `InferredTypeTree` for the result type of function values when the expected type of the function literal is non-dependent; and later during `Setup` of the capture checking phase  we only create capture set variables and update the information of function symbols when its result type tree is an `InferredTypeTree`.  To be more specific  the function literal `io => () => io.use()` in both `f` and `g` would be expaneded into the following tree in `Typer`: ```scala def $anonfun(io: {*} Cap): {} () -> Unit =    {     {       def $anonfun(): Unit =          {           io.use()         }       closure($anonfun)     }   } closure($anonfun) ``` For `g`  where the expected type of the function literal is non-dependent  we would create capture set variables in `Setup` for the return type `{} () -> Unit` and update the symbol info of the outer `$anonfun`. For `f`  we would not do these things because `{} () -> Unit` is not an `InferredTypeTree`.  This PR fixes this issue by typing the `DependentTypeTree` as an `InferredTypeTree` in the typer.  ~Currently  although this PR fixes the soundness problem  it brings completeness issues  where sometimes we propagate the universal capability to some capture sets incorrectly  which prevents some positive test cases from being accepted. I am still investigating this issue and thus mark this PR as a draft for now.~  The completeness problem is fixed by two additional refinements: - preciser propagation of captured references through mapped instance (see [dd88672](https://github.com/lampepfl/dotty/pull/16264/commits/dd88672e122293a007401a83f467378baa7c93c9))  - healing ill-formed type parameter capture sets (see [0e7d33a](https://github.com/lampepfl/dotty/pull/16264/commits/0e7d33ad838b5c521ed4e24131379607c4e9130e)). ",closed,compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg-custom-args/boxmap.scala; tests/neg-custom-args/captures/byname.check; tests/neg-custom-args/captures/cc-depfun.scala; tests/neg-custom-args/captures/heal-tparam-cs.scala; tests/neg-custom-args/captures/i15921.scala; tests/neg-custom-args/captures/try.check; tests/neg-custom-args/captures/try.scala; tests/neg-custom-args/captures/usingLogFile.check; tests/neg-custom-args/captures/vars.check,Linyxus,2022-10-31T14:12:41Z,2022-11-22T13:59:39Z
15917,16362,Disallow local term references in staged types,"Fixes #15917 Fixes #16355",closed,compiler/src/dotty/tools/dotc/transform/PCPCheckAndHeal.scala; tests/neg-macros/i15917.scala; tests/neg-macros/i16355a.scala; tests/neg-macros/i16355b.scala,nicolasstucki,2022-11-17T14:53:30Z,2023-01-23T21:29:00Z
15913,17576,test: add in a regression test for #15913,[skip community_build]  closes #15913 ,closed,tests/run/i15913.scala,ckipp01,2023-05-24T15:45:39Z,2023-05-25T06:48:41Z
15913,18941,"Backport ""test: add in a regression test for #15913"" to LTS",Backports #17576 to the LTS branch.  PR submitted by the release tooling.,closed,tests/run/i15913.scala,Kordyjan,2023-11-16T14:38:31Z,2023-11-17T13:49:33Z
15908,19074,First step to pipelining support - enable reading Java symbols from TASTy,"### Release Notes  #### Road to Pipelined Builds We made the next concrete preparation for introducing pipelined Scala 3 builds. Now TASTy can store outline signatures  and additionally the signatures of Java source files. This is the only TASTy breaking change required to introduce pipelining  which means that once it is ready  pipelined build support will be able to release in an upcoming patch version of Scala Next.  - outline signatures (enabled with the `OUTLINEattr` TASTy attribute) only store what is necessary for separate compilation (i.e. method bodies can be elided). This will enable in the future the possibility of a faster type checking phase because a lot of work is no longer necessary to produce this outline TASTy. Elided expressions are represented by the new `ELIDED` tree in TASTy. - Java signatures (enabled with the `JAVAattr` TASTy attribute) can be produced faster than waiting for class files from `javac`  which will be necessary to enable pipelined builds that include Java sources.  ### Full Summary This PR contains the minimal forward incompatible changes of pipelining - reading Java and outline symbols from TASTy. The other changes to implement pipelining have no impact on TASTy or the standard library - so can come in a patch release.  To test reading TASTy produced from Java defined classes  we add two private flags `-Yjava-tasty` and `-Yjava-tasty-output`  which are not expected to be used by any build tool. The tests allow us to write just the java signatures to TASTy  package them in a jar  and then read the Java TASTy from the classpath.  - Keep Java compilation units up to Pickler phase if `-Yjava-tasty` is set. Skip phases for Java when not needed. - Add `JAVAattr` and `OUTLINEattr` TASTy attributes  `ELIDED` tree tag. `ELIDED` trees are pickled as rhs of java term definitions. `ELIDED` trees can only be unpickled if `OUTLINEattr` is present. - Java units will set the `JAVAattr` TASTy attribute. As currently we outline parse Java files we also set the `OUTLINEattr`. - In the future we might expand `OUTLINEattr` to include outline Scala typing. - `OUTLINEattr` and `JAVAattr` do not need any special flags to _read_ from the classpath  however to read outline tasty in the `-from-tasty` mode (so `tasty-inspector` and `scaladoc` are included) we do require an explicit `-Yallow-outline-from-tasty`  as method bodies are required for full functionality. - write java tasty files to a special jar  set with `-Yjava-tasty-output`   this option is for testing purposes only.  Fix sealedDescendants method for Java Enums. - Rename `JavaEnumTrait` flags to `JavaEnum` (reflecting the actual flags set) - test java enum in `SealedDescendantsTest`  fixes #15908",closed,compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/backend/jvm/BTypesFromSymbols.scala; compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/tasty/Attributes.scala; compiler/src/dotty/tools/dotc/core/tasty/DottyUnpickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/fromtasty/AlreadyLoadedCompilationUnit.scala; compiler/src/dotty/tools/dotc/fromtasty/ReadTasty.scala; compiler/src/dotty/tools/dotc/fromtasty/TASTYCompilationUnit.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/quoted/PickledQuotes.scala; compiler/src/dotty/tools/dotc/sbt/ExtractAPI.scala; compiler/src/dotty/tools/dotc/sbt/ExtractDependencies.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/TyperPhase.scala; compiler/src/dotty/tools/io/ClassfileWriterOps.scala; compiler/src/dotty/tools/io/JarArchive.scala; compiler/src/dotty/tools/repl/ReplCompiler.scala; compiler/test/dotty/tools/dotc/core/SealedDescendantsTest.scala; presentation-compiler/src/main/dotty/tools/pc/completions/MatchCaseCompletions.scala,bishabosha,2023-11-24T16:52:17Z,2023-11-28T14:03:28Z
15898,15962,Refine estimation of default arguments in overloading resolution,"When doing a ""size-fits"" check  we previously only worked with the fact whether the given alternative had default parameters or not. We know count the number of default parameters in the applied parameter section  which gives us a better estimate.  Fixes #15898",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/neg/i15898.scala; tests/pending/pos/i15915.scala; tests/pending/pos/i15926.scala; tests/pending/run/i15893.scala; tests/pos/i15898.scala,odersky,2022-09-04T11:24:56Z,2022-09-04T19:49:12Z
15897,15963,Harden canAssign,Fixes #15897,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15897.scala; tests/pos/i15897.scala,odersky,2022-09-04T11:34:14Z,2022-09-04T17:50:19Z
15896,15912,update quick links for new ui,"fixes https://github.com/lampepfl/dotty/issues/15896  <img width=""584"" alt=""Screenshot 2022-08-25 at 18 30 11"" src=""https://user-images.githubusercontent.com/13436592/186719977-4553c11d-3b19-452b-a8b9-f1f2d1dc9f38.png"">",closed,project/Build.scala; project/scripts/cmdScaladocTests,bishabosha,2022-08-25T16:30:26Z,2022-10-21T13:32:19Z
15883,15984,Fix #15883: Interpret inner static object access as this access,Fix #15883: Interpret inner static object access as this access,closed,compiler/src/dotty/tools/dotc/transform/init/Errors.scala; compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; tests/init/neg/closureLeak.check; tests/init/neg/cycle-structure.check; tests/init/neg/i15363.check; tests/init/neg/i15883.scala; tests/init/neg/inherit-non-hot.check; tests/init/neg/promotion-loop.check; tests/init/neg/promotion-segment3.check; tests/init/neg/secondary-ctor4.check; tests/init/neg/t3273.check,liufengyun,2022-09-06T22:07:45Z,2022-09-10T16:12:20Z
15867,18085,Refix avoid GADT casting with ProtoTypes,Revert #17755  refix #15867  fixes  #18062,closed,compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i18062.scala,dwijnand,2023-06-28T10:05:08Z,2023-06-28T18:37:24Z
15864,16042,Track type variable dependencies to guide instantiation decisions,"We now keep track of reverse type variable dependencies in constraints.  E.g. if a constraint contains a clause like      A >: List[B]  We associate with `B` info that `A` depends co-variantly on it. Or  if       A <: B => C  we associate with `B` that `A` depends co-variantly on it and with `C` that `A` depends contra-variantly on it. Here  co-variant means that the allowable range of `A` narrows if the referred-to variable `B` grows  and  contra-variant means that the allowable range of `A` narrows if the referred-to  variable `C` shrinks. If there's an invariant reference such as      A <: Array[B]  Then `A` depends both co- and contra-variantly on `B`.  These dependencies are then used to guide type variable instantiation.  If an eligible type variable does not appear in the type of a typed expression  we interpolate it to one of its bounds. Previously this was done in an ad-hoc manner where we minimized the type variable if it had a lower bound and maximized it otherwise. We now take reverse dependencies into account. If maximizing a type variable would narrow the remaining constraint we minimize  and if minimizing a type variable would narrow the remaining constraint we maximize. Only if the type variable is not referred to from the remaining constraint we resort to the old heuristic based on the lower bound.   Fixes #15864  Todo: This could be generalized in several directions:   - We could base the dependency tracking on type param refs instead of type variables.    That could make the `replace` operation in a constraint more efficient.   - We could base more interpolation decisions on dependencies. E.g. we could    interpolate a type variable only if both the type of an expression and the enclosing    constraint agree in which direction this should be done.  ",closed,compiler/src/dotty/tools/dotc/config/Config.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Constraint.scala; compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/transform/PatmatExhaustivityTest.scala; tests/pos/i15864.scala,odersky,2022-09-15T09:15:03Z,2022-10-31T09:40:59Z
15860,15863,Handle colons in file names when producing SemanticDB,"Fixes #15860  This solution feels pretty hacky to me  but it passes all existing tests... :shrug:",closed,compiler/src/dotty/tools/dotc/semanticdb/Tools.scala; tests/semanticdb/expect/example-dir/FileInDir.expect.scala; tests/semanticdb/expect/example-dir/FileInDir.scala; tests/semanticdb/metac.expect,kierendavies,2022-08-15T10:31:36Z,2022-08-17T11:00:19Z
15855,21596,Three fixes to SAM type handling,"The first two fixes concern characterization of SAM types. One condition of a SAM type is that it can be instantiated with an empty argument list. This was implemented incorrectly. First  we missed the case where the SAM type is a trait with a parent class that takes arguments. In this case the SAM type _cannot_ be instantiated with an empty argument list. Second  we missed the case where the SAM type constructor has a single vararg parameter. In this case the SAM type _can_ be instantiated with an empty argument list.  The second case was also translated incorrectly which led to illegal bytecodes.  Fixes #15855",closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; tests/neg/i15855.scala; tests/run/i15855.scala,odersky,2024-09-15T16:53:37Z,2024-09-18T07:53:59Z
15855,22132,"Backport ""Three fixes to SAM type handling"" to LTS",Backports #21596 to the 3.3.5.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; tests/neg/i15855.scala; tests/run/i15855.scala,WojciechMazur,2024-12-03T21:50:00Z,2024-12-04T17:22:06Z
15852,15865,fix: [SemanticDB] Emit SymbolInformation and Occurrence for anonymous class,"fix https://github.com/lampepfl/dotty/issues/15852  This commit enables ExtractSemanticDB to emit SymbolInformation and SymbolOccurrence of anonymous classes.  e.g.  ```scala trait Foo:   def foo: String  val foo1: Foo = new Foo { def foo: String = ??? } val foo2: Foo = new { def foo: String = ??? } ```  While Scala2 semanticdb-plugin emit symbols for the anonymous class.  Lack of the symbol information / occurrence led Metals not being able to find those anonymous classes as implementations by `go-to-implementation` from `trait Foo`. see: https://github.com/scalameta/metals/issues/4246  <details> <summary>Confirmed this change fix the metals's go-to-implementation issue</summary>  by the following diff  ```diff diff --git a/project/V.scala b/project/V.scala index 19fabea1db..be984e0bdd 100644 --- a/project/V.scala +++ b/project/V.scala @@ -6 7 +6 7 @@ object V {    val scala212 = ""2.12.16""    val scala213 = ""2.13.8""    val scala3 = ""3.1.3"" -  val nextScala3RC = ""3.2.0-RC3"" +  val nextScala3RC = ""3.2.1-RC1-bin-SNAPSHOT""    val sbtScala = ""2.12.14""    val ammonite212Version = ""2.12.16""    val ammonite213Version = ""2.13.8"" diff --git a/tests/unit/src/main/scala/tests/BaseRangesSuite.scala b/tests/unit/src/main/scala/tests/BaseRangesSuite.scala index 8304e59eab..7bef87163a 100644 --- a/tests/unit/src/main/scala/tests/BaseRangesSuite.scala +++ b/tests/unit/src/main/scala/tests/BaseRangesSuite.scala @@ -50 8 +50 7 @@ abstract class BaseRangesSuite(name: String) extends BaseLspSuite(name) {            s""""""/metals.json               |{""a"":               |  { -             |    ""scalaVersion"" : ""$actualScalaVersion""  -             |    ""libraryDependencies"": ${toJsonArray(libraryDependencies)} +             |    ""scalaVersion"" : ""$actualScalaVersion""               |  }               |}               |${input diff --git a/tests/unit/src/test/scala/tests/ImplementationLspSuite.scala b/tests/unit/src/test/scala/tests/ImplementationLspSuite.scala index 4bc5dd599a..2da9827c0a 100644 --- a/tests/unit/src/test/scala/tests/ImplementationLspSuite.scala +++ b/tests/unit/src/test/scala/tests/ImplementationLspSuite.scala @@ -493 9 +493 22 @@ class ImplementationLspSuite extends BaseRangesSuite(""implementation"") {         |package a         |trait A@@nimal         |object Main{ -       |  val animal = new <<>>Animal{ def field(d : String) : Int = 123 } +       |  val animal = <<>>new Animal{ def field(d : String) : Int = 123 }         |}         |"""""".stripMargin  +    scalaVersion = Some(""3.2.1-RC3-bin-SNAPSHOT"")  +  ) + +  check( +    ""anon2""  +    """"""|/a/src/main/scala/a/Main.scala +       |package a +       |trait A@@nimal +       |object Main{ +       |  val animal: Animal = <<>>new <<>>{ def field(d : String) : Int = 123 } +       |} +       |"""""".stripMargin  +    scalaVersion = Some(""3.2.1-RC3-bin-SNAPSHOT"")     )      check( ```  </details>",closed,compiler/src/dotty/tools/dotc/semanticdb/ExtractSemanticDB.scala; compiler/src/dotty/tools/dotc/semanticdb/Scala3.scala; tests/semanticdb/expect/Advanced.expect.scala; tests/semanticdb/expect/Anonymous.expect.scala; tests/semanticdb/expect/Anonymous.scala; tests/semanticdb/expect/Classes.expect.scala; tests/semanticdb/expect/Traits.expect.scala; tests/semanticdb/expect/semanticdb-Types.expect.scala; tests/semanticdb/metac.expect,tanishiking,2022-08-16T05:37:41Z,2022-09-13T16:07:19Z
15849,15886,Add CanEqual instance for Map,Fixes #15849 ,closed,library/src/scala/CanEqual.scala; tests/neg/equality1.scala,Florian3k,2022-08-19T15:43:57Z,2022-12-19T11:03:37Z
15845,15894,Fix swapKey,"Fixes #15845.  Curiously this code was never exercised before  despite the many millions of lines of code we compile. It's even more curious that the faulty behavior could be triggered by such a simple example.",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; tests/pos/i15845/config/State.scala; tests/pos/i15845/config/state/Config.scala,odersky,2022-08-22T15:53:27Z,2022-08-23T10:05:14Z
15835,16235,Make coverage instrumentation more robust,"*As with the last coverage PR  don't worry: most of the changes are ""expect"" files for tests. On top of that  many files have only changed by the order in which the statements are recorded  but this order doesn't matter.*  Small changes which  together  make the instrumentation more robust and fix many bugs: 1. Address comments in #15739 by introducing a type `InstrumentedParts`. The initial problem was that `TypeApply` cannot be instrumented in a straightforward way: `expr[T]` cannot be turned into `{invoked(...); expr}[T]` but must be `{invoked(...); expr[T]}`. To do this  we first try to instrument `expr` and then  if it was successfully instrumented  we move the call to `invoked(...)` to the right place. This gives us the following code in `transform`: ```scala case TypeApply(fun  args) =>   val InstrumentedParts(pre  coverageCall  expr) = tryInstrument(fun) // may generate a call to invoked(...)  but it's not part of the resulting tree yet   if coverageCall.isEmpty then     tree   else     Block(       pre :+ coverageCall  // put the call at the right place (pre contains lifted definitions  if any)       cpy.TypeApply(tree)(expr  args)   ) ``` 2. Exclude more trees from instrumentation  like `Erased` trees and calls to the parents' constructor in `Template#parents`. 3. Escape special characters in `Serializer`. 4. Reposition `Inlined` trees to the current source in order to avoid referencing an unreachable compilation unit. This might be the most controversial change because I've called `Inlines.dropInlined` :eyes:. Any suggestion is welcome!",closed,compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/coverage/Location.scala; compiler/src/dotty/tools/dotc/coverage/Serializer.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/EnumJava.scala; tests/coverage/pos/EnumJava.scoverage.check; tests/coverage/pos/Escaping.scala; tests/coverage/pos/Escaping.scoverage.check; tests/coverage/pos/For.scala; tests/coverage/pos/For.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/InlinedFromLib.scala; tests/coverage/pos/InlinedFromLib.scoverage.check; tests/coverage/pos/Lift.scala; tests/coverage/pos/Lift.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/SimpleMethods.scala; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/pos/TypeLambdas.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/erased/test.check,TheElectronWill,2022-10-23T14:50:48Z,2022-10-24T15:22:36Z
15827,16525,Dealias before checking for outer references in types,Fixes #15827,closed,compiler/src/dotty/tools/dotc/transform/ExplicitOuter.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i15827.scala,odersky,2022-12-14T17:32:39Z,2022-12-17T18:48:25Z
15821,18057,Fix accessibleType for package object prefixes,"Making a package object explicit re-computes the denotations of an overloaded method. So it should not be done after we have pruned down those denotations by an accessibility test. We now do it before checking accessibility.  Fixes #15821",closed,community-build/test/scala/dotty/communitybuild/CommunityBuildTest.scala; compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; tests/pos/i15821.scala,odersky,2023-06-25T18:18:21Z,2023-06-26T16:08:05Z
15821,18088,"Backport ""Fix accessibleType for package object prefixes""","Backports #18057 Fixes #15821",closed,community-build/test/scala/dotty/communitybuild/CommunityBuildTest.scala; compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; tests/pos/i15821.scala,Kordyjan,2023-06-28T11:51:58Z,2023-06-28T13:20:48Z
15820,16001,Improvements for implicit searches with top-level type variables,"Two improvements for implicit searches involving type variables.   1. We now always add a comment when an implicit search is rejected due to the ""too unspecific"" criterion of #13886  commit [Refine checking for underspecified implicit queries](https://github.com/lampepfl/dotty/pull/13886/commits/db5956b36a7e62b77f4b3a9335ab1587e0e47e2c).     There have been quite a few regressions that hit that problem  so it is good to know immediately what    the issue is.    2. There is now a better wildcard approximation of higher-kinded type applications. This makes several programs (including original #15998) compile  which were classified as not specific enough before.  Fixes #15998 Fixes #15820 Fixes #15670 Fixes #15160  Fixes #13986 ",closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,odersky,2022-09-08T16:09:39Z,2022-09-09T13:44:35Z
15802,15856,Ignore prototype only for parameterized new,Fixes #15802,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i15802.scala,odersky,2022-08-14T16:31:56Z,2022-08-15T13:03:06Z
15802,15866,Backport #15856: Ignore prototype only for parameterized new,Backports #15856,closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i15802.scala,Kordyjan,2022-08-16T10:33:19Z,2022-08-16T13:04:34Z
15791,16235,Make coverage instrumentation more robust,"*As with the last coverage PR  don't worry: most of the changes are ""expect"" files for tests. On top of that  many files have only changed by the order in which the statements are recorded  but this order doesn't matter.*  Small changes which  together  make the instrumentation more robust and fix many bugs: 1. Address comments in #15739 by introducing a type `InstrumentedParts`. The initial problem was that `TypeApply` cannot be instrumented in a straightforward way: `expr[T]` cannot be turned into `{invoked(...); expr}[T]` but must be `{invoked(...); expr[T]}`. To do this  we first try to instrument `expr` and then  if it was successfully instrumented  we move the call to `invoked(...)` to the right place. This gives us the following code in `transform`: ```scala case TypeApply(fun  args) =>   val InstrumentedParts(pre  coverageCall  expr) = tryInstrument(fun) // may generate a call to invoked(...)  but it's not part of the resulting tree yet   if coverageCall.isEmpty then     tree   else     Block(       pre :+ coverageCall  // put the call at the right place (pre contains lifted definitions  if any)       cpy.TypeApply(tree)(expr  args)   ) ``` 2. Exclude more trees from instrumentation  like `Erased` trees and calls to the parents' constructor in `Template#parents`. 3. Escape special characters in `Serializer`. 4. Reposition `Inlined` trees to the current source in order to avoid referencing an unreachable compilation unit. This might be the most controversial change because I've called `Inlines.dropInlined` :eyes:. Any suggestion is welcome!",closed,compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/coverage/Location.scala; compiler/src/dotty/tools/dotc/coverage/Serializer.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/EnumJava.scala; tests/coverage/pos/EnumJava.scoverage.check; tests/coverage/pos/Escaping.scala; tests/coverage/pos/Escaping.scoverage.check; tests/coverage/pos/For.scala; tests/coverage/pos/For.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/InlinedFromLib.scala; tests/coverage/pos/InlinedFromLib.scoverage.check; tests/coverage/pos/Lift.scala; tests/coverage/pos/Lift.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/SimpleMethods.scala; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/pos/TypeLambdas.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/erased/test.check,TheElectronWill,2022-10-23T14:50:48Z,2022-10-24T15:22:36Z
15785,19461,Don't leave underspecified SAM types in the code,Fixes #15785,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15785.scala,odersky,2024-01-16T17:10:57Z,2024-01-16T20:38:00Z
15785,20831,"Backport ""Don't leave underspecified SAM types in the code"" to LTS",Backports #19461 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15785.scala,WojciechMazur,2024-06-27T10:00:01Z,2024-06-28T10:10:12Z
15784,19501,fix(#15784): ident rule for pat match  was too strict,"close https://github.com/lampepfl/dotty/issues/15784  Scala 2 allows backticked identifier and capital identifier in pattern match  but Scala 3 mistakenly prohibited them.  For example  the following code is valid in Scala 2   ```scala List(42) match {   case List(_  Rest @ _*) => Rest   case List(_  `Rest` @ _*) => `Rest`   _ => ??? } ``` whereas it resulted in `Not Found Rest` error in Scala 3.  This is because the condition to detect wildcard pattern was so strict that it chose the wrong match arm; `case _ => ifExpr`.",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15784.check; tests/neg/i15784.scala; tests/pos/i15784.scala,i10416,2024-01-21T15:14:02Z,2024-01-22T23:23:15Z
15784,20848,"Backport ""fix(#15784): ident rule for pat match  was too strict"" to LTS",Backports #19501 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15784.check; tests/neg/i15784.scala; tests/pos/i15784.scala,WojciechMazur,2024-06-27T12:02:35Z,2024-06-28T11:22:51Z
15779,16570,Use tree checker in macros,"Trees are only checked if `-Xcheck-macros` is enabled.  Fixes:  - Add missing positions to `{ValDef Bind}.apply`  - Inline by-name ascribed param  - Unbound type variables after implicit search  - Fixes #15779  - Fixes #16636",closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/transform/MacroAnnotations.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/neg-macros/annot-mod-top-method-add-top-method/Macro_1.scala; tests/pos-macros/exprSummonWithTypeVar/Macro_1.scala; tests/pos-macros/exprSummonWithTypeVar/Test_2.scala; tests/pos-macros/i15779/Macro_1.scala; tests/pos-macros/i15779/Test_2.scala; tests/pos-macros/i16636/Macro_1.scala; tests/pos-macros/i16636/Test_2.scala; tests/pos-macros/macro-inline-by-name-cast/Macro_1.scala; tests/pos-macros/macro-inline-by-name-cast/Test_2.scala,nicolasstucki,2022-12-21T17:13:29Z,2023-01-16T10:30:16Z
15771,16235,Make coverage instrumentation more robust,"*As with the last coverage PR  don't worry: most of the changes are ""expect"" files for tests. On top of that  many files have only changed by the order in which the statements are recorded  but this order doesn't matter.*  Small changes which  together  make the instrumentation more robust and fix many bugs: 1. Address comments in #15739 by introducing a type `InstrumentedParts`. The initial problem was that `TypeApply` cannot be instrumented in a straightforward way: `expr[T]` cannot be turned into `{invoked(...); expr}[T]` but must be `{invoked(...); expr[T]}`. To do this  we first try to instrument `expr` and then  if it was successfully instrumented  we move the call to `invoked(...)` to the right place. This gives us the following code in `transform`: ```scala case TypeApply(fun  args) =>   val InstrumentedParts(pre  coverageCall  expr) = tryInstrument(fun) // may generate a call to invoked(...)  but it's not part of the resulting tree yet   if coverageCall.isEmpty then     tree   else     Block(       pre :+ coverageCall  // put the call at the right place (pre contains lifted definitions  if any)       cpy.TypeApply(tree)(expr  args)   ) ``` 2. Exclude more trees from instrumentation  like `Erased` trees and calls to the parents' constructor in `Template#parents`. 3. Escape special characters in `Serializer`. 4. Reposition `Inlined` trees to the current source in order to avoid referencing an unreachable compilation unit. This might be the most controversial change because I've called `Inlines.dropInlined` :eyes:. Any suggestion is welcome!",closed,compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/coverage/Location.scala; compiler/src/dotty/tools/dotc/coverage/Serializer.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/EnumJava.scala; tests/coverage/pos/EnumJava.scoverage.check; tests/coverage/pos/Escaping.scala; tests/coverage/pos/Escaping.scoverage.check; tests/coverage/pos/For.scala; tests/coverage/pos/For.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/InlinedFromLib.scala; tests/coverage/pos/InlinedFromLib.scoverage.check; tests/coverage/pos/Lift.scala; tests/coverage/pos/Lift.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/SimpleMethods.scala; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/pos/TypeLambdas.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/erased/test.check,TheElectronWill,2022-10-23T14:50:48Z,2022-10-24T15:22:36Z
15749,15768,Several fixes to boxing,"Fill in and partially revamp the boxing logic. Previously  we missed some box annotations  did not do box/unbox operations for arguments and results of function types  and ignored boxes during subtyping tests.  In detail:   1. Update info of TypeDef symbols to account for boxing. Previously  the     changes were made to the tree  but were not propagated to the symbol.  2. Maintain alias types when adding boxes.  3. Simulate boxing and unboxing also for arguments and results of functions (c.f. `adaptBoxed`).   4. Treat all arguments of applied types as boxed  unless the type is (an alias of) a function type. TODO: Decide how to treat arguments of classes or abstract types that are subtypes of function types.  5. Account for boxes in subtyping tests.  6. Fuse capturing types on creation.  7. Tweak `mightAccountFor`.  Fixes #15749 Fixes #15772",closed,compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CapturingType.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; compiler/src/dotty/tools/dotc/typer/CheckCaptures.scala; library/src-bootstrapped/scala/Retains.scala; library/src-bootstrapped/scala/internal/requiresCapability.scala; library/src-bootstrapped/scala/retainsByName.scala; library/src/scala/annotation/capability.scala; library/src/scala/annotation/internal/CaptureChecked.scala; tests/neg-custom-args/captures/boxmap.check; tests/neg-custom-args/captures/boxmap.scala; tests/neg-custom-args/captures/capt1.check; tests/neg-custom-args/captures/capt1.scala; tests/neg-custom-args/captures/curried-simplified.check; tests/neg-custom-args/captures/eta.scala; tests/neg-custom-args/captures/i15749.scala; tests/neg-custom-args/captures/i15749a.scala; tests/neg-custom-args/captures/i15772.check; tests/neg-custom-args/captures/i15772.scala; tests/neg-custom-args/captures/lazylist.check; tests/neg-custom-args/captures/lazylists2.check; tests/neg-custom-args/captures/real-try.check,odersky,2022-07-27T13:16:21Z,2022-08-10T13:57:06Z
15749,15877,Add experimental capture checking,"This PR merges branch cc-experiment into main. The capture checking language extensions are all under a -Ycc flag. At the present stage  they should be considered highly experimental and unstable.  Nevertheless  I think it makes sense to have capture checking as part of the main branch. It will encourage more experiments and will make it easier to incorporate improvements in a stable manner. Since we will have several new people working on capture checking starting next month  it's a good time to merge now.  ",closed,compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/BoxedTypeCache.scala; compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CapturingType.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/cc/Synthetics.scala; compiler/src/dotty/tools/dotc/config/Config.scala; compiler/src/dotty/tools/dotc/config/Printers.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/NameOps.scala; compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/Substituters.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala,odersky,2022-08-17T19:14:14Z,2022-08-29T17:25:34Z
15741,15744,Implementation restriction: No partial functions with CFT results,"Fixes #15741  I tried for a while to make this work  but it is just too gnarly.",closed,compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; tests/neg/i15741.scala,odersky,2022-07-25T12:38:01Z,2022-08-22T08:39:33Z
15738,15742,Add missing dealias in isContextFunctionRef,Fixes #15738,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15738.scala,odersky,2022-07-24T08:07:10Z,2022-08-01T15:56:45Z
15736,22632,Fixes #15736 blocking Scala 3 on Android,"Fixes #15736  Box native instantiated method return type if sam method return type is not a primitive type to satisfy conditions specified in   https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html Condition is not enforced by JVM but by Android ART.",closed,compiler/src/dotty/tools/backend/jvm/BCodeBodyBuilder.scala,ddtthh,2025-02-20T21:38:31Z,2025-03-11T15:24:25Z
17706,19850,Add custom matchers for completions (fuzzy search for presentation compiler),"Fixes https://github.com/scalameta/metals/issues/4656 Fixes https://github.com/lampepfl/dotty/issues/5507 Fixes https://github.com/lampepfl/dotty/issues/17706  To ensure CI output will be the same on all runners  I'm scheduling runs on all jvm versions + windows.  [test_windows_full] [test_java8] [test_java11] [test_java15] [test_java17] [test_java18] [test_java19]",closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; presentation-compiler/src/main/dotty/tools/pc/completions/Completions.scala; presentation-compiler/test/dotty/tools/pc/base/BaseCompletionSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionDocSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionExtensionSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionKeywordSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionOverrideSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSnippetNegSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSnippetSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,rochala,2024-03-01T19:23:56Z,2024-04-12T17:42:48Z
17706,21062,"Backport ""Add custom matchers for completions (fuzzy search for presentation compiler)"" to LTS",Backports #19850 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/interactive/Completion.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; presentation-compiler/src/main/dotty/tools/pc/completions/Completions.scala; presentation-compiler/test/dotty/tools/pc/base/BaseCompletionSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionDocSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionExtensionSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionKeywordSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionOverrideSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSnippetNegSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSnippetSuite.scala; presentation-compiler/test/dotty/tools/pc/tests/completion/CompletionSuite.scala,WojciechMazur,2024-07-05T16:45:56Z,2024-07-05T21:32:53Z
15725,16523,Support inline overrides in value classes,"Fixes #15725  Three fixes:   - Don't make extension method copies of inline methods  - Make retainedBody methods discoverable by entering them in their parent scope  so that they get an extension method  - But strip the retainedBody in the extension method",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/transform/ExtensionMethods.scala; compiler/src/dotty/tools/dotc/transform/ValueClasses.scala; tests/run/i15725.check; tests/run/i15725.scala,odersky,2022-12-14T16:49:26Z,2023-01-17T20:43:45Z
15723,15737,Fix treatment of parameter selections via this in constructors.,Fixes #15723,closed,compiler/src/dotty/tools/dotc/transform/Constructors.scala; tests/pos/fewer-braces.scala; tests/run/i15723.check; tests/run/i15723.scala; tests/run/patmat.check; tests/run/patmat.scala,odersky,2022-07-22T19:42:29Z,2022-07-23T19:58:27Z
15715,18105,Add regression test for issue #15715,"Closes #15715  Also seems fixed in 3.3.1-RC1",closed,tests/pos/i15715.scala,jchyb,2023-06-30T11:08:34Z,2023-06-30T12:40:30Z
15715,19053,"Backport ""Add regression test for issue #15715"" to LTS",Backports #18105 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos/i15715.scala,Kordyjan,2023-11-23T17:34:40Z,2023-12-08T15:18:16Z
15709,17143,Add regression test for #15709,Closes #15709,closed,tests/pos-macros/i15709.scala,nicolasstucki,2023-03-23T13:06:15Z,2023-03-23T15:42:11Z
15705,15739,Keep 'fun' and 'args' together when instrumenting TypeApply for coverage,"~~Based on PR #15648.~~ edit: rebased on main because #15648 has been merged  Fixes #15705 :)  Note: most of the changes in #15648 (and thus in this PR) are tests  the interesting code is in `InstrumentCoverage.scala`.",closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scala; tests/coverage/pos/PolymorphicMethods.scoverage.check,TheElectronWill,2022-07-23T16:29:06Z,2022-07-27T07:47:28Z
15705,15745,Backport *more* coverage fixes to 3.2.0,"Backports #15648. I got a head start and ported #15739 too  because it's important that the coverage instrumentation works for production code.  edit: Like mentioned in the original PR  most of the changes are tests. The actual changes in the compiler are in `InstrumentCoverage.scala`.",closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/CompiletimeUninitialized.scala; tests/coverage/pos/CompiletimeUninitialized.scoverage.check; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/Literals.scoverage.check; tests/coverage/pos/MatchNumbers.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scala; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/inline-def/test.scoverage.check; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/java-methods/JavaObject.java; tests/coverage/run/java-methods/StaticMethods.java; tests/coverage/run/java-methods/test.check; tests/coverage/run/java-methods/test.scala; tests/coverage/run/java-methods/test.scoverage.check; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/lifting/test.scoverage.check; tests/coverage/run/parameterless/test.check; tests/coverage/run/parameterless/test.scala; tests/coverage/run/parameterless/test.scoverage.check,TheElectronWill,2022-07-25T14:55:39Z,2022-07-27T08:20:32Z
15702,15712,Fix expansion and unexpansion of mixin qualified names,"A mixin qualifier foo$A is a qualified name. Previously these were flattened to SimpleNames when expanding with a trait prefix. But then ResolveSuper cannot decompose the name anymore.  To fix this  we now treat QualifiedNames specially in the replace calls for SymDenotations#fullNameSeparated and NameOps#unexpanded. Qualifiers are preserved and the replacement proceeds recursively to their underlying part. For some as yet unknown reason we can't do this for TraitSetterNames. It seems these need to be flattened.  Fixes #15702",closed,compiler/src/dotty/tools/dotc/core/NameOps.scala; compiler/src/dotty/tools/dotc/core/Names.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/transform/Mixin.scala; tests/run/i15702.check; tests/run/i15702.scala,odersky,2022-07-20T20:11:10Z,2022-07-21T12:44:43Z
15701,15720,Fix #15701: Implement js.dynamicImport for dynamic module loading.,,closed,.github/workflows/ci.yaml; compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; compiler/src/dotty/tools/backend/sjs/JSDefinitions.scala; compiler/src/dotty/tools/backend/sjs/JSEncoding.scala; compiler/src/dotty/tools/backend/sjs/JSPrimitives.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/inlines/Inlines.scala; compiler/src/dotty/tools/dotc/transform/Dependencies.scala; compiler/src/dotty/tools/dotc/transform/ExpandSAMs.scala; compiler/src/dotty/tools/dotc/transform/sjs/PrepJSInterop.scala; project/Build.scala,sjrd,2022-07-21T16:34:12Z,2022-07-23T13:17:20Z
15687,15748,Avoid null types when reducing match types,"Fixes #15687  Interestingly that one escaped null checking even under -Yexplicit-nulls. ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg/i15687.scala,odersky,2022-07-25T16:53:53Z,2022-07-26T18:02:28Z
15673,15675,Survive TypeErrors in isMatchedBy,"Fixes #15673  ",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/pos/i15673.scala,odersky,2022-07-14T10:19:39Z,2022-07-15T04:45:04Z
15673,15760,Backport #15675: Survive TypeErrors in isMatchedBy,Backports #15675,closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/pos/i15673.scala,Kordyjan,2022-07-26T14:56:01Z,2022-07-27T08:21:27Z
15670,16001,Improvements for implicit searches with top-level type variables,"Two improvements for implicit searches involving type variables.   1. We now always add a comment when an implicit search is rejected due to the ""too unspecific"" criterion of #13886  commit [Refine checking for underspecified implicit queries](https://github.com/lampepfl/dotty/pull/13886/commits/db5956b36a7e62b77f4b3a9335ab1587e0e47e2c).     There have been quite a few regressions that hit that problem  so it is good to know immediately what    the issue is.    2. There is now a better wildcard approximation of higher-kinded type applications. This makes several programs (including original #15998) compile  which were classified as not specific enough before.  Fixes #15998 Fixes #15820 Fixes #15670 Fixes #15160  Fixes #13986 ",closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,odersky,2022-09-08T16:09:39Z,2022-09-09T13:44:35Z
15666,15671,Fix computation of class nesting level in inliner,Fixes #15666,closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i15666.scala,odersky,2022-07-13T16:56:30Z,2022-07-14T15:02:53Z
15666,15755,Backport #15671: Fix computation of class nesting level in inliner,Backports #15671,closed,compiler/src/dotty/tools/dotc/typer/Inliner.scala; tests/pos/i15666.scala,Kordyjan,2022-07-26T12:55:22Z,2022-07-27T08:22:05Z
15661,19432,Add a test case  proving i15661 is fixed,Closes #15661  This is broken in 3.2.0-RC1  but fixed in main as well as 3.3.0-RC1. ,closed,tests/warn/i15661.scala,dwijnand,2024-01-12T15:20:54Z,2024-01-15T14:23:07Z
15652,15667,Better infos for dependent class parameter references,"We sometimes create a dependent parameter reference p.X where `p` is a path with a type that has a wildcard argument  e.g. `P[X >: L <: H].` So far the denotation of `p.X` had as info the bounds with which `X` was declared in `P`. Now it gets the actual parameter bounds `>: L <: H` instead.  Fixes #15652  #15652 started failing when tuple unpackings started to use `val`s instead of `def`s in #14816. That caused dependent class parameter references to be created and uncovered the problem.",closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15652.scala,odersky,2022-07-13T15:10:26Z,2022-07-18T12:18:44Z
15652,15753,Backport #15667: Better infos for dependent class parameter references,Backports #15667,closed,compiler/src/dotty/tools/dotc/core/Denotations.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15652.scala,Kordyjan,2022-07-26T10:09:32Z,2022-07-27T08:22:22Z
15650,15651,Refutable extractor may be an Apply tree,Fixes #15650,closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/pos/i15650.scala,griggt,2022-07-12T00:05:10Z,2022-07-13T08:28:11Z
15650,15672,[backport] Refutable extractor may be an Apply tree,Backport of #15651  which fixes a regression in 3.2.0-RC1.,closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/pos/i15650.scala,griggt,2022-07-13T22:30:53Z,2022-07-25T11:43:27Z
15649,15658,Harden erasure of TermRefs,"If a getter TermRef has a MethodType  erase it to the erasure of the method result type.  Fixes #15649  Since the fault in #15649 is highly non-deterministic  I can only guess what the reason was. I think what happened was that the TermRef was created very late  when the TermRef was already a getter. I.e. after phase `Getters`  which is itself after `Erasure`. The whole thing was launched from the code that generates static forwarders in the backend.  Type erasure is run at erasure phase  but if there is no previous denotation of the `TermRef`  it will keep the first one it read  which would have the `MethodType` as underlying type. The end result was that the `TermRef` was erased to a method type  where it should have been erased to the result type. Consequently  we ended up with a MethodType as the parameter type of another method  which is unexpected.  But all that is just a guess. I am not even sure this PR will fix the problem since it comes up so rarely.",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/pos/i15649.scala,odersky,2022-07-12T15:11:07Z,2022-07-14T15:03:49Z
15649,15751,Backport #15658: Harden erasure of TermRefs,Backports #15658,closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/pos/i15649.scala,Kordyjan,2022-07-26T09:53:00Z,2022-07-27T08:22:40Z
15629,15631,Avoid assertion failure for illegal trait inheritance,Fixes #15629,closed,compiler/src/dotty/tools/dotc/typer/Namer.scala,odersky,2022-07-09T09:34:55Z,2022-07-11T08:47:33Z
15618,15625,Fix two problems related to match types as array elements," 1. The erasure of an array of matchtypes should sometimes be Object     instead of Object[]  2. Classtags of matchtypes can be created only if all alternatives     produce the same classtag.  About 1: If a matchtype with alternative types A_1  ... A_n is an array element  it should be treated in the same way as the type ? <: A_1 | ... | A_n. It's an _unknown_ subtype of A_1 | ... | A_n. That can cause the erasure of the underlying array to be Object.  Fixes #15618",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i15618.check; tests/neg/i15618.scala; tests/run/i15618.check; tests/run/i15618.scala,odersky,2022-07-08T19:00:02Z,2022-07-10T08:04:29Z
15618,15761,Backport #15625: Fix two problems related to match types as array elements,Backports #15625,closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i15618.check; tests/neg/i15618.scala; tests/run/i15618.check; tests/run/i15618.scala,Kordyjan,2022-07-26T15:40:19Z,2022-07-27T08:21:17Z
15618,16708,Fix check whether classtag can be generated for match types,"The previous check  meant to address #15618  tested whether all alternatives of a match type had the same classtag and only then permitted a classtag for the match type. This was the wrong test. It did not work for recursive match types  because it could lead to stack overflow for them. And it did not take into account that match types could be reduced.  A better test is to simply declare that match types themselves don't have a stable erasure  just like TypeBounds don't have a stable erasure. If we find an applied type with a match type as definition  we proceed to its translucent supertype  which will try a match type reduction. If that succeeds we produce the classtag of the redux. If not  we end up with an unreduced matchtype and refuse to generate a classtag for it.  Fixes #16706 Fixes #16707",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i15618.check; tests/neg/i15618.scala; tests/pos/i16706.scala; tests/pos/i16707.scala,odersky,2023-01-17T11:23:54Z,2023-01-23T15:26:19Z
15612,15619,Always expand inline accessor names,Fixes #15612,closed,compiler/src/dotty/tools/dotc/inlines/PrepareInlineable.scala; tests/neg/i15323.scala; tests/pos/i15612.scala; tests/run-macros/i5119.check,odersky,2022-07-08T13:04:46Z,2022-07-20T11:05:53Z
15612,15752,Backport #15619: Always expand inline accessor names,Backports #15619,closed,compiler/src/dotty/tools/dotc/typer/PrepareInlineable.scala; tests/neg/i15323.scala; tests/pos/i15612.scala; tests/run-macros/i5119.check,Kordyjan,2022-07-26T10:06:49Z,2022-07-27T08:22:31Z
15608,15617,Don't check import selectors for Java code,"Moving import selector checking from PostTyper to Typer had the side-effect that they were also checked in Java code. But that does not work since the Java files are compiled before the Scala files so the selected reference has not been seen yet.  Fixed by disabling import selector checks for Java files.  Fixes #15608",closed,compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/pos/i15608/bar/Test.scala; tests/pos/i15608/foo/JavaMDCBinder.java,odersky,2022-07-08T09:51:44Z,2022-07-20T11:06:21Z
15598,16296,Use `baseVersion` for reference documentation,"Now when we are syncing `language-reference-stable` with the release branches after each patch release  it is safe to use the `baseVersion` as a version for the documentation. It wasn't the case earlier because we assumed a slightly more complicated model for publishing the reference documentation.  Note to self: This should be ported to both `main` and `release-3.2.2`. The former will be tried automatically  but will probably fail due to conflicts.  see: #15598",closed,project/Build.scala,Kordyjan,2022-11-07T15:59:45Z,2022-11-07T16:19:03Z
15579,15593,Irrefutable for generators don't require `withFilter` under `-source:future`,Fixes #15579,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i15579.scala,griggt,2022-07-05T19:57:29Z,2022-07-06T09:04:31Z
15579,15602,Backport #15593 to 3.2.0,"Backports #15593 Fixes #15579 for 3.2.0",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/i15579.scala,Kordyjan,2022-07-06T15:27:11Z,2022-07-06T17:17:20Z
15575,15577,Reject all explicitly written type references with bad bounds,"Reject type definitions or bound types in patterns that have possibly conflicting bounds. However  we can suppress checks for type parameters  since these will need to be instantiated  with good types themselves. We can also suppress checks for members of abstract classes or traits or types in refinements since in each case these can be accessed only by selecting from a concrete value  and bounds are checked when such a value is created.   Fixes further unsoundness examples added to neg/i15569.scala.  Fixes #15578  Fixes #15575 Fixes #15609  ",closed,community-build/community-projects/zio; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/init/neg/i11572.scala; tests/init/neg/i5854.scala; tests/neg-custom-args/fatal-warnings/i13820.scala; tests/neg-custom-args/i15575.check; tests/neg-custom-args/i15575.scala; tests/neg/i15568.check; tests/neg/i15569.scala; tests/pos/i13820.scala; tests/semanticdb/expect/i5854.expect.scala; tests/semanticdb/expect/i5854.scala,odersky,2022-07-04T08:50:53Z,2022-07-09T22:27:28Z
15569,15571,Check type arguments for bad bounds,"Fixes #15569  Also: Check for good bounds before reporting other bounds violations  Fixes #15568 ",closed,community-build/community-projects/zio; compiler/src/dotty/tools/dotc/inlines/InlineReducer.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/i15568.check; tests/neg/i15568.scala; tests/neg/i15569.scala,odersky,2022-07-02T08:59:53Z,2022-07-04T07:23:44Z
15568,15571,Check type arguments for bad bounds,"Fixes #15569  Also: Check for good bounds before reporting other bounds violations  Fixes #15568 ",closed,community-build/community-projects/zio; compiler/src/dotty/tools/dotc/inlines/InlineReducer.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/i15568.check; tests/neg/i15568.scala; tests/neg/i15569.scala,odersky,2022-07-02T08:59:53Z,2022-07-04T07:23:44Z
15567,15572,Look for synthetic applies also under type applications,Fixes #15567,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15567.scala,odersky,2022-07-02T09:47:28Z,2022-07-03T13:22:16Z
15564,15710,Avoid references to unbound parameters in applied type patterns,Fixes #15564,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15564.scala,odersky,2022-07-20T14:21:34Z,2022-07-25T11:22:42Z
15546,17569,test: add in a regression test for #15546,[skip community_build]  closes #15546 ,closed,tests/pos/i15546.scala,ckipp01,2023-05-24T08:36:24Z,2023-05-24T10:11:37Z
15525,15556,Optimize isSameType for invariant applied types with the same structure," Comparing two deeply applied types with the same structure uses recursive isSameType tests if the types are invariant. Each of these gets translated to two isSubType tests which can lead to exponential blowup relative to the type's nesting depth. This problem does not occur if the two types are `eq`. But two types might still be structurally equal modulo dealiasing.  We now cache isSameType successes after a certain nesting level to avoid recomputation.  Fixes #15525.  ~~Reclassifies #15365 as a pos test~~",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg/i15525.scala; tests/pos/i15525.scala,odersky,2022-06-30T09:48:32Z,2022-06-30T18:31:15Z
15514,15524,Fix #15514 in Parser,"There was a missing set of parentheses in parser which caused a lookahead from INTERPOLATIONID  which should be illegal  since the lookahead then might set the next TokenData which is subsequently overwritten by reset.  We now demand that lookahead cannot be called if the current token is a INTERPOLATIONID.  There were two variants of `lookahead` in the Scanner  which only differed in camelCase or not. Rename one to`peekAhead` to make the code clearer.  Alternative for #15518 and #15519.",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/parsing/Scanners.scala; tests/pos/i15514.scala,odersky,2022-06-25T16:52:21Z,2022-06-27T08:39:53Z
15507,15508,Fix cycle detection for type aliases with wildcard arguments,"#15507 escaped the cycle detector since when the right hand side was typechecked  the type constructor _NestedSet2's type was `[X] <: Any` and the constructor was marked Provisional. When faced with the application `NestedSet2[?]`  the type checker tried to reduce the application  since abstract types like `NestedSet2` are not allowed to take wildcards (this would be equivalent in power to existential types  which are not supported in Scala 3). Reduction in a covariant context would give `Any`  which means that the recursive constructor disappears.   There was a bug in `safeDealias` that caused this behavior also for non-variant variables. This got fixed in the 2nd commit.   Fixes #15507",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15507.scala,odersky,2022-06-23T10:19:57Z,2022-06-23T17:36:44Z
15505,15530,Fix lifting of arguments with -coverage-out,"Fixes #15078  fixes #15487  fixes #15505  Summary: - `LiftCoverage` extended `LiftComplex`  it now extends `LiftImpure` and forces the lifting of non-erased applications - `StringContext.s  f  raw` are now excluded from lifting - `ElimRepeated` didn't handle lifted arguments properly  because it assumed that every argument was a `Typed` tree  which is not the case for arguments lifted by the coverage transformation. This is now fixed.  Most of the added lines are tests :)  ## How I fixed it  Let's see if I can imitate the awesome explanations of Martin :smile:  `InstrumentCoverage` modifies the AST just after the pickling  and insert calls to `scala.runtime.coverage.Invoker.invoked` that record  at runtime  which methods are called. See an example [here](https://github.com/lampepfl/dotty/issues/15078#issuecomment-1127592307). To lift functions' arguments  it uses `LiftCoverage`  which lives with its `LiftXX` siblings in `EtaExpansion.scala`.  `LiftCoverage` previously extended `LiftComplex`. A quick look at the definition of `LiftComplex` tells me that it lifts everything  except trees that are constants or have the maximal purity `PurePath`. And [`TreeInfo.exprPurity`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/ast/TreeInfo.scala#L418) says that erased things are `Pure`  not `PurePath`! It seems that `LiftImpure` would be more appropriate than `LiftComplex`. Therefore  I happily type `LiftCoverage extends LiftImpure`. But stopping there would introduce another bug!  For example  given this code: ```scala def f() = throw RuntimeException() // throws an exception def g() = 0 // pure function someFunction(f()  g()) ``` We want to generate something like this  even if g has no side effects: ```scala Invoker.invoked(""f""  ...) val _f = f() Invoker.invoked(""g""  ...) val _g = g() Invoker.invoked(""someFunction""  ...) someFunction(_f  _g) ``` This way  f will throw its exception and prevent g from being marked as covered  which would be wrong.  Therefore  all non-erased applications must be lifted. This means that  when lifting arguments  `LiftCoverage.noLift` must return `false` for all non-erased `Apply`: ```scala override def noLift(expr: tpd.Tree)(using Context) =   if liftingArgs then noLiftArg(expr) else super.noLift(expr)  private def noLiftArg(arg: tpd.Tree)(using Context): Boolean =   arg match     case a: tpd.Apply => a.symbol.is(Erased) // don't lift erased applications  but lift all others     // the other cases recurse on more complex trees that may contain applications ```  Similarly  string interpolators `s`  `f` and `raw` shouldn't be lifted. I've excluded those three functions from lifting in `InstrumentCoverage.needsLift`.  Finally  I took a look at the mysterious issue #15078. For a call to this java method: ```scala Path createTempDirectory(String prefix  FileAttribute<?>... attrs) ``` `-Ycheck-all` reported the following problem: ```scala java.lang.AssertionError: assertion failed: Found:    ($2$ : java.nio.file.attribute.FileAttribute[?]*) Required: Array[? <: java.nio.file.attribute.FileAttribute[?]] ``` And the code crashed at runtime...  Yet again  it only happened when the arguments were lifted by `-coverage-out`. A quick minimization revealed that the problem was the handling of the java varargs  in the presence of lifted arguments.  I know that `ElimRepeated` is the phase that takes care of handling varargs. Some debugging showed that [`ElimRepeated.transformApply`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala#L126) was triggered  with: - `isWildcardStarArg(arg)`: true - `arg` of type `Ident`  `isWildcardStarArg` properly handled `Ident`  but not `ElimRepeated`  which assumed that everything was a `Typed` tree. Fixing that made the bug vanish.",closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-06-27T09:29:57Z,2022-07-02T14:52:36Z
15505,15573,Backport coverage fixes to 3.2.0,Backport #15530 and #15504 :),closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/inline-def/test.check; tests/coverage/run/inline-def/test.scala; tests/coverage/run/inline-def/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-07-02T20:10:28Z,2022-07-04T07:47:34Z
15503,16157,[Semester Project] Add new front-end phase for unused entities and add support for unused imports,"This PR  related to my **semester project** #15503  on adding **dotty's linter features**  adds the following:  - [x] Add the `CheckUnused` front-end phase  which will check the the tree produced by the typer  for unused entites (imports  local defs  ...) - [x] Emit warning for `-Wunused:imports` including **given imports** and **wildcard imports** - [x] Emit warning for `-Wunused:locals` - [x] Emit warning for `-Wunused:privates` - [x] Emit warning for `-Wunused:params` - ~~Emit warning for `-Wunused:patvars`~~ - [x] Emit warning for `-Wunused:unsafe-warn-patvars` - [x] Emit warning for `-Wunused:linted` - [x] Add a simple _fatal-warning_ compilation-test suit - [x] _Fixes for the warning format_ - [x] Better help in CLI for `-Wunused` - [x] Add `-Wunused:givens` alias to `-Wunused:implicits`  Here are a few examples: #### Unused Imports ```scala object Foo {   import collection.mutable.{Set  Map}    def main(args: Array[String]) =     val bar = Set(""this"" ""set"" ""is"" ""used"")     println(s""Hello World: $bar"") } ```  ``` sbt:scala3> scalac -Wunused:imports ../Foo.scala [...] -- Warning: ../scratch_files/Hello.scala:2:34 ---------------------------------- 2 |  import collection.mutable.{Set  Map}   |                                  ^^^   |                                  unused import 1 warning found ``` #### Unused local definitions ```scala class Foo {   def bar =     val a = 1     2 + 2 } ```  ``` sbt:scala3> scalac -Wunused:locals ../Foo.scala [...] -- Warning: ../scratch_files/MyHello.scala:3:8 --------------------------------- 3 |    val a = 1   |    ^^^^^^^^^   |    unused local definition 1 warning found ``` #### Unused private members ```scala class Foo {   private def a = 1   private def b = 2    def doSomething = b } ```  ``` sbt:scala3> scalac -Wunused:privates ../Foo.scala [...] -- Warning: ../scratch_files/MyHello.scala:2:14 -------------------------------- 2 |  private def a = 1   |  ^^^^^^^^^^^^^^^^^   |  unused private member 1 warning found ``` #### Unused parameters ```scala def foo(a: String)(using Int) = bar ```  ``` sbt:scala3> scalac -Wunused:params ../scratch_files/Foo.scala [...] -- Warning: ../scratch_files/MyHello.scala:1:8 --------------------------------- 1 |def foo(a: String)(using Int) = bar   |        ^   |        unused explicit parameter -- Warning: ../scratch_files/MyHello.scala:1:25 -------------------------------- 1 |def foo(a: String)(using Int) = bar   |                         ^   |                         unused implicit parameter 2 warnings found ``` #### Unused pattern variables ```scala def foo(a: List[Int]) = a match     case head :: tail => ???     case Nil => ??? ```  ``` sbt:scala3> scalac -Wunused:unsafe-warn-patvars ../scratch_files/Foo.scala [...] -- Warning: ../scratch_files/MyHello.scala:2:9 --------------------------------- 2 |    case head :: tail => ???   |         ^^^^   |         unused pattern variable -- Warning: ../scratch_files/MyHello.scala:2:17 -------------------------------- 2 |    case head :: tail => ???   |                 ^^^^   |                 unused pattern variable 2 warnings found ```  Please check the [test file](tests/neg-custom-args/fatal-warnings/i15503/i15503a.scala) for the handled cases.  @odersky @anatoliykmetyuk  ",closed,compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/config/CliCommand.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/neg-custom-args/fatal-warnings/i15503-scala2/scala2-t11681.scala; tests/neg-custom-args/fatal-warnings/i15503a.scala; tests/neg-custom-args/fatal-warnings/i15503b.scala; tests/neg-custom-args/fatal-warnings/i15503c.scala; tests/neg-custom-args/fatal-warnings/i15503d.scala; tests/neg-custom-args/fatal-warnings/i15503e.scala; tests/neg-custom-args/fatal-warnings/i15503f.scala; tests/neg-custom-args/fatal-warnings/i15503g.scala; tests/neg-custom-args/fatal-warnings/i15503h.scala; tests/neg-custom-args/fatal-warnings/i15503i.scala; tests/neg-custom-args/fatal-warnings/i15503j.scala,PaulCoral,2022-10-09T14:07:44Z,2023-01-09T10:56:45Z
15503,17160,Improve -Wunused: locals  privates with unset vars warning #16639,"This PR is related to my Bachelor Semester Project  supervised by @anatoliykmetyuk.  The latter consist in improving and implementing more Scala 3 linter options (see  #15503)  with #16639 as a starting issue fixed in this PR.  - During the traversal in CheckUnused.scala (Miniphase & local TreeTraverser)  when reaching an `Assign` case  symbols are collected as set  and then used to filter used locals and privates variable at reporting time. - Adapt test suit  and Add more test accordingly. - Note that for a same variable the unused warning always has priority and shadows the unset warning.  That feature follows the Scala 2 `-Ywarn-unused:<args>` behavior.",closed,compiler/src/dotty/tools/dotc/transform/CheckUnused.scala; tests/neg-custom-args/fatal-warnings/i15503b.scala; tests/neg-custom-args/fatal-warnings/i15503c.scala; tests/neg-custom-args/fatal-warnings/i15503i.scala; tests/neg-custom-args/fatal-warnings/i16639a.scala; tests/pos/i16639false-pos-on-trait.scala,schuetzcarl,2023-03-28T12:37:40Z,2023-05-16T14:24:18Z
15494,15498,Fix #15494: Handle non-specialized functions in EtaReduce.,"In Scala.js  function specialization is disabled. This means that non-specialized functions can reach `EtaReduce`. Previously  it did not handle the shape of right-hand-side for non-specialized functions returning primitives. We fix the issue by handling those  like we already handled `.asInstanceOf`s.  ### How I fixed it  First  I took the reproduction from the issue and put it in `sandbox/scalajs/src/hello.scala`. I verified that I could reproduce with ``` > sjsSandbox/run ``` Next  I looked at the Scala.js IR produced for this code: ``` > sjsSandbox/scalajsp Thunk$ ``` showed nothing wrong  but ``` > sjsSandbox/scalajsp hello$package$ ``` showed  sure enough  an extra wrapping when calling `asFunction0` for `f2` and `f3`  which is not present for `f1`: ```scala   def Test;V() {     val i: scala.runtime.IntRef = scala.runtime.IntRef::create;I;Lscala.runtime.IntRef(0);     val f1: scala.Function0 = <redacted>;     if ((!(mod:hello.Thunk$.asFunction0;Lscala.Function0;Lscala.Function0(f1) === f1))) {       mod:scala.runtime.Scala3RunTime$.assertFailed;E()     };     val f2: scala.Function0 = <redacted>;     if ((!(mod:hello.Thunk$.asFunction0;Lscala.Function0;Lscala.Function0(new scala.scalajs.runtime.AnonFunction0().<init>;Lscala.scalajs.js.Function0;V((arrow-lambda<this$3{this}: hello.hello$package$ = this  f2$2{f2}: scala.Function0 = f2>(): any = {       this$3.hello.hello$package$::private::Test$$anonfun$1;Lscala.Function0;I(f2$2)     }))) === f2))) {       mod:scala.runtime.Scala3RunTime$.assertFailed;E()     };     val f3: scala.Function0 = <redacted>;     if ((!(mod:hello.Thunk$.asFunction0;Lscala.Function0;Lscala.Function0(new scala.scalajs.runtime.AnonFunction0().<init>;Lscala.scalajs.js.Function0;V((arrow-lambda<this$5{this}: hello.hello$package$ = this  f3$2{f3}: scala.Function0 = f3>(): any = {       this$5.hello.hello$package$::private::Test$$anonfun$adapted$1;Lscala.Function0;Ljava.lang.Object(f3$2)     }))) === f3))) {       mod:scala.runtime.Scala3RunTime$.assertFailed;E()     }   } ``` Now I needed to diagnose what phase within the compiler caused the issue. I do that with ``` > set sjsSandbox / scalacOptions += ""-Xprint:flatten"" > sjsSandbox/compile ``` `flatten` is always a good first candidate when working on Scala.js issues  as it shows the dotc trees right before the back-end.  `flatten` shows that the wrappings are already there  so the issue must come earlier. There's not supposed to be major differences in transformations in earlier phases for Scala.js versus Scala/JVM  especially when no Scala.js-specific code is involved.  So I started investigating the difference in `-Xprint` between Scala/JVM and Scala.js for the same snippet.  I reached the conclusion that the group of `etaReduce` received as input something worse on Scala.js than Scala/JVM. And for good reason: the input on Scala/JVM uses specialized function types  which don't exist on Scala.js.  I then tried reproducing on Scala/JVM by manually deactivating the `SpecializeFunctions` phase. Sure enough  the issue was triggered.  From there  it was a matter of looking at the shape of trees received by `EtaReduce` when `SpecializeFunctions` is disabled  and adding cases in `EtaReduce` to handle those shapes.",closed,compiler/src/dotty/tools/dotc/transform/EtaReduce.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,sjrd,2022-06-22T09:38:07Z,2022-06-22T10:57:56Z
15494,15501,Backport #15498: Fix #15494: Handle non-specialized functions in EtaReduce.,Backports #15498,closed,compiler/src/dotty/tools/dotc/transform/EtaReduce.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,Kordyjan,2022-06-22T13:41:44Z,2022-06-22T15:04:09Z
15490,15504,Avoid instrumentation of inline and erased definitions,"These methods will not generate code and therefore do not need to be instrumented. Note that a retained inline method will have a `$retained` variant that will be instrumented.  Found this issue while looking into #15490.",closed,compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/run/erased-def/test.check; tests/coverage/run/erased-def/test.scala; tests/coverage/run/erased-def/test.scoverage.check; tests/coverage/run/inline-def/test.check; tests/coverage/run/inline-def/test.scala; tests/coverage/run/inline-def/test.scoverage.check,nicolasstucki,2022-06-22T15:27:46Z,2022-06-30T14:44:42Z
15490,15573,Backport coverage fixes to 3.2.0,Backport #15530 and #15504 :),closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/inline-def/test.check; tests/coverage/run/inline-def/test.scala; tests/coverage/run/inline-def/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-07-02T20:10:28Z,2022-07-04T07:47:34Z
15487,15530,Fix lifting of arguments with -coverage-out,"Fixes #15078  fixes #15487  fixes #15505  Summary: - `LiftCoverage` extended `LiftComplex`  it now extends `LiftImpure` and forces the lifting of non-erased applications - `StringContext.s  f  raw` are now excluded from lifting - `ElimRepeated` didn't handle lifted arguments properly  because it assumed that every argument was a `Typed` tree  which is not the case for arguments lifted by the coverage transformation. This is now fixed.  Most of the added lines are tests :)  ## How I fixed it  Let's see if I can imitate the awesome explanations of Martin :smile:  `InstrumentCoverage` modifies the AST just after the pickling  and insert calls to `scala.runtime.coverage.Invoker.invoked` that record  at runtime  which methods are called. See an example [here](https://github.com/lampepfl/dotty/issues/15078#issuecomment-1127592307). To lift functions' arguments  it uses `LiftCoverage`  which lives with its `LiftXX` siblings in `EtaExpansion.scala`.  `LiftCoverage` previously extended `LiftComplex`. A quick look at the definition of `LiftComplex` tells me that it lifts everything  except trees that are constants or have the maximal purity `PurePath`. And [`TreeInfo.exprPurity`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/ast/TreeInfo.scala#L418) says that erased things are `Pure`  not `PurePath`! It seems that `LiftImpure` would be more appropriate than `LiftComplex`. Therefore  I happily type `LiftCoverage extends LiftImpure`. But stopping there would introduce another bug!  For example  given this code: ```scala def f() = throw RuntimeException() // throws an exception def g() = 0 // pure function someFunction(f()  g()) ``` We want to generate something like this  even if g has no side effects: ```scala Invoker.invoked(""f""  ...) val _f = f() Invoker.invoked(""g""  ...) val _g = g() Invoker.invoked(""someFunction""  ...) someFunction(_f  _g) ``` This way  f will throw its exception and prevent g from being marked as covered  which would be wrong.  Therefore  all non-erased applications must be lifted. This means that  when lifting arguments  `LiftCoverage.noLift` must return `false` for all non-erased `Apply`: ```scala override def noLift(expr: tpd.Tree)(using Context) =   if liftingArgs then noLiftArg(expr) else super.noLift(expr)  private def noLiftArg(arg: tpd.Tree)(using Context): Boolean =   arg match     case a: tpd.Apply => a.symbol.is(Erased) // don't lift erased applications  but lift all others     // the other cases recurse on more complex trees that may contain applications ```  Similarly  string interpolators `s`  `f` and `raw` shouldn't be lifted. I've excluded those three functions from lifting in `InstrumentCoverage.needsLift`.  Finally  I took a look at the mysterious issue #15078. For a call to this java method: ```scala Path createTempDirectory(String prefix  FileAttribute<?>... attrs) ``` `-Ycheck-all` reported the following problem: ```scala java.lang.AssertionError: assertion failed: Found:    ($2$ : java.nio.file.attribute.FileAttribute[?]*) Required: Array[? <: java.nio.file.attribute.FileAttribute[?]] ``` And the code crashed at runtime...  Yet again  it only happened when the arguments were lifted by `-coverage-out`. A quick minimization revealed that the problem was the handling of the java varargs  in the presence of lifted arguments.  I know that `ElimRepeated` is the phase that takes care of handling varargs. Some debugging showed that [`ElimRepeated.transformApply`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala#L126) was triggered  with: - `isWildcardStarArg(arg)`: true - `arg` of type `Ident`  `isWildcardStarArg` properly handled `Ident`  but not `ElimRepeated`  which assumed that everything was a `Typed` tree. Fixing that made the bug vanish.",closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-06-27T09:29:57Z,2022-07-02T14:52:36Z
15487,15573,Backport coverage fixes to 3.2.0,Backport #15530 and #15504 :),closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/inline-def/test.check; tests/coverage/run/inline-def/test.scala; tests/coverage/run/inline-def/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-07-02T20:10:28Z,2022-07-04T07:47:34Z
15479,15489,Do cross version checks on import qualifiers," - keep all imports around until erasure  - traverse import qualifiers to do cross version checks on their constituents  - fix parts of the build that imported the deprecated package scala.collection.JavaConverters  Fixes #15479",closed,bench/src/main/scala/Benchmarks.scala; community-build/community-projects/http4s; community-build/src/scala/dotty/communitybuild/projects.scala; compiler/src/dotty/tools/backend/jvm/GenBCode.scala; compiler/src/dotty/tools/dotc/classpath/DirectoryClassPath.scala; compiler/src/dotty/tools/dotc/config/CommandLineParser.scala; compiler/src/dotty/tools/dotc/config/WrappedProperties.scala; compiler/src/dotty/tools/dotc/profile/Profiler.scala; compiler/src/dotty/tools/dotc/semanticdb/Tools.scala; compiler/src/dotty/tools/dotc/transform/FirstTransform.scala; compiler/src/dotty/tools/dotc/typer/CrossVersionChecks.scala; compiler/src/dotty/tools/repl/ReplDriver.scala; compiler/test/dotty/tools/TestSources.scala; compiler/test/dotty/tools/backend/jvm/AsmConverters.scala; compiler/test/dotty/tools/backend/jvm/AsmNode.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTest.scala; compiler/test/dotty/tools/backend/jvm/InlineBytecodeTests.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/ConstantFoldingTests.scala; compiler/test/dotty/tools/dotc/TastyBootstrapTests.scala; compiler/test/dotty/tools/dotc/classpath/MultiReleaseJarTest.scala; compiler/test/dotty/tools/dotc/transform/SpecializeFunctionsTests.scala; compiler/test/dotty/tools/vulpix/SummaryReport.scala; language-server/src/dotty/tools/languageserver/DottyLanguageServer.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeCompletion.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeDefinition.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeDocumentHighlight.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeDocumentSymbol.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeHover.scala; language-server/test/dotty/tools/languageserver/util/actions/CodeReferences.scala,odersky,2022-06-21T08:25:23Z,2022-06-22T17:57:53Z
15475,15482,Test case #15475,"This test case first broke when level checking was disabled.  I verified that it compiles OK when Config.checkLevels is set to true.",closed,tests/pending/pos/i15475/A.scala; tests/pending/pos/i15475/X.scala,odersky,2022-06-19T21:40:08Z,2022-06-20T07:30:56Z
15475,16862,Add regression test,Fixes #15475,closed,tests/pos-macros/i15475.scala; tests/pos-macros/i15475a/Macro_1.scala; tests/pos-macros/i15475a/Test_2.scala,nicolasstucki,2023-02-09T09:19:50Z,2023-02-16T09:01:49Z
15474,15481,Find more looping implicits," 1. Also check apply methods of companions of implicit or given classes.     Specifically apply methods of implicit Conversions.   2. Look inside Inlined nodes to detect loops.  Fixes #15474 Fixes #10947",closed,compiler/src/dotty/tools/dotc/transform/CheckLoopingImplicits.scala; tests/neg-custom-args/fatal-warnings/i15474.scala; tests/neg/i13044.check,odersky,2022-06-19T21:19:52Z,2022-06-20T14:27:41Z
15468,15477,Check import selectors at Typer,"Import selectors were checked  at PostTyper before  but that can lead to confusion when a type error results from a bad import selector.  Fixes #15468",closed,compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg-custom-args/jdk-9-app.check; tests/neg-custom-args/jdk-9-app.scala; tests/neg/deriving.scala; tests/neg/i15468.scala; tests/neg/i6056.scala; tests/neg/implicitDefs.scala; tests/neg/language-import.scala; tests/neg/parser-stability-23.scala; tests/neg/rootImplicits.scala,odersky,2022-06-19T17:48:18Z,2022-06-19T21:24:15Z
15465,15606,Fix #15465: Use resolveThis for outerSelect resolution,"Fix #15465: Use `resolveThis` for outerSelect resolution  This shows that `hops` is redundant after https://github.com/lampepfl/dotty/pull/15592. The refactoring can be addressed in another PR.",closed,compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; tests/init/pos/i15465.scala,liufengyun,2022-07-06T22:58:33Z,2022-07-07T21:54:43Z
15460,15478,Fix findFunctionType for OrTypes,"Restore funtionality that was dropped in 6ac8b47  Fixes #15460",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i11694.scala; tests/pos/i15460.scala,odersky,2022-06-19T20:37:00Z,2022-06-30T13:31:24Z
15459,15488,Fix #15459: Display uninitialized fields in promotion error,Fix #15459: Display uninitialized fields in promotion error,closed,compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; tests/init/neg/closureLeak.check; tests/init/neg/default-this.check; tests/init/neg/i15459.check; tests/init/neg/i15459.scala; tests/init/neg/inlined-method.check; tests/init/neg/promotion-loop.check,liufengyun,2022-06-20T20:07:58Z,2022-06-21T13:35:17Z
15448,15451,Fix isStructuralTermSelectOrApply,"When looking at AppliedTypes  we want to go to the supertype (which is the dealiased type or upper bound)  not the underlying type (which is the type constructor).  This is the second bug in a week caused by a confusion of underlying and supertype for AppliedTypes. We should do an audit of the codebase to see whether there are more cases like this.  Fixes #15448",closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; tests/neg/i15448.scala; tests/pos/i15448.scala,odersky,2022-06-15T09:35:17Z,2022-06-15T12:42:02Z
15419,15713,Upgrade to Scala.js 1.10.1.,"It is fine to do this in a patch version  because  * The IR version was not changed in 1.10.x. * There was no change in the scalajs-library API.  ---  I'm not sure who's available for reviews  these days. Anyone up for it?",closed,community-build/community-projects/play-json; compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; compiler/src/dotty/tools/backend/sjs/JSExportsGen.scala; project/Build.scala; project/plugins.sbt,sjrd,2022-07-20T22:01:32Z,2022-07-21T15:34:17Z
15414,15417,Allow for unqualified `apply` as context functions,Fixes #15414,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15414.scala,odersky,2022-06-10T16:42:43Z,2022-06-11T15:42:07Z
15405,15416,Fix #15405: Dealias Or type constituents when finding its dominator,"In the issue  `v: Int` is boxed to `RichInt`. This is because the typer can't find `>` in `Int | Validated[Int]` and attempts an implicit conversion. This is in turn because when looking up members of a union type  we do the `join` operation on that union type  which attempts to simplify it by reducing it to the intersection of the base classes of its constituents.  It seems that this intersection algorithm  while operating on dealiased constituents  does not dealias them at a certain point  thus judging that the intersection of base types of `Int` and `Validated[Int]` is `Any`. This PR adds such a dealias.  Using `Foo` instead of `Int` in tests to remove implicit conversions out of the equation; without the PR's change the test fails.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15405.scala,anatoliykmetyuk,2022-06-10T14:32:01Z,2022-06-15T07:30:42Z
15400,15401,Add regression tests,Closes #15400,closed,tests/pos-macros/i15400/Macros_1.scala; tests/pos-macros/i15400/Test_2.scala,nicolasstucki,2022-06-08T15:47:08Z,2022-06-10T09:23:15Z
15385,16442,Fix generic signature for type params bounded by primitive,Fixes #15385 ,closed,compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; tests/generic-java-signatures/i15385/Lib.scala; tests/generic-java-signatures/i15385/Test.java,dwijnand,2022-11-30T11:41:55Z,2022-12-14T17:42:07Z
15384,16235,Make coverage instrumentation more robust,"*As with the last coverage PR  don't worry: most of the changes are ""expect"" files for tests. On top of that  many files have only changed by the order in which the statements are recorded  but this order doesn't matter.*  Small changes which  together  make the instrumentation more robust and fix many bugs: 1. Address comments in #15739 by introducing a type `InstrumentedParts`. The initial problem was that `TypeApply` cannot be instrumented in a straightforward way: `expr[T]` cannot be turned into `{invoked(...); expr}[T]` but must be `{invoked(...); expr[T]}`. To do this  we first try to instrument `expr` and then  if it was successfully instrumented  we move the call to `invoked(...)` to the right place. This gives us the following code in `transform`: ```scala case TypeApply(fun  args) =>   val InstrumentedParts(pre  coverageCall  expr) = tryInstrument(fun) // may generate a call to invoked(...)  but it's not part of the resulting tree yet   if coverageCall.isEmpty then     tree   else     Block(       pre :+ coverageCall  // put the call at the right place (pre contains lifted definitions  if any)       cpy.TypeApply(tree)(expr  args)   ) ``` 2. Exclude more trees from instrumentation  like `Erased` trees and calls to the parents' constructor in `Template#parents`. 3. Escape special characters in `Serializer`. 4. Reposition `Inlined` trees to the current source in order to avoid referencing an unreachable compilation unit. This might be the most controversial change because I've called `Inlines.dropInlined` :eyes:. Any suggestion is welcome!",closed,compiler/src/dotty/tools/dotc/coverage/Coverage.scala; compiler/src/dotty/tools/dotc/coverage/Location.scala; compiler/src/dotty/tools/dotc/coverage/Serializer.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; tests/coverage/pos/Constructor.scoverage.check; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Enum.scoverage.check; tests/coverage/pos/EnumJava.scala; tests/coverage/pos/EnumJava.scoverage.check; tests/coverage/pos/Escaping.scala; tests/coverage/pos/Escaping.scoverage.check; tests/coverage/pos/For.scala; tests/coverage/pos/For.scoverage.check; tests/coverage/pos/Givens.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/pos/InlinedFromLib.scala; tests/coverage/pos/InlinedFromLib.scoverage.check; tests/coverage/pos/Lift.scala; tests/coverage/pos/Lift.scoverage.check; tests/coverage/pos/MatchCaseClasses.scoverage.check; tests/coverage/pos/PolymorphicExtensions.scala; tests/coverage/pos/PolymorphicExtensions.scoverage.check; tests/coverage/pos/PolymorphicMethods.scoverage.check; tests/coverage/pos/Select.scoverage.check; tests/coverage/pos/SimpleMethods.scala; tests/coverage/pos/SimpleMethods.scoverage.check; tests/coverage/pos/StructuralTypes.scoverage.check; tests/coverage/pos/TypeLambdas.scoverage.check; tests/coverage/run/currying/test.scoverage.check; tests/coverage/run/erased/test.check,TheElectronWill,2022-10-23T14:50:48Z,2022-10-24T15:22:36Z
15381,15597,Name stripped of module suffix must not be empty,References #15381 ,closed,compiler/src/dotty/tools/dotc/core/NameOps.scala; tests/neg/i15381.check; tests/neg/i15381.scala,som-snytt,2022-07-06T05:06:40Z,2022-09-12T19:46:20Z
15377,15439,Survive NoType when erasing method result types,Fixes #15377,closed,compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; tests/neg/i15377.check; tests/neg/i15377.scala; tests/pos/i15377.scala,odersky,2022-06-14T09:21:37Z,2022-06-15T10:32:47Z
15374,15592,Fix #15374: Make sure prefix of outer select has the correct class symbol,"Fix #15374: Make sure prefix of outer select has the correct class symbol  If we have an outer select `e.outer_<hops>`  we must make sure that the class symbol of `e` is the class where the outer this is located in. Otherwise  the phase `ElimOuterSelect` would get confused.  Co-authored-by: Dale Wijnand <dale.wijnand@gmail.com>",closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/run/i15374.scala,liufengyun,2022-07-05T19:44:38Z,2022-07-06T10:15:00Z
15372,15376,Handle unconstrained TypeVars when synthesizing ClassTags,Fixes #15372,closed,compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i15372.scala,odersky,2022-06-05T13:01:16Z,2022-06-12T15:54:10Z
15371,15408,Disable flaky test neg/i12640.scala,Fixes #15371,closed,tests/disabled/neg/i12640.scala,griggt,2022-06-09T05:29:52Z,2022-06-09T07:08:41Z
15365,15556,Optimize isSameType for invariant applied types with the same structure," Comparing two deeply applied types with the same structure uses recursive isSameType tests if the types are invariant. Each of these gets translated to two isSubType tests which can lead to exponential blowup relative to the type's nesting depth. This problem does not occur if the two types are `eq`. But two types might still be structurally equal modulo dealiasing.  We now cache isSameType successes after a certain nesting level to avoid recomputation.  Fixes #15525.  ~~Reclassifies #15365 as a pos test~~",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg/i15525.scala; tests/pos/i15525.scala,odersky,2022-06-30T09:48:32Z,2022-06-30T18:31:15Z
15365,16344,Fix calculation to drop transparent classes,"Two fixes:   1. Don't forget about refinements  2. Don't dealias  Fixes #16342 Fixes #16338  The first fix is essential for #16342. The second fix is just to keep types tidy and not open aliases needlessly.  It probably fixes issues #16337 and #16336 as well  but the test cases were not self-contained  so I could not try them out. It might fix other recent regressions as well.  The previous incorrect version hid errors in previous regressions #15365 and #16311 which will need to be re-opened now.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; docs/_docs/reference/other-new-features/transparent-traits.md; tests/pending/pos/i15365.scala; tests/pending/pos/i16311.scala; tests/pos/i16338.scala; tests/pos/i16342.scala; tests/pos/transparent-intersect.scala,odersky,2022-11-15T09:49:06Z,2022-11-15T14:01:13Z
15365,16353,Two fixes to constraint solving,"## 1. Fix replace operation  In OrderingConstraint#replace we moved the actual replacement of a parameter with a type from the start of replace to its end  since that was more convenient for dependency adjustments. It turns out that doing so causes infinite recursion in instantiations in some cases  specifically if a parameter contains itself as an indirect lower bound that goes through an alias. Here is a situation that arises in i16311.scala: ```scala   type WithTag[T  U] = T & Tagged[U]    T1 >: WithTag[T2  Int]   T2 >: T1 & Tagged[Int] ``` The correct instantiation for T1 and T2 is Nothing. But we ran into a cycle instead.  The fix is to move the parameter replacement back to the start of `replace`  and to account for that in the dependency adjustment logic.  Fixes #16311 (with failing Ycheck)  ## 2. See through aliases before decomposing And/Or in isSubType  There seem to be two missing cases in TypeComparer where we have a TypeParamRef on one side and an And/Or type under an alias on the other. Examples:      type AND = A & B     type OR  = A | B     p <:< AND     OR <:< p  In this case we missed the decomposition into smaller types that would happen otherwise. This broke i16311.scala in Ycheck and broke i15365.scala with an infinite recursion in avoidance.  I verified that having an AndType as super or subtype of an abstract type works as expected. So if in the example above      type AND >: A & B  or      type AND <: A & B  it worked before. It was just aliases that were the problem (I assume it's the same for OrTypes as lower bounds).  This fixes #16311 completely and also Fixes #15365",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i15365.scala; tests/pos/i16311.scala; tests/pos/i16311a.scala; tests/pos/i16311b.scala; tests/pos/i16311c.scala; tests/pos/i16311d.scala,odersky,2022-11-16T16:01:51Z,2022-11-18T13:27:48Z
15363,15364,Fix #15363: Improve error messages for leaking of this,"Fix #15363: Improve error messages for leaking of this  ```Scala class A:   // should report one error here   val b = new B(this) // error   val m = 10   val n = 20  class B(a: A):   val x = a.m   val y = a.n ```  For the code above  we now report the following error:  ```Scala -- Error: tests/init/neg/i15363.scala:3:10 ----------------------------------------------------------------------------- 3 |  val b = new B(this) // error   |          ^^^^^^^^^^^   |          Problematic object instantiation: arg 1 is not fully initialized. Calling trace:   |          -> class A:	[ i15363.scala:1 ]   |             ^   |          -> val b = new B(this) // error	[ i15363.scala:3 ]   |                     ^^^^^^^^^^^   |   |          It leads to the following error during object initialization:   |          Access field on a value with an unknown initialization status. Calling trace:   |          -> class B(a: A):	[ i15363.scala:7 ]   |             ^   |          -> val x = a.m	[ i15363.scala:8 ]   |                     ^^^ ```",closed,compiler/src/dotty/tools/dotc/transform/init/Errors.scala; compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; tests/init/neg/apply2.scala; tests/init/neg/as-instance-of-cold-field-access.scala; tests/init/neg/cycle-structure.check; tests/init/neg/cycle-structure.scala; tests/init/neg/cycle.scala; tests/init/neg/early-promote5.scala; tests/init/neg/i15363.check; tests/init/neg/i15363.scala; tests/init/neg/secondary-ctor.scala; tests/init/neg/secondary-ctor2.scala; tests/init/neg/secondary-ctor3.scala; tests/init/neg/secondary-ctor4.check; tests/init/neg/secondary-ctor4.scala; tests/init/neg/soundness1.scala; tests/init/neg/soundness2.scala; tests/init/neg/soundness6.scala; tests/init/pos/i9795.scala,liufengyun,2022-06-03T00:29:21Z,2022-06-16T20:27:52Z
15347,15367,Refine criterion when to skip identifiers in pattern constructors,"There's a strange and almost forgotten rule that disqualifies method symbols from direct lookup when the identifier is the constructor of a pattern. This is done to make code like this work: ``` class List[T]:   def :: (that: T): List[T]   def f(...) = this match     case x :: xs => ... object `::`:   def unapply... ``` Without the rule  the `::` in the pattern would resolve to the `::` method in `List` which does not have an `unapply`. We need to skip that method to get to the outer `::` object.  The rule plays badly with export forwarders  which are methods  and therefore were ineligible for pattern constructurs. We now change the rule so that methods are also accepted as unqualified `unapply` prefixes as long as they are parameterless.  Fixes #15347",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15347.scala,odersky,2022-06-03T17:33:55Z,2022-06-06T10:49:59Z
15331,15390,Fix dependency status calculation for refined type aliases in method result types,"Fixes #15331 Fixes #15369 ",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; tests/pos/i15331.scala,odersky,2022-06-07T10:10:32Z,2022-06-09T10:23:42Z
15326,17229,Refactor: Improve error messaging in sidebar YAML parser,"### Validations On this PR I added some errors for different conditions :   - [x] Error when a path in page is wrong  - [x] Error when an index or a page path for a title is missing  (It is therefore activated with the `title.isEmpty` condition. So far I've only found that when a user forgets a title it gives r = RawInput(   []  false) in the toSidebar function. Thus  title.isEmpty is necessarily empty. However  if another error produces an r = RawInput(  []  false). This condition and its error message will no longer make sense. I am therefore less sure about this condition.) - [x] Error when a title for a page is missing  - [x]  Warning when something is wrong but it does not interfere with the generation.  ### Tests I added two functions in SidebarParserTest. The purpose of these functions is to check if it contains the `schemaMessage` which is the general template sent in all error messages + the unique error message for each error.  ### IE I also noticed that @gringrape wanted to work on this issue  if a code has already been done on his side  I am quite open to resume the work started or to close my PR to leave his. I am also open to any suggestions for adding errors.  Fixes: #15326 ",closed,scaladoc/src/dotty/tools/scaladoc/site/SidebarParser.scala; scaladoc/test/dotty/tools/scaladoc/site/SidebarParserTest.scala,Dedelweiss,2023-04-11T11:51:51Z,2023-06-12T07:09:46Z
15326,18982,"Backport ""Refactor: Improve error messaging in sidebar YAML parser"" to LTS",Backports #17229 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,scaladoc/src/dotty/tools/scaladoc/site/SidebarParser.scala; scaladoc/test/dotty/tools/scaladoc/site/SidebarParserTest.scala,Kordyjan,2023-11-17T16:38:42Z,2023-11-21T11:07:11Z
15323,15324,Make private inline accessors `final`,Fixes #15323,closed,compiler/src/dotty/tools/dotc/transform/AccessProxies.scala; tests/neg/i15323.scala,nicolasstucki,2022-05-30T12:02:21Z,2022-06-04T14:37:50Z
15318,16445,Support use-site meta-annotations,"Fixes #12492 Fixes #15318",closed,compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/transform/BeanProperties.scala; compiler/src/dotty/tools/dotc/transform/Memoize.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/util/Spans.scala; tests/run/beans.check; tests/run/beans/Test_3.java; tests/run/i12492.check; tests/run/i12492/MyColumnBase.java; tests/run/i12492/MyTable.scala; tests/run/i12492/Test.scala; tests/run/i15318.check; tests/run/i15318/Bean.scala; tests/run/i15318/JsonProperty.java; tests/run/i15318/Test.scala,dwijnand,2022-11-30T17:15:03Z,2022-12-14T08:15:01Z
15315,19739,Lift all non trivial prefixes for default parameters,"Checking if the prefix is pure is not enough to know if we need to list the prefix. In the case of default parameters  the prefix tree might be used several times to compute the default values. This expression should only be computed once and therefore it should be lifted if there is some computation/allocation involved. Furthermore  if the prefix contains a local definition  it must be lifted to avoid duplicating the definition.  A similar situation could happen with dependent default parameters. This currently works as expected.  Fixes #15315",closed,compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/run/i15315.scala,nicolasstucki,2024-02-20T08:51:24Z,2024-02-29T15:08:51Z
15315,20967,"Backport ""Lift all non trivial prefixes for default parameters"" to LTS",Backports #19739 to the LTS branch.  PR submitted by the release tooling.,closed,compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/run/i15315.scala,WojciechMazur,2024-07-02T20:57:04Z,2024-07-03T08:37:03Z
15312,15375,Implement `provablyDisjoint` for refined types and type aliases,Fixes #15312,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; docs/_docs/reference/experimental/numeric-literals.md; tests/pos/i15312.scala,odersky,2022-06-05T13:01:03Z,2022-06-12T15:55:22Z
15311,15443,Handle recursions in isFullyDefined,"If one indulges in cycles too heavily it can happen that we run into an infinite recursion in `fullyDefinedType` even before we had a chance to run `checkNonCyclic`. In this case we now diagnose the stack overflow as an error message instead of failing with an internal error.  Fixes #15311",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15311.check; tests/neg/i15311.scala,odersky,2022-06-14T15:39:15Z,2022-06-15T21:15:38Z
15306,17297,Fix: Correction of the siteRoot path,"- For the first issue  when a user set ./docs to the default value of ScalaSettings  the code only took a value that was not the default `siteRoot.nonDefault`. To fix this  I put a getOrElse to try and get the default value.   - For the second problem  I noticed when I cloned the code that the user was calling layouts that did not exist. Be careful with this as it can indeed produce an error. Solving this problem was enough to remove the non-existent layout calls.  Fixes: #15306",closed,scaladoc/src/dotty/tools/scaladoc/Scaladoc.scala,Dedelweiss,2023-04-18T08:23:33Z,2023-05-29T07:58:11Z
15306,18957,"Backport ""Fix: Correction of the siteRoot path"" to LTS",Backports #17297 to the LTS branch.  PR submitted by the release tooling.,closed,scaladoc/src/dotty/tools/scaladoc/Scaladoc.scala,Kordyjan,2023-11-17T13:06:08Z,2023-11-20T13:59:23Z
15302,15330,Handle & and | types when computing tuple arity,Fixes #15302,closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; compiler/src/dotty/tools/dotc/transform/TypeUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/run/i15302a.scala; tests/run/i15302b.scala,nicolasstucki,2022-05-30T14:59:45Z,2022-06-09T16:43:59Z
15301,15320,Prevent crash when reporting an error,Fixes #15301,closed,compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15301.scala,odersky,2022-05-30T09:10:05Z,2022-05-30T13:23:36Z
15288,15486,Test case for #15288,,closed,tests/pending/pos/i15288/QueryRequest.java; tests/pending/pos/i15288/Test_2.scala,odersky,2022-06-20T12:00:31Z,2022-06-20T13:57:36Z
15288,16882,ClassfileParser: Avoid cycle when accessing companion in inner class lookup,"Previously  the call to `info` on the module val could lead to a cycle since the module val might be in the process of being completed. This commit fixes this by only using the module class which is all we need to lookup members.  Fixes #15288. Fixes #14059.  Co-Authored-By: Tom Grigg <tomegrigg@gmail.com>",closed,compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; sbt-test/java-compat/i15288/QueryRequest.java; sbt-test/java-compat/i15288/Test.scala; sbt-test/java-compat/i15288/build.sbt; sbt-test/java-compat/i15288/test,smarter,2023-02-10T15:58:04Z,2023-02-16T12:50:32Z
15272,15310,Avoid NPE in simplify,"Fixes #15272  There's no crash anymore  but #15272 still does not compile.",closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/neg/i15272.scala,odersky,2022-05-29T11:12:58Z,2022-05-30T14:47:42Z
15272,15338,[backport] Avoid NPE in simplify,This backports #15310 which fixes an NPE introduced in 3.1.3-RC3 by the backport of #15036 (see https://github.com/lampepfl/dotty/issues/15183#issuecomment-1141482570),closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/neg/i15272.scala; tests/pos/i15183/decoder_1.scala; tests/pos/i15183/test_2.scala,griggt,2022-05-31T10:37:25Z,2022-05-31T12:38:35Z
15266,15285,Improve opaque type with no RHS error message,"Fixes #15266  Done in the spree with @griggt and @mtk ",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; tests/neg/i15266.check; tests/neg/i15266.scala; tests/neg/i6055.check; tests/neg/i6055.scala,nicolasstucki,2022-05-24T16:28:59Z,2022-05-25T09:21:31Z
15264,15308,Test for #15264,,closed,tests/pos/i15264.scala,odersky,2022-05-29T09:05:50Z,2022-05-29T12:10:22Z
15228,15269,Compute correct argument type in ExprMap,Fixes #15228,closed,library/src/scala/quoted/ExprMap.scala; tests/pos-macros/i15228/Macro_1.scala; tests/pos-macros/i15228/Test_2.scala,nicolasstucki,2022-05-23T11:03:49Z,2022-05-23T13:18:03Z
15227,15281,Fix hash code of ExprImpl and TypeImpl,Fixes #15227,closed,compiler/src/scala/quoted/runtime/impl/ExprImpl.scala; compiler/src/scala/quoted/runtime/impl/TypeImpl.scala; tests/pos-macros/i15227a/Macro_1.scala; tests/pos-macros/i15227a/Test_2.scala; tests/pos-macros/i15227b/Macro_1.scala; tests/pos-macros/i15227b/Test_2.scala,nicolasstucki,2022-05-24T12:10:20Z,2022-05-24T16:58:06Z
15222,15231,fix #15222 recursively check for product ctor accessibility,"mostly a refactoring  except now `whyNotGenericSum` will benefit by checking the constructor accessibility of child product types.  Removes the `declScope` parameter from `whyNotGenericSum` because it is not useful. In all cases it is populated by either the companion object of `self` when it is valid to use as the mirror  or it is the context owner when we should use an anonymous mirror. This is awkward because we end up calling `useCompanionAsSumMirror` twice in each recursive call.  Also fixes an inconsistency where `scala.Nil.type` would not get a singleton mirror  causing a runtime error (and extends it to aliases of singleton enum values)  fixes #15222 fixes #15234",closed,compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i14025.check; tests/neg/i14823.check; tests/neg/prod-mirror-inacessible-ctor.scala; tests/run/i15234.scala; tests/run/prod-mirror-inacessible-ctor/Lib_1.scala; tests/run/prod-mirror-inacessible-ctor/Test_2.scala,bishabosha,2022-05-19T09:38:54Z,2022-05-27T09:57:37Z
15213,15247,Transform RHS of captured assignment reference,Fixes #15213,closed,compiler/src/dotty/tools/dotc/transform/Splicing.scala; tests/pos-macros/i15213.scala,nicolasstucki,2022-05-20T12:41:47Z,2022-05-30T14:25:06Z
15202,15382,Case class must have at least one *leading* non-implicit parameter list,Closes #15202. Changes the message for case classes like `case class Foo(using Bar)(x: Baz)` from `Foo must have at least one non-implicit parameter list` to `must have at least one leading non-implicit parameter list`.,closed,compiler/src/dotty/tools/dotc/reporting/messages.scala,cgccuser,2022-06-05T22:32:04Z,2022-06-06T16:39:03Z
15199,15499,Fix #15199: Exclude JavaDefined Modules from bridge generation.,"JavaDefined modules are imaginary symbols that dotc uses to refer to static methods of Java classes. They have no reification  and therefore it makes no sense for them to participate in bridge generation.  ### How I fixed it  First  I happen to know that bridges are generated in Erasure  so that's one thing to look at.  I looked at the JavaDoc of `javax.swing.plaf.metal.MetalTabbedPaneUI` to find out what `TabbedPaneLayout`. I discovered that it is an inner class  and that it shadows an inner class of the same name in `basic.BasicTabbedPaneUI`. Java inner classes should never have bridges  as they are types. But they also implicitly declare companion objects  which dotc uses to refer to static members.  Apparently  dotc gets confused about those imaginary objects  and tries to create bridges for them. It shouldn't even consider them.  I reproduced the issue with my own Java-defined classes  to get rid of the dependency on the JDK Swing APIs  which is a beast.  I search for ""Bridge"" in `Erasure.scala`  which leads me to the `class Bridges`. I did not know that class  but it's not very big. A quick look at `BridgesCursor` and its relationship to `OverridingPairs.Cursor` (the latter is the thing that enumerates pairs of members where one overrides the other) tells me that I should exclude JavaDefined modules from `BridgesCursor`. Lucky me: there is a `def exclude` in it  so I amend it to also exclude `sym.isAllOf(Module | JavaDefined)`.",closed,compiler/src/dotty/tools/dotc/transform/Bridges.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/run/i15199/Child_1.java; tests/run/i15199/Parent_1.java; tests/run/i15199/Test_2.scala,sjrd,2022-06-22T12:04:31Z,2022-07-05T14:41:48Z
15188,16358,Support inline unapplySeq and with leading given parameters,"Based on #15191 by @gorilskij  and enables support for #12991.  Fixes #8577 Fixes #12991 Fixes #15188 ",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; tests/neg/i12991.scala; tests/pos-macros/i8577a/Macro_1.scala; tests/pos-macros/i8577a/Main_2.scala; tests/pos-macros/i8577b/Macro_1.scala; tests/pos-macros/i8577b/Main_2.scala; tests/pos-macros/i8577c/Macro_1.scala; tests/pos-macros/i8577c/Main_2.scala; tests/pos-macros/i8577d/Macro_1.scala; tests/pos-macros/i8577d/Main_2.scala; tests/pos-macros/i8577e/Macro_1.scala; tests/pos-macros/i8577e/Main_2.scala; tests/pos-macros/i8577f/Macro_1.scala; tests/pos-macros/i8577f/Main_2.scala; tests/pos-macros/i8577g/Macro_1.scala; tests/pos-macros/i8577g/Main_2.scala; tests/pos-macros/i8577h/Macro_1.scala; tests/pos-macros/i8577h/Main_2.scala; tests/pos/i12991.scala; tests/pos/i15188.scala; tests/pos/i15188b.scala; tests/pos/i8577.scala; tests/run/i8577a.scala; tests/run/i8577b.scala; tests/run/i8577c.scala; tests/run/i8577d.scala; tests/run/i8577e.scala; tests/run/i8577f.scala; tests/run/i8577g.scala; tests/run/i8577h.scala,nicolasstucki,2022-11-17T08:21:25Z,2022-12-07T15:59:52Z
15183,15333,Fix #15183: Add regression test,Closes #15183 ,closed,tests/pos/i15183/decoder_1.scala; tests/pos/i15183/test_2.scala,griggt,2022-05-30T21:17:00Z,2022-05-30T23:06:29Z
15183,15338,[backport] Avoid NPE in simplify,This backports #15310 which fixes an NPE introduced in 3.1.3-RC3 by the backport of #15036 (see https://github.com/lampepfl/dotty/issues/15183#issuecomment-1141482570),closed,compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/neg/i15272.scala; tests/pos/i15183/decoder_1.scala; tests/pos/i15183/test_2.scala,griggt,2022-05-31T10:37:25Z,2022-05-31T12:38:35Z
15181,15217,Eta expand export forwarders that have context function types,Fixes #15181,closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i15181.scala,odersky,2022-05-18T11:49:23Z,2022-05-24T08:32:52Z
15181,15340,[backport] Eta expand export forwarders that have contetx function types,Backport of #15217 ,closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i15181.scala,Kordyjan,2022-05-31T12:26:02Z,2022-06-01T11:02:02Z
15174,15229,Fix lack of type avoidance in argument lifting,"We need to manually increase the nestingLevel of symbols created by EtaExpansion#lift to compensate for the fact that they will end up in a block.  Fixes #15174.",closed,compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; tests/pos/i15174.scala,smarter,2022-05-18T20:18:20Z,2022-05-19T15:05:24Z
15174,15237,[backport] Fix lack of type avoidance in argument lifting,This backports #15229 to 3.1.3 which fixes a regression introduced in 3.1.2.,closed,compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; tests/pos/i15174.scala,smarter,2022-05-19T15:11:35Z,2022-05-24T00:44:32Z
15171,15223,Don't constrain type variables in normalize,Fixes #15171,closed,compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/pos/i15171.scala,odersky,2022-05-18T17:39:06Z,2022-05-19T19:04:14Z
15166,15185,Avoid overeager completion of Java annotations in classfile parser,"Require observing the `ScalaSig` attribute in a classfile before scanning for Scala pickling annotations  which aligns with the behavior of the Scala 2 classfile parser.  Before this commit  all classfiles  including those produced by the Java compiler and compilers of other JVM languages  were scanned for Scala pickling annotations. In certain situations (as in tests/pos/i15166)  this is problematic  as the denotation of an annotation symbol defined as a Java inner class may be forced before the inner class table is populated and setClassInfo is  called on the class root.  We avoid this situation by only performing the pickling annotation scan for those classfiles having the `ScalaSig` attribute  i.e. those produced by the Scala 2 compiler.  We also drop support for pickling TASTy using the classfile annotations - `scala.annotation.internal.TASTYSignature` and - `scala.annotation.internal.TASTYLongSignature`  These were never used by the compiler  there are no plans for future use  and preserving support would complicate this fix.  Fixes #15166 ",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; library/src/scala/annotation/internal/TASTYLongSignature.java; library/src/scala/annotation/internal/TASTYSignature.java; tests/pos/i15166/InterfaceAudience_JAVA_ONLY_1.java; tests/pos/i15166/InterfaceStability_JAVA_ONLY_1.java; tests/pos/i15166/Test_2.scala,griggt,2022-05-13T18:24:49Z,2022-05-23T13:26:01Z
15166,15277,[backport] Avoid overeager completion of Java annotations in classfile parser,This backports #15185 to 3.1.3 which fixes a regression introduced in 3.1.3-RC1.,closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; library/src/scala/annotation/internal/TASTYLongSignature.java; library/src/scala/annotation/internal/TASTYSignature.java; tests/pos/i15166/InterfaceAudience_JAVA_ONLY_1.java; tests/pos/i15166/InterfaceStability_JAVA_ONLY_1.java; tests/pos/i15166/Test_2.scala,griggt,2022-05-23T22:14:08Z,2022-05-24T07:18:11Z
15165,16938,Fix beta-reduction with `Nothing` and `null` args,"Use parameter type as binding type when the argument is of type `Nothing` or `null`.  Fixes part of #15165",closed,compiler/src/dotty/tools/dotc/transform/BetaReduce.scala; tests/pos/i15165.scala,nicolasstucki,2023-02-16T15:35:22Z,2023-02-21T07:52:29Z
15165,16951,Replace quoted type variables in signature of HOAS pattern result ,"To be able to construct the lambda returned by the HOAS pattern we need: first resolve the type variables and then use the result to construct the signature of the lambdas.  To simplify this transformation  `QuoteMatcher` returns a `Seq[MatchResult]` instead of an untyped `Tuple` containing `Expr[?]`. The tuple is created once we have accumulated and processed all extracted values.  Fixes https://github.com/lampepfl/dotty/issues/15165 ",closed,compiler/src/dotty/tools/dotc/util/optional.scala; compiler/src/scala/quoted/runtime/impl/QuoteMatcher.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; tests/pos-macros/i15165a/Macro_1.scala; tests/pos-macros/i15165a/Test_2.scala; tests/pos-macros/i15165b/Macro_1.scala; tests/pos-macros/i15165b/Test_2.scala; tests/pos-macros/i15165c/Macro_1.scala; tests/pos-macros/i15165c/Test_2.scala,nicolasstucki,2023-02-17T15:19:56Z,2023-03-03T08:12:20Z
15160,16001,Improvements for implicit searches with top-level type variables,"Two improvements for implicit searches involving type variables.   1. We now always add a comment when an implicit search is rejected due to the ""too unspecific"" criterion of #13886  commit [Refine checking for underspecified implicit queries](https://github.com/lampepfl/dotty/pull/13886/commits/db5956b36a7e62b77f4b3a9335ab1587e0e47e2c).     There have been quite a few regressions that hit that problem  so it is good to know immediately what    the issue is.    2. There is now a better wildcard approximation of higher-kinded type applications. This makes several programs (including original #15998) compile  which were classified as not specific enough before.  Fixes #15998 Fixes #15820 Fixes #15670 Fixes #15160  Fixes #13986 ",closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,odersky,2022-09-08T16:09:39Z,2022-09-09T13:44:35Z
15158,15295,Re-establish missing symbol from previous phase (in one specific case),Fixes #15158,closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i15158.scala,odersky,2022-05-26T11:21:02Z,2022-05-31T14:44:53Z
15158,15389,Backport #15295 Re-establish missing symbol from previous phase (in one specific case),Backports #15295 to 3.1.3,closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/pos/i15158.scala,Kordyjan,2022-06-06T14:53:40Z,2022-06-06T16:56:34Z
15155,15218,"Show a match type trace for ""not a class type"" errors",Closes #15155,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg-scalajs/jsconstructorof-error-in-prepjsinterop.check; tests/neg-scalajs/jsconstructortag-error-in-prepjsinterop.check; tests/neg/classOf.check; tests/neg/i13808.check; tests/neg/i15155.check; tests/neg/i15155.scala,odersky,2022-05-18T12:15:37Z,2022-05-29T16:18:11Z
15154,16005,Regression test,"This now works with level checking on instantiation  Fixes #15154",closed,tests/new/test.scala; tests/pos/i15154.scala,odersky,2022-09-09T09:03:08Z,2022-09-09T12:14:37Z
15149,15296,New lazy vals implementation,"Based on https://github.com/lampepfl/dotty/pull/14545  Implementing the new lazy vals scheme mentioned in https://github.com/lampepfl/dotty/pull/6979  fixing https://github.com/lampepfl/dotty/issues/7140  New PR to avoid force pushing to main branch of the previous contributor.  Fixes https://github.com/lampepfl/dotty/issues/15149 as well Applied https://github.com/lampepfl/dotty/pull/14780",closed,bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/ContendedInitialization.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccess.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessAny.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessGeneric.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessMultiple.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessString.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/LazyVals.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/UninitializedAccess.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/UninitializedAccessMultiple.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/transform/LazyVals.scala; compiler/test/dotc/pos-lazy-vals-tests.allowlist; compiler/test/dotc/run-lazy-vals-tests.allowlist; compiler/test/dotty/tools/TestSources.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/printing/PrintingTest.scala; library/src/scala/runtime/LazyVals.scala; project/MiMaFilters.scala; tests/printing/transformed/lazy-vals-legacy.check; tests/printing/transformed/lazy-vals-legacy.scala; tests/printing/transformed/lazy-vals-new.check; tests/printing/transformed/lazy-vals-new.flags; tests/printing/transformed/lazy-vals-new.scala; tests/run-custom-args/tasty-inspector/stdlibExperimentalDefinitions.scala; tests/run/lazyVals_c3.0.0.check; tests/run/lazyVals_c3.0.0.scala; tests/run/lazyVals_c3.1.0.check; tests/run/lazyVals_c3.1.0.scala; tests/run/serialization-new-legacy.check,szymon-rd,2022-05-26T12:55:24Z,2022-10-28T15:58:51Z
15141,15297,Align description how context bounds expand with implementation,Fixes #15141,closed,docs/_docs/reference/contextual/context-bounds.md,odersky,2022-05-26T13:33:13Z,2022-05-27T09:41:04Z
15133,15147,Fix check experimental inline references,"We where not checking if the current scope was an experimental scope  Fixes #15133",closed,compiler/src/dotty/tools/dotc/typer/CrossVersionChecks.scala; compiler/src/dotty/tools/dotc/typer/Inliner.scala; tests/pos-custom-args/no-experimental/i15133a.scala; tests/pos-custom-args/no-experimental/i15133b.scala,nicolasstucki,2022-05-09T15:51:30Z,2022-05-16T14:24:38Z
15116,15136,Fix locality condition for checking inferred types,Fixes #15116,closed,compiler/src/dotty/tools/dotc/typer/CheckCaptures.scala; tests/neg-custom-args/captures/i15116.check; tests/neg-custom-args/captures/i15116.scala; tests/neg-custom-args/captures/lazylists-exceptions.check; tests/neg-custom-args/captures/lazylists-exceptions.scala; tests/neg-custom-args/captures/lazyref.scala; tests/neg-custom-args/captures/usingLogFile.scala; tests/pos-custom-args/captures/capt-capability.scala; tests/pos-custom-args/captures/capt1.scala; tests/pos-custom-args/captures/capt2.scala; tests/pos-custom-args/captures/cc-this.scala; tests/pos-custom-args/captures/curried-shorthands.scala; tests/pos-custom-args/captures/lazylists-exceptions.scala; tests/pos-custom-args/captures/lazyref.scala; tests/pos-custom-args/captures/logger.scala,odersky,2022-05-06T18:36:27Z,2022-05-09T08:51:06Z
15116,15877,Add experimental capture checking,"This PR merges branch cc-experiment into main. The capture checking language extensions are all under a -Ycc flag. At the present stage  they should be considered highly experimental and unstable.  Nevertheless  I think it makes sense to have capture checking as part of the main branch. It will encourage more experiments and will make it easier to incorporate improvements in a stable manner. Since we will have several new people working on capture checking starting next month  it's a good time to merge now.  ",closed,compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/cc/BoxedTypeCache.scala; compiler/src/dotty/tools/dotc/cc/CaptureAnnotation.scala; compiler/src/dotty/tools/dotc/cc/CaptureOps.scala; compiler/src/dotty/tools/dotc/cc/CaptureSet.scala; compiler/src/dotty/tools/dotc/cc/CapturingType.scala; compiler/src/dotty/tools/dotc/cc/CheckCaptures.scala; compiler/src/dotty/tools/dotc/cc/Setup.scala; compiler/src/dotty/tools/dotc/cc/Synthetics.scala; compiler/src/dotty/tools/dotc/config/Config.scala; compiler/src/dotty/tools/dotc/config/Printers.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/NameOps.scala; compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/Substituters.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/TypeApplications.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala,odersky,2022-08-17T19:14:14Z,2022-08-29T17:25:34Z
15115,16227,Fix “nightly warning”,"Somehow  part of the work done in #15156 has been reverted. This PR fixes it.  Closes #15115",closed,docs/_layouts/static-site-main.html,julienrf,2022-10-21T07:50:07Z,2022-10-21T11:32:04Z
15115,16310,New scaladoc version,"PR with new scaladoc version. We want to merge it to language-ref  because there is already a reference version generated with older scaladoc that is bugged in some places. It would be best to replace it fairly quickly. This version deployed: https://szymon-rd.github.io/dotty/scala3/index.html  ## Major changes (broadly described):  - New search engine and algorithm. It is faster and gives better results. We also fixed its UI and introduced no results page.  - Adjustments in articles layout.  - Packages now form a tree instead of a linear structure. The `scala` package is first and expanded by default. It also behaves differently now (it doesn't jump in a way that was confusing to the user anymore)  - Removed flickering of the page. It now behaves as it was written with some framework with virtual DOMs. We made it by intercepting the event that would make the browser reload the page  and prerendering the page before replacing it. The navigation is also faster because of it. It required us to rework some parts of the website.  - New layout of members section and their contents (more concise and with improved readability).  - Quick Navigation in API members. ToC are sticky now.   - Member section filters are now faster and sticky. Added no results page.  - Reworked code snippets style and fonts.  - Removed contributors (see comments)  - Styled tables in the Docs.  - Fixed flow of releasing ScalaDoc by modyfing the tasks. It should be now easier to generate the stable docs  and the versions are fixed in the testcases config.  - A lot of minor changes in styling and structure of both docs and API sections. We've redesigned the majority of the page and analyzed the implementation side to side to make it strictly match the designs.   - Introduced new icons.  - More details pages are now visible (going to change that and make them not appear under `Next` instead) ## Fixed bugs with:  - Search overlay not always disappearing when clicked outside.  - Bad paths in search results.  - Rendering of members filters. The `clear` icon now appears where it should and with fixed styling. Dropdown fixed as well.  - Empty pages in docs  - Rendering  updating and structure of ToC (`In this article`)  - Missing pointer cursor  - Article content shifting when no ToC.  - Collapsing side nav items.  - Page jumping when going directly to members.  - Mobile menu not appearing on some resolutions.  - Member details hiding on interaction with inheritance graph.  - Missing spaces in search results.  - Recent searches not working as intended.  - Linking to a section that has its name duplicated in one doc. Now they get unique id on duplicates.  - More minor ones. ## Additional fixes TODO (from @julienrf )  - [x] Instead of showing in the sidebar the previously hidden pages  hide them also from the “Next” buttons  - [x] Don’t show all the super types of classes in the list view  - [x] In the detailed view  show the super types of classes  but use a comma instead of with  - [x] Bring back the “This is a nightly documentation. …” banner (with proper styling)  - [x] Fix the “Uncaught TypeError”s  - [x] Make the table of contents (“In this article” box) scrollable  - [x] Make header names (long package names) scrollable  - [ ] Bring back the list of contributors (use --ignore-revs-file)",closed,docs/_assets/css/frontpage.css; docs/_assets/docsScalaLangResources/scaladoc-assets.html; docs/_docs/contributing/procedures/index.md; docs/_docs/contributing/tools/index.md; docs/_docs/internals/backend.md; docs/_docs/internals/contexts.md; docs/_docs/internals/dotc-scalac.md; docs/_docs/internals/gadts.md; docs/_docs/internals/syntax-3.1.md; docs/_docs/internals/syntax.md; docs/_docs/reference/changed-features/imports.md; docs/_docs/reference/changed-features/wildcards.md; docs/_docs/reference/contextual/by-name-context-parameters.md; docs/_docs/reference/contextual/context-functions-spec.md; docs/_docs/reference/contextual/context-functions.md; docs/_docs/reference/contextual/contextual.md; docs/_docs/reference/contextual/derivation.md; docs/_docs/reference/contextual/extension-methods.md; docs/_docs/reference/contextual/given-imports.md; docs/_docs/reference/contextual/type-classes.md; docs/_docs/reference/dropped-features/auto-apply.md; docs/_docs/reference/dropped-features/do-while.md; docs/_docs/reference/dropped-features/weak-conformance-spec.md; docs/_docs/reference/enums/adts.md; docs/_docs/reference/enums/desugarEnums.md; docs/_docs/reference/enums/enums.md; docs/_docs/reference/experimental/overview.md; docs/_docs/reference/metaprogramming/inline.md; docs/_docs/reference/new-types/dependent-function-types-spec.md; docs/_docs/reference/new-types/type-lambdas-spec.md,szymon-rd,2022-11-09T12:52:55Z,2022-12-09T17:11:00Z
15111,17529,Clarify the purpose of the website https://dotty.epfl.ch,Relates to #15111 ,closed,CONTRIBUTING.md; docs/_blog/index.html; docs/_docs/contributing/architecture/phases.md; docs/_docs/contributing/getting-started.md; docs/_docs/contributing/index.md; docs/_docs/contributing/workflow.md; docs/_docs/index.md; docs/_docs/reference/metaprogramming/macros-spec.md,julienrf,2023-05-17T14:22:19Z,2023-05-19T08:43:24Z
15107,16813,Fix #15107: Avoid re-emitting a LineNumber after only LabelNodes.,There was already some deduplication code to avoid consecutive `LineNumber` nodes. However  it can happen that `LabelNode`s appear in-between. In that case  we also want to deduplicate the `LineNumber`s  since labels do not actually contribute to the final bytecode.,closed,compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; compiler/test/dotty/tools/backend/jvm/InlineBytecodeTests.scala,sjrd,2023-02-02T15:51:45Z,2023-02-03T14:20:36Z
15104,16866,Always load REPL classes in macros including the output directory,"Fixes #15104  Also re-enable `compiler/test-resources/repl-macros` tests.",closed,compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; compiler/test-resources/repl-macros/i15104a; compiler/test-resources/repl-macros/i15104b; compiler/test-resources/repl-macros/i15104c; compiler/test-resources/repl-macros/i5551; compiler/test/dotty/tools/repl/ScriptedTests.scala,nicolasstucki,2023-02-09T10:27:41Z,2023-02-16T09:33:40Z
15101,14986,Fix 12919 - summon anonymous mirror when companion is a case object,"closes #12919  closes #15101   There were two alternatives to solve this: - (first commit) use singleton proxy to summon a mirror for a case object when its companion is a sum/product  always cache mirror of case class / sum type in its companion. - (second commit) make the sum/product mirror anonymous when their companion is a case object  The first option will result in less code generation  however it will change the parent types of the companion from `Mirror.Singleton` to either `Mirror.Product` or `Mirror.Sum` (and change signatures of `fromProduct` or `ordinal` in the companion)  the second option will result in more code generation  but will preserve the signatures of the companion in bytecode for existing code.",closed,compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/run/i12919.scala; tests/run/i12919a.scala; tests/run/i12919b.scala; tests/run/i15101.scala,bishabosha,2022-04-20T16:34:10Z,2022-05-05T08:58:56Z
15098,15841,Fix Closure span assignment in makeClosure,"Fixes #15098  Wrong line numbers were coming from `Closure`. Previously it's span was inherited from block end position  now it's assigned explicitly.  This fix changes behaviour of test `tests/neg/i9299.scala`: ```scala type F <: F = 1 match { // error   case _ => foo.foo // error // error } def foo(a: Int): Unit = ??? ```  Previously there were 3 errors generated: <details> <summary>Compiler output before fix (3 errors)</summary>  ``` -- Error: tests/neg/i9299.scala:1:10 ------------------------------------------- 1 |type F <: F = 1 match { // error   |          ^   |Recursion limit exceeded.   |Maybe there is an illegal cyclic reference?   |If that's not the case  you could also try to increase the stacksize using the -Xss JVM option.   |A recurring operation is (inner to outer):   |   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  ...   |   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F -- Error: tests/neg/i9299.scala:2:12 ------------------------------------------- 2 |  case _ => foo.foo // error // error   |            ^   |Recursion limit exceeded.   |Maybe there is an illegal cyclic reference?   |If that's not the case  you could also try to increase the stacksize using the -Xss JVM option.   |A recurring operation is (inner to outer):   |   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  ...   |   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of  <: F -- [E046] Cyclic Error: tests/neg/i9299.scala:2:15 ----------------------------- 2 |  case _ => foo.foo // error // error   |               ^   |               Cyclic reference involving method $anonfun   |-----------------------------------------------------------------------------   | Explanation (enabled by `-explain`)   |- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -   | method $anonfun is declared as part of a cycle which makes it impossible for the   | compiler to decide upon $anonfun's type.   | To avoid this error  try giving $anonfun an explicit type.    ----------------------------------------------------------------------------- 3 errors found ``` </details>   Now there are 2 errors: <details> <summary>Compiler output after fix (2 errors)</summary>  ``` -- Error: tests/neg/i9299.scala:1:10 ------------------------------------------- 1 |type F <: F = 1 match { // error   |          ^   |Recursion limit exceeded.   |Maybe there is an illegal cyclic reference?   |If that's not the case  you could also try to increase the stacksize using the -Xss JVM option.   |A recurring operation is (inner to outer):   |   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  ...   |   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F   |  type parameters of  <: F   |  type parameters of F -- Error: tests/neg/i9299.scala:2:12 ------------------------------------------- 2 |  case _ => foo.foo // error // error   |            ^   |Recursion limit exceeded.   |Maybe there is an illegal cyclic reference?   |If that's not the case  you could also try to increase the stacksize using the -Xss JVM option.   |A recurring operation is (inner to outer):   |   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  ...   |   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of F   |  base classes of  <: F 2 errors found ``` </details>  This is because now in function `UniqueMessagePositions.isHidden`: ```scala trait UniqueMessagePositions extends Reporter {   // ...   /** Logs a position and returns true if it was already logged.    *  @note  Two positions are considered identical for logging if they have the same point.    */   override def isHidden(dia: Diagnostic)(using Context): Boolean =     super.isHidden(dia)     ||       dia.pos.exists       && !ctx.settings.YshowSuppressedErrors.value       && (dia.pos.start to dia.pos.end).exists(pos =>             positions.get((ctx.source  pos)).exists(_.hides(dia)))   // ... } ``` this fragment: ```scala (dia.pos.start to dia.pos.end).exists(pos =>     positions.get((ctx.source  pos)).exists(_.hides(dia))) ``` evaluates to `true` with third error. New position is considered as overlapping with position of previous error and it's not printed.  I think this may be desired behaviour  but I am not entirely sure.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/NavigateAST.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/neg/i15741.scala; tests/neg/i19351a.check; tests/neg/i19351a/Test.scala; tests/neg/i9299.scala,Florian3k,2022-08-10T13:19:54Z,2024-03-29T10:48:51Z
15098,21027,"Backport ""Fix Closure span assignment in makeClosure"" to LTS",Backports #15841 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/NavigateAST.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/neg/i15741.scala; tests/neg/i19351a.check; tests/neg/i19351a/Test.scala; tests/neg/i9299.scala,WojciechMazur,2024-07-04T17:17:13Z,2024-07-05T13:23:35Z
15091,15093,Java generic signatures can't refer to type members,"- The PolyType case was dead code imported from Scala 2 - The HKTypeLambda case was correct for eta-expanded classes   (e.g. in t7932 `Category[Tuple2]` should get as signature   `Category<scala.Tuple2>`)  but not for other type lambdas   where it could lead to type members appearing in the signature.   Fixed by splitting the case into an EtaExpansion case and   a case for all other HKTypeLambdas (which are just replaced   by a wildcard).  Fixes #15091.",closed,compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; tests/run/t7932.check; tests/run/t7932.scala,smarter,2022-05-03T15:06:30Z,2022-05-18T15:27:29Z
15078,15530,Fix lifting of arguments with -coverage-out,"Fixes #15078  fixes #15487  fixes #15505  Summary: - `LiftCoverage` extended `LiftComplex`  it now extends `LiftImpure` and forces the lifting of non-erased applications - `StringContext.s  f  raw` are now excluded from lifting - `ElimRepeated` didn't handle lifted arguments properly  because it assumed that every argument was a `Typed` tree  which is not the case for arguments lifted by the coverage transformation. This is now fixed.  Most of the added lines are tests :)  ## How I fixed it  Let's see if I can imitate the awesome explanations of Martin :smile:  `InstrumentCoverage` modifies the AST just after the pickling  and insert calls to `scala.runtime.coverage.Invoker.invoked` that record  at runtime  which methods are called. See an example [here](https://github.com/lampepfl/dotty/issues/15078#issuecomment-1127592307). To lift functions' arguments  it uses `LiftCoverage`  which lives with its `LiftXX` siblings in `EtaExpansion.scala`.  `LiftCoverage` previously extended `LiftComplex`. A quick look at the definition of `LiftComplex` tells me that it lifts everything  except trees that are constants or have the maximal purity `PurePath`. And [`TreeInfo.exprPurity`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/ast/TreeInfo.scala#L418) says that erased things are `Pure`  not `PurePath`! It seems that `LiftImpure` would be more appropriate than `LiftComplex`. Therefore  I happily type `LiftCoverage extends LiftImpure`. But stopping there would introduce another bug!  For example  given this code: ```scala def f() = throw RuntimeException() // throws an exception def g() = 0 // pure function someFunction(f()  g()) ``` We want to generate something like this  even if g has no side effects: ```scala Invoker.invoked(""f""  ...) val _f = f() Invoker.invoked(""g""  ...) val _g = g() Invoker.invoked(""someFunction""  ...) someFunction(_f  _g) ``` This way  f will throw its exception and prevent g from being marked as covered  which would be wrong.  Therefore  all non-erased applications must be lifted. This means that  when lifting arguments  `LiftCoverage.noLift` must return `false` for all non-erased `Apply`: ```scala override def noLift(expr: tpd.Tree)(using Context) =   if liftingArgs then noLiftArg(expr) else super.noLift(expr)  private def noLiftArg(arg: tpd.Tree)(using Context): Boolean =   arg match     case a: tpd.Apply => a.symbol.is(Erased) // don't lift erased applications  but lift all others     // the other cases recurse on more complex trees that may contain applications ```  Similarly  string interpolators `s`  `f` and `raw` shouldn't be lifted. I've excluded those three functions from lifting in `InstrumentCoverage.needsLift`.  Finally  I took a look at the mysterious issue #15078. For a call to this java method: ```scala Path createTempDirectory(String prefix  FileAttribute<?>... attrs) ``` `-Ycheck-all` reported the following problem: ```scala java.lang.AssertionError: assertion failed: Found:    ($2$ : java.nio.file.attribute.FileAttribute[?]*) Required: Array[? <: java.nio.file.attribute.FileAttribute[?]] ``` And the code crashed at runtime...  Yet again  it only happened when the arguments were lifted by `-coverage-out`. A quick minimization revealed that the problem was the handling of the java varargs  in the presence of lifted arguments.  I know that `ElimRepeated` is the phase that takes care of handling varargs. Some debugging showed that [`ElimRepeated.transformApply`](https://github.com/lampepfl/dotty/blob/fb6d00467dab102a5f6732ade4900da24940d86b/compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala#L126) was triggered  with: - `isWildcardStarArg(arg)`: true - `arg` of type `Ident`  `isWildcardStarArg` properly handled `Ident`  but not `ElimRepeated`  which assumed that everything was a `Typed` tree. Fixing that made the bug vanish.",closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-06-27T09:29:57Z,2022-07-02T14:52:36Z
15078,15573,Backport coverage fixes to 3.2.0,Backport #15530 and #15504 :),closed,compiler/src/dotty/tools/dotc/transform/ElimRepeated.scala; compiler/src/dotty/tools/dotc/transform/InstrumentCoverage.scala; compiler/src/dotty/tools/dotc/transform/localopt/StringInterpolatorOpt.scala; compiler/src/dotty/tools/dotc/typer/EtaExpansion.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; tests/coverage/pos/ContextFunctions.scoverage.check; tests/coverage/pos/Inlined.scoverage.check; tests/coverage/run/erased/test.check; tests/coverage/run/erased/test.scala; tests/coverage/run/erased/test.scoverage.check; tests/coverage/run/inline-def/test.check; tests/coverage/run/inline-def/test.scala; tests/coverage/run/inline-def/test.scoverage.check; tests/coverage/run/interpolation/test.check; tests/coverage/run/interpolation/test.scala; tests/coverage/run/interpolation/test.scoverage.check; tests/coverage/run/lifting-bool/test.check; tests/coverage/run/lifting-bool/test.scala; tests/coverage/run/lifting-bool/test.scoverage.check; tests/coverage/run/varargs/JavaVarargs_1.java; tests/coverage/run/varargs/test_1.check; tests/coverage/run/varargs/test_1.scala; tests/coverage/run/varargs/test_1.scoverage.check,TheElectronWill,2022-07-02T20:10:28Z,2022-07-04T07:47:34Z
15065,15090,Reject structural applications of polymorphic methods,"Fixes #15065  We always intended to reject them  but crashed before we got to that point.",closed,compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; tests/neg-custom-args/fatal-warnings/structural.scala; tests/neg/i15065.scala; tests/neg/structural.scala,odersky,2022-05-03T13:34:35Z,2022-05-04T10:18:15Z
15054,16699,Make sure annotations are typed in expression contexts,"The previous logic tried but had holes. A local context was established in `typedStats#localCtx` but that context was not found in annotations that were typechecked in the completer of the definition they decorated.  We are now more thorough and always allocate a localDummy as new owner if the owner would otherwise be a class. This means that closures in annotation arguments will have a term as owner  and therefore will be allocated in distinct local scopes.  Fixes #15054 ",closed,compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i15054.scala,odersky,2023-01-14T14:51:43Z,2023-01-15T10:46:48Z
15030,20474,Add special handling for comparisons with Singleton types,Fixes #15030,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15030.scala,odersky,2024-05-26T19:57:50Z,2024-05-28T13:40:23Z
15030,21126,"Backport ""Add special handling for comparisons with Singleton types"" to LTS",Backports #20474 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/i15030.scala,WojciechMazur,2024-07-08T17:42:31Z,2024-07-09T16:54:59Z
15028,15032,Add missing cases in SourceCode printer,Fixes #15028,closed,compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; tests/pos-macros/i15028a/Macro_1.scala; tests/pos-macros/i15028a/Test_2.scala; tests/pos-macros/i15028b/Macro_1.scala; tests/pos-macros/i15028b/Test_2.scala,nicolasstucki,2022-04-26T08:50:04Z,2022-05-05T09:42:57Z
15000,15016,Refine condition when to report errors in an inserted apply,Fixes #15000,closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i15000.check; tests/neg/i15000.scala,odersky,2022-04-23T17:37:31Z,2022-05-09T12:01:27Z
14999,15092,Eta expand CFTs in super accessors if needed,Fixes #14999,closed,compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; tests/pos/i14999.scala,odersky,2022-05-03T14:15:49Z,2022-05-09T03:58:38Z
14970,14971,Erase `Int | Nothing` signatures types into `Int`,"Aligns `| Nothing` with `& Any` and `Nothing |` with `Any &` for value types.  This also fixes `summon[ClassTag[Int | Nothing]]` as it is now equivalent to `summon[ClassTag[Int]]`.  This applies to all value types.  Fixes #14970 Fixes #14964  > :warning: This is a binary breaking change :warning: > > the Previous version generated the `def f: Int` and `def f: Object` variants of the method. > In the new one  we only generate the `def f: Int` version. > Unfortunately  the previous version called the boxed version of the interface that does not exist anymore. > > Is this something that we encounter in practice?",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/neg/i5823.scala; tests/run/i14964.scala; tests/run/i14964b.check; tests/run/i14964b.scala; tests/run/i14970.scala,nicolasstucki,2022-04-19T14:15:48Z,2022-05-04T10:11:23Z
14968,14969,Use filter in coverage tests,Fixes #14968,closed,compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala,nicolasstucki,2022-04-19T11:37:37Z,2022-04-19T16:16:23Z
14966,14967,Hande clashes between same-named exports,"Fixes #14966  Two parts   1. Better error message for ""clashes after erasure message"". We now print the original types of the clashing definitions as well as their common erased type.  2. In most cases heal the clash between two export forwarders by picking the one which is better according to overloading resolution.",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i14966.check; tests/neg/i14966.scala; tests/neg/i14966a.check; tests/neg/i14966a.scala; tests/pos/i14966.scala; tests/pos/i14966a.scala,odersky,2022-04-18T19:46:30Z,2022-04-22T10:23:17Z
14964,14971,Erase `Int | Nothing` signatures types into `Int`,"Aligns `| Nothing` with `& Any` and `Nothing |` with `Any &` for value types.  This also fixes `summon[ClassTag[Int | Nothing]]` as it is now equivalent to `summon[ClassTag[Int]]`.  This applies to all value types.  Fixes #14970 Fixes #14964  > :warning: This is a binary breaking change :warning: > > the Previous version generated the `def f: Int` and `def f: Object` variants of the method. > In the new one  we only generate the `def f: Int` version. > Unfortunately  the previous version called the boxed version of the interface that does not exist anymore. > > Is this something that we encounter in practice?",closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/test/dotty/tools/backend/jvm/DottyBytecodeTests.scala; tests/neg/i5823.scala; tests/run/i14964.scala; tests/run/i14964b.check; tests/run/i14964b.scala; tests/run/i14970.scala,nicolasstucki,2022-04-19T14:15:48Z,2022-05-04T10:11:23Z
14953,14963,Adapt infos of export default getters to qualifier,Fixes #14953,closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/i14953.scala,odersky,2022-04-18T13:09:29Z,2022-04-20T09:09:46Z
14952,21718,Always interpret underscores inside patterns as type bounds,"Always interpret underscores inside patterns as type bounds  even when `ctx.settings.XkindProjector.value == ""underscores""`.  Fixes #14952 and fixes #21400.  Issue introduced in #12378.",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; tests/pos/14952.scala; tests/pos/21400.scala; tests/pos/21400b.scala,mbovel,2024-10-07T17:49:12Z,2024-10-07T20:49:15Z
14952,22160,[sync/backports]: Synchronize with scala/scala3-lts,,closed,.github/Dockerfile; .github/workflows/ci.yaml; community-build/community-projects/scala-collection-compat; community-build/community-projects/stdLib213; community-build/src/scala/dotty/communitybuild/projects.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/Properties.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/MessageKind.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/staging/HealType.scala; compiler/src/dotty/tools/dotc/transform/ArrayApply.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/scala/quoted/runtime/impl/printers/Extractors.scala; compiler/src/scala/quoted/runtime/impl/printers/SourceCode.scala; compiler/test/dotty/tools/backend/jvm/ArrayApplyOptTest.scala; docs/_spec/Gemfile.lock; project/Build.scala; project/scripts/check-cla.sh; scaladoc-testcases/src/tests/opaqueTypes.scala; scaladoc/src/dotty/tools/scaladoc/tasty/ClassLikeSupport.scala; tests/neg/21538.check; tests/neg/21538.scala; tests/neg/i16815.check,WojciechMazur,2024-12-07T13:38:02Z,2024-12-09T11:34:08Z
14938,14940,Provide `Show[Throwable]`,Fixes #14938,closed,compiler/src/dotty/tools/dotc/printing/Formatting.scala,nicolasstucki,2022-04-14T11:22:51Z,2022-04-14T12:41:26Z
14921,15036,Relax avoidance checks more for match type reduction,"TypeParamRefs in match types do not have a corresponding TypeVar so they get assigned level Int.MaxValue by default  this means they can refer to variables at any level  but to avoid a crash in i14921 we also need the reverse direction (they can appear in the bounds of variables of any level)  both direction should be safe because these constraints only exist during match type reduction (see `MatchType#reduced`).  Fixes #14921.",closed,compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala; tests/pos/i14921/A_1.scala; tests/pos/i14921/B_2.scala,smarter,2022-04-26T12:44:29Z,2022-05-03T12:02:19Z
14914,14960,Treat all incomplete ifs as statements,"Previously only a one-armed if was treated as a statement where all parts were typed with Unit as expected type. We now extend that treatment also to multi-branch ifs that lack a final part.  Fixes #14914",closed,compiler/src/dotty/tools/dotc/semanticdb/internal/SemanticdbInputStream.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i14914.scala,odersky,2022-04-18T10:51:02Z,2022-04-19T07:02:39Z
14912,15322,Port JVM backend refactor from Scala 2,"This PR ports JVM backend refactor from Scala 2 as part of the https://github.com/lampepfl/dotty/issues/14912 thread.  It squashes changes based on the PRs:  - [x] https://github.com/scala/scala/pull/6012 - [x] https://github.com/scala/scala/pull/6057  The last [refactor introducing backend parallelism](https://github.com/scala/scala/pull/6124) would be introduced in the follow up PR ",closed,compiler/src/dotty/tools/backend/jvm/BCodeBodyBuilder.scala; compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/backend/jvm/BCodeIdiomatic.scala; compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/jvm/BTypes.scala; compiler/src/dotty/tools/backend/jvm/BTypesFromSymbols.scala; compiler/src/dotty/tools/backend/jvm/BackendUtils.scala; compiler/src/dotty/tools/backend/jvm/BytecodeWriters.scala; compiler/src/dotty/tools/backend/jvm/ClassfileWriter.scala; compiler/src/dotty/tools/backend/jvm/CodeGen.scala; compiler/src/dotty/tools/backend/jvm/CoreBTypes.scala; compiler/src/dotty/tools/backend/jvm/DottyBackendInterface.scala; compiler/src/dotty/tools/backend/jvm/GenBCode.scala; compiler/src/dotty/tools/backend/jvm/GenericSignatureVisitor.scala; compiler/src/dotty/tools/backend/jvm/PostProcessor.scala; compiler/src/dotty/tools/backend/jvm/PostProcessorFrontendAccess.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; docs/_docs/internals/backend.md,WojciechMazur,2022-05-30T09:42:12Z,2023-03-28T11:45:35Z
14907,15037,Relax assertion in TyperState#commit If there's nothing to commit; clear unreported warnings in Reporter#flush,,closed,compiler/src/dotty/tools/dotc/core/TyperState.scala; compiler/src/dotty/tools/dotc/reporting/Reporter.scala; tests/pos/i14907.scala,smarter,2022-04-26T13:15:45Z,2022-05-02T17:36:18Z
14903,14987,More aggressive reduction of type selection (fixes parboiled2),"Previously  when reducing `a.T` we checked if the type of `a` was a subtype of `RefinedType(..  T  TypeAlias(...))`  now we extend this check to handle refinements where the `info` is a `TypeBounds` where both bounds are equal.  This solves two big issues at once: - We can restore tests/pos/13491.scala to its original form from before #13780.   The check for abstract types introduced by #13780 for soundness reasons is no   longer hit because the type selection is reduced before we get to that point.   This is important because parboiled2 relies on this and is therefore currently   broken on 3.1.3-RC1 and main (https://github.com/sirthias/parboiled2/issues/365). - This fixes #14903 (slow compilation issue affecting parboiled2) without   caching skolems (as in the alternative fix #14909). Again  this is due to the   type containing skolem being reducible to a simpler type and therefore cacheable.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/pos/13491.scala; tests/pos/i14903a.scala; tests/pos/i14903b.scala,smarter,2022-04-20T20:15:01Z,2022-04-21T09:05:46Z
14903,14909,Cache skolem types,"Skolem types were not cached  which means that any type containing a skolem type was not cached either. This meant that the same match type with a skolem type as selector was created many times instead of once  so its reduction was not cached either. We now cache skolem types. It's a bet that in practice few skolem types are created and that therefore the hashtable pollution with skolemtypes is less of a problem than the potential problem of losing identity of types containing skolem types.  Fixes #14903",closed,compiler/src/dotty/tools/dotc/core/Types.scala,odersky,2022-04-12T09:43:08Z,2022-04-26T16:19:25Z
14902,15033,Fix reflect typeMembers to return all members,Fixes #14902,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; scaladoc/src/dotty/tools/scaladoc/tasty/SyntheticSupport.scala; tests/run-macros/i14902.check; tests/run-macros/i14902/Macros_1.scala; tests/run-macros/i14902/Test_2.scala,nicolasstucki,2022-04-26T09:31:49Z,2022-11-23T13:11:56Z
14901,15034,Fix typeMember/typeMembers documentation,Fixes #14901,closed,library/src/scala/quoted/Quotes.scala,nicolasstucki,2022-04-26T10:05:30Z,2022-04-26T13:43:55Z
14896,14898,Avoid redundant type test for irrefutable @unchecked patterns,"Fixes #14896 Fixes #14821 ",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i14821.scala; tests/pos/i14896.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,odersky,2022-04-09T16:11:21Z,2022-04-16T04:20:01Z
14870,14880,Recursion brake for joins in TypeComparer,"Don't recursively apply joins on the left hand side if it contains an AndType  in order to prevent possible exponential explosions.  Fixes #14870",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos-deep-subtype/i14870.scala,odersky,2022-04-07T19:51:54Z,2022-04-09T08:31:03Z
14858,14861,Fix isAbsType prediction in TreeUnpickler,"TreeUnpickler assumed that a type was an abstract type if its RHS was a TypeBounds tree. But TypeBounds trees also encode alias types  so this needs to be refined.  Fixes #14858",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; tests/pos/i14858/A_2.scala; tests/pos/i14858/M_1.scala,odersky,2022-04-06T12:07:40Z,2022-04-14T12:26:36Z
14846,16762,Support records in JavaParsers,"This is a port of https://github.com/scala/scala/pull/9551.  Fixes #14846. ",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/parsing/JavaTokens.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/pos-java16+/java-records/FromScala.scala; tests/pos-java16+/java-records/IntLike.scala; tests/pos-java16+/java-records/R1.java; tests/pos-java16+/java-records/R2.java; tests/pos-java16+/java-records/R3.java,TheElectronWill,2023-01-24T18:44:38Z,2023-05-21T12:24:09Z
14830,17514,test: add in regression test for #14830,[skip community_build]  closes #14830 ,closed,tests/pos/i14830.scala,ckipp01,2023-05-15T15:20:35Z,2023-05-16T07:57:13Z
14821,14898,Avoid redundant type test for irrefutable @unchecked patterns,"Fixes #14896 Fixes #14821 ",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i14821.scala; tests/pos/i14896.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,odersky,2022-04-09T16:11:21Z,2022-04-16T04:20:01Z
14821,14294,Enable stricter pattern binding warnings by default,"The first step of a phased-in approach to tighten the rules on pattern bindings  as described at https://docs.scala-lang.org/scala3/reference/changed-features/pattern-bindings.html  In 3.2: (this PR)  emit warnings by default for refutable pattern bindings. Keep the existing desugaring of for generators. In 3.3 (or later)  the above warnings become errors  and `case` is required on for generators to get filtering behavior.  Rewrites are available (under `-source 3.2-migration -rewrite`) to ease migration.  Closes #13832  Closes #14615 ",closed,community-build/community-projects/akka; community-build/community-projects/cats; community-build/community-projects/shapeless; compiler/src/dotty/tools/backend/jvm/BCodeBodyBuilder.scala; compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/backend/jvm/BCodeSkelBuilder.scala; compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; compiler/src/dotty/tools/backend/sjs/JSExportsGen.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/MainProxies.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/TreeTypeMap.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/config/Settings.scala; compiler/src/dotty/tools/dotc/config/SourceVersion.scala; compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeErasure.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/core/tasty/TastyPickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/unpickleScala2/Scala2Unpickler.scala; compiler/src/dotty/tools/dotc/interactive/Interactive.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/plugins/Plugins.scala,griggt,2022-01-19T04:25:06Z,2022-05-17T23:00:21Z
14806,15445,Remove DecompilerPrinter.scala,"Description: We tested all methods in REPL and none of them the methods being used. All tests pass. `do while` loop are not supported anymore. `packages` are not printed in REPL nor content of classes either.  fixes #14806",closed,compiler/src/dotty/tools/dotc/printing/DecompilerPrinter.scala; compiler/src/dotty/tools/dotc/printing/ReplPrinter.scala,EstebanMarin,2022-06-14T16:34:21Z,2022-06-23T13:26:07Z
14788,14800,Handle this prefix in classes (in quote patterns),Fixes #14788,closed,compiler/src/scala/quoted/runtime/impl/QuoteMatcher.scala; tests/run-custom-args/tasty-inspector/i14788.scala,nicolasstucki,2022-03-28T13:42:03Z,2022-04-20T16:35:33Z
14776,15646,Fix GADT casting when typing if expressions,"Fixes #14776.  Currently  when typing if expressions the compiler computes the union type of the two branches  during which GADT constraints may be implicitly used. This cause `-Ycheck` to fail due to the missing of proper GADT casts. The problems caused by this can be classified into two cases:  - In the first case  GADT casts are inserted in the branches  but the cast does not contain enough typing information to recover the type of the if tree when checking the tree. Details of this case are discussed in #15533.  - In the second case  no GADT cast is inserted. The tree fails the checker due to the lack of GADT casts. For example:   ```scala   trait Expr[T]   case class IntExpr() extends Expr[Int]    def flag: Boolean = ???    def foo[T](ev: Expr[T]): Int | T = ev match     case IntExpr() =>       if flag then         val i: T = ???         i       else         (??? : Int)   ```   The if tree is typed as `T | Int` which get simplified to `T` with GADT constraints  with no GADT cast inserted. Later the checker finds that `T | Int` does not confirm to `T` (w/o GADT constr) and fails.  This PR fixes this issue by doing two things:  - Change 1: When typing an if expression `if cond then thenp else elsep`  we will compare `thenp.tpe` and `elsep.tpe` to the type assigned to the if tree  which is `thenp.tpe | elsep.tpe`. If `thenp/elsep.tpe` is a subtype of `thenp.tpe | elsep.tpe` only when GADT constraint is used  we will insert a GADT cast to ensure `-Ycheck` passes in future phases. With this change  when typing the above example we will insert a cast `(??? : Int).$asInstanceOf[T]`.  - Change 2: We cherry-pick the related commit in #15533 to refine the cast with GADT approximated type when the casted tree is a singleton. For the example in #14776:   ```scala   trait T1   trait T2 extends T1    trait Expr[T] { val data: T = ??? }   case class Tag2() extends Expr[T2]    def flag: Boolean = ???    def foo[T](e: Expr[T]): T1 = e match {     case Tag2() =>       if flag then         new T2 {}       else         e.data   }   ```   We will insert a cast `e.data.$asInstanceOf[e.data.type & T2]` (instead of `e.data.$asInstanceOf[e.data.type & T1]`). With only change 1  we will insert two GADT casts like `e.data.$asInstanceOf[e.data.type & T1].$asInstanceOf[T2]` for this example  which is wordy and loses the identity of `e.data`. So change 2 makes sure the cases involving GADT casts will be solved  and change 1 takes care of the rest.  ",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/gadt-cast-if.scala; tests/pos/gadt-cast-singleton.scala; tests/pos/i14776-patmat.scala; tests/pos/i14776.scala,Linyxus,2022-07-11T13:08:23Z,2022-07-14T14:20:15Z
14770,15632,Instantiate more type variables to hard unions,Fixes #14770,closed,compiler/src/dotty/tools/dotc/core/Constraint.scala; compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/GadtConstraint.scala; compiler/src/dotty/tools/dotc/core/OrderingConstraint.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/TyperState.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/pos/i14770.scala,odersky,2022-07-09T12:10:13Z,2022-09-01T07:58:57Z
14743,15063,Keep annotation order,"This change makes sure non-repeated annotations are kept in the order they were found in the source code.  The motivation is not necessarily to have them in the original order  but to have them in an order that is deterministic across rebuilds (potentially even across different machines)  for reasons discussed further in #7661 and the corresponding scala/scala-dev#405  I tried adding an 'integration test' in `tests/pos` to be picked up by `IdempotencyCheck.scala`  but unfortunately couldn't reproduce the nondeterminism that way ~  so didn't end up including it in this commit~.  I didn't see an obvious place for a 'unit test' of this code  I'd be happy to add one when someone can recommend a good place to put it.  This is basically the dotty equivalent of https://github.com/scala/scala/commit/954c5d32d71a43b141be546877b01183a994a1b2  Fixes #14743",closed,compiler/src/dotty/tools/dotc/transform/RepeatableAnnotations.scala; tests/pos/Annotations.scala; tests/pos/annotations1/a.scala; tests/pos/annotations1/b.scala; tests/pos/annotationsJava/Annot1.java; tests/pos/annotationsJava/Annot2.java; tests/pos/annotationsJava/b.scala; tests/pos/annotationsJavaRepeatable/Annot1.java; tests/pos/annotationsJavaRepeatable/Annot2.java; tests/pos/annotationsJavaRepeatable/b.scala,raboof,2022-04-28T15:19:02Z,2022-04-28T21:12:46Z
14740,14923,Add reflect AppliedType constructor,Fixes #14740,closed,compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; project/MiMaFilters.scala; tests/pos-macros/i14740/Macro_1.scala; tests/pos-macros/i14740/Test_2.scala,nicolasstucki,2022-04-13T12:24:53Z,2022-04-19T10:48:43Z
14708,18133,Compile quote patterns directly into QuotePattern AST,"Fixes #14708 Fixes #16522 Fixes #18125 Fixes #18250",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/quoted/QuotePatterns.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; tests/neg-macros/i16522.check; tests/neg-macros/i16522.scala; tests/neg-macros/i6997b.scala; tests/pos-macros/i14708.scala; tests/pos-macros/i16522.scala; tests/pos-macros/i18125.scala; tests/pos-macros/i18125b.scala; tests/pos-macros/i18250.scala; tests/pos-macros/mirrorQuotePattern.scala; tests/pos-macros/mirrorQuotePattern2.scala,nicolasstucki,2023-07-04T13:00:29Z,2023-07-25T12:46:38Z
14697,16837,fix: ensure syntax blocks for ebnf are marked as such,"I see that this was done in the past in https://github.com/lampepfl/dotty/pull/14958/files  but then reverted in https://github.com/lampepfl/dotty/pull/14958. Like many commits  there really isn't an explanation of the revert  but from reading between the lines I assume the `;` was the actual issue  not the syntax highlighting. As it was pointed out  syntax.js doesn't actually support `ebnf`. They do say they support `bnf`  but that didn't really work when I was testing. Either way  this pr makes sure that we _do_ mark the snippets as `ebnf`. The reason for this isn't necessarily so that we _get_ syntax highlighting for these  but so that syntax.js doesn't infer the wrong type of syntax and provide odd highlighting like we currently have. This also helps to ensure screen readers know what type of codeblock this is.  fixes #14697 ",closed,docs/_docs/reference/changed-features/imports.md; docs/_docs/reference/changed-features/match-syntax.md; docs/_docs/reference/changed-features/pattern-bindings.md; docs/_docs/reference/changed-features/structural-types-spec.md; docs/_docs/reference/changed-features/vararg-splices.md; docs/_docs/reference/contextual/context-bounds.md; docs/_docs/reference/contextual/context-functions-spec.md; docs/_docs/reference/contextual/derivation.md; docs/_docs/reference/contextual/extension-methods.md; docs/_docs/reference/contextual/given-imports.md; docs/_docs/reference/contextual/givens.md; docs/_docs/reference/contextual/using-clauses.md; docs/_docs/reference/enums/adts.md; docs/_docs/reference/experimental/named-typeargs-spec.md; docs/_docs/reference/metaprogramming/macros-spec.md; docs/_docs/reference/metaprogramming/simple-smp.md; docs/_docs/reference/new-types/dependent-function-types-spec.md; docs/_docs/reference/new-types/intersection-types-spec.md; docs/_docs/reference/new-types/type-lambdas-spec.md; docs/_docs/reference/other-new-features/export.md; docs/_docs/reference/other-new-features/indentation.md; docs/_docs/reference/other-new-features/opaques-details.md,ckipp01,2023-02-06T13:18:06Z,2023-02-07T13:58:03Z
14696,15073,Detect quoted pattern variables in alternatives,Fixes #14696,closed,compiler/src/dotty/tools/dotc/core/Mode.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; tests/neg-macros/i14696.scala,nicolasstucki,2022-04-29T13:27:25Z,2022-05-09T13:36:18Z
14679,15072,Properly look for inline methods,"This fixes a false positive where we mistakenly interpreted an `inline val` as an inline method.  Fixes #14679",closed,compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; tests/neg-macros/i14679.scala,nicolasstucki,2022-04-29T12:31:36Z,2022-05-30T13:24:53Z
14667,14749,Fix #14667: Remove mangling of inner AnyQualifiedName's in fullNameSeparated,"resolves #14667  cc @sjrd ",closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; tests/run/i14667.check; tests/run/i14667.scala,gagandeepkalra,2022-03-22T18:36:32Z,2022-07-20T16:56:58Z
14653,15074,Dealias arg type to detect opaque types,Fixes #14653,closed,compiler/src/dotty/tools/dotc/typer/Inliner.scala; tests/pos/i14653.scala; tests/pos/i14653b.scala,nicolasstucki,2022-04-29T14:03:21Z,2022-05-04T08:14:50Z
14642,17512,test: add in a regression test for #14642,[skip community_build]  closes #14642 ,closed,tests/pos/i14642.scala,ckipp01,2023-05-15T12:50:01Z,2023-05-16T07:57:41Z
14582,17511,test: add in a regression test for #14582,[skip community_build]  closes #14582 ,closed,tests/run/i14582.scala,ckipp01,2023-05-15T12:30:11Z,2023-05-16T07:58:19Z
14488,15770,Fix #14488: Scala.js: Add compiler support for scala.Enumeration.,"This is the same logic that is used in the Scala.js compiler plugin for Scala 2.  We catch ValDefs of the forms ```scala   val SomeField = Value   val SomeOtherField = Value(5) ``` and rewrite them as ```scala   val SomeField = Value(""SomeField"")   val SomeOtherField = Value(5  ""SomeOtherField"") ``` For calls to `Value` and `new Val` without name that we cannot rewrite  we emit warnings.",closed,community-build/community-projects/play-json; compiler/src/dotty/tools/backend/sjs/JSDefinitions.scala; compiler/src/dotty/tools/dotc/transform/sjs/PrepJSInterop.scala; project/Build.scala; tests/neg-scalajs/enumeration-warnings.check; tests/neg-scalajs/enumeration-warnings.scala; tests/run/t1505.scala; tests/run/t2111.scala; tests/run/t3616.scala; tests/run/t3687.scala; tests/run/t3719.scala; tests/run/t4570.scala; tests/run/t5612.scala,sjrd,2022-07-27T17:24:19Z,2022-08-15T20:07:27Z
14487,17214,Feat: Add a blog configuration with yaml,"- Add input config  who allow to define the path import - Add output config  who allow to define the path destination - Add hidden  who allow to not generate the blog  Should I add warnings? For example when the path is not found. If so  how do I test? Because the path is searched for _blog but it is not found so the assert that asks for no warnings does not work as in [this one](https://github.com/lampepfl/dotty/blob/d4a86000404cd3bb774025d48151c6311d6bc96d/scaladoc/test/dotty/tools/scaladoc/ReportingTest.scala#L73).  Here is my proposal to add a blog configuration using a .yaml in the same place as the sidebar.yaml. This [feature](https://github.com/lampepfl/dotty/issues/14487) request is a bit old but I thought it would be interesting to create it to give a bit more flexibility to Scaladoc users. This first PR allows me to validate with you if this feature is good to implement and also to have some feedbacks I answer well to what is asked and that my code is relevant. So if it is the case  I will do the tests and the associated documentation.  ### TO-DO list: - [x] First version of the code - [x] Add documentation  Will be implemented in docs.scala-lang  [PR #2796](https://github.com/scala/docs.scala-lang/pull/2796): *** ### Blog Configuration Documentation Blog configuration is an important aspect of any blog platform. In order to customize the configuration of a blog  it is often necessary to modify the default settings. In this document  we will explain how to change the default config of a blog documentation with a file blog.yaml.  In order to modify the default settings of the blog documentation  users need to create a file named ""blog.yaml"" in the root directory of the blog. The file should contain the parameters that the user wants to change. For example  if a user wants to change the input directory to ""my_posts""  the output directory to ""my_docs""  and temporarily hide the blog  they can create a file with the following content:  `blog.yaml:` ``` input: my_posts output: my_docs hidden: true ``` Parameters:  The blog.yaml file is a configuration file that allows users to modify the default settings of their blog documentation. The following parameters can be configured in the blog.yaml file:  input: This parameter specifies the directory where the markdown pages and other files will be taken for the blogs page. By default  this is set to the ""_posts"" folder in the ""docs"" directory of the blog. However  users can change this to any other directory in ""docs"".  output: This parameter specifies the folder where the HTML pages will be generated. By default  this is set to the ""blog"" folder in the ""target/docs"" directory. However  users can change this to any other directory on ""target/docs"".  hidden: This parameter allows users to hide or unhide the blog temporarily. By default  this is set to ""false""  which means that the blog is visible to all users. However  if a user wants to temporarily hide the blog  they can set this parameter to ""true"". This can be useful if the user wants to make some changes to the blog and doesn't want anyone to see the changes until they are ready.  Once the file is created  the user needs to save it in the root directory of the blog. The next time the blog is built  the new settings will be applied. *** - [x] Add tests  ## Example (Success)  ### Code & Input <img width=""328"" alt=""Screenshot 2023-04-06 at 14 41 47"" src=""https://user-images.githubusercontent.com/44496264/230382241-9433d641-03ec-4495-8fd2-81fa6ce3bc17.png""> <img width=""329"" alt=""Screenshot 2023-04-06 at 14 41 58"" src=""https://user-images.githubusercontent.com/44496264/230382414-7876c601-b1f0-498f-85e1-71ecc500cf09.png"">  ### Result <img width=""326"" alt=""Screenshot 2023-04-06 at 14 42 09"" src=""https://user-images.githubusercontent.com/44496264/230382463-9fe234ac-3fd0-4d56-a04c-6f6deb01a308.png"">  ## First example (Hidden)  ### Code <img width=""254"" alt=""Screenshot 2023-04-06 at 14 46 27"" src=""https://user-images.githubusercontent.com/44496264/230382770-7aabf9a2-e46f-429d-b1c9-97892072349a.png"">  ### Result <img width=""335"" alt=""Screenshot 2023-04-06 at 14 42 36"" src=""https://user-images.githubusercontent.com/44496264/230383192-05e0187f-5ecf-4bd9-8697-122093577d43.png""> <img width=""316"" alt=""Screenshot 2023-04-06 at 14 42 47"" src=""https://user-images.githubusercontent.com/44496264/230382928-8130cddd-f8dd-4b43-bee1-15129af308c8.png"">  ## Example (Error) <img width=""316"" alt=""Screenshot 2023-04-06 at 14 43 03"" src=""https://user-images.githubusercontent.com/44496264/230383219-ff6844e2-47c5-40d6-9056-a8ab1dc6f8e6.png""> <img width=""945"" alt=""Screenshot 2023-04-06 at 14 43 14"" src=""https://user-images.githubusercontent.com/44496264/230383236-2ee07f63-640c-4bc1-a3b1-e0785ff467e9.png"">   Fixes: #14487",closed,scaladoc/src/dotty/tools/scaladoc/site/BlogParser.scala; scaladoc/src/dotty/tools/scaladoc/site/StaticSiteContext.scala; scaladoc/src/dotty/tools/scaladoc/site/StaticSiteLoader.scala; scaladoc/test/dotty/tools/scaladoc/site/BlogParserTest.scala,Dedelweiss,2023-04-06T12:49:00Z,2023-05-11T14:26:45Z
14460,14794,Allow non-hot values in SeqLiterals,"Closes #14460  #14751  Do not ensure that elements in a SeqLiteral are Hot.  Review by @liufengyun",closed,compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; tests/init/neg/enum-desugared.check; tests/init/neg/enum-desugared.scala; tests/init/neg/enum.check; tests/init/neg/leak-warm.check; tests/init/neg/leak-warm.scala,Xavientois,2022-03-27T20:47:34Z,2022-04-06T00:29:54Z
14451,16010,Fix i14451,"Fixes #14451  Implicitly assumed type clauses could only be at the beginning  which is wrong since: ```scala extension (x: Int) def foo[T](y: T) = ??? ``` de-sugars to something like: ```scala def foo(x: Int)[T](y: T) = ??? ```  To fix it  I implement `stripInferrable`  a variant of `stripImplicit` which also drops type clauses  and use it in `resultIsMethod` I suspect the other uses of `stripImplicit` could be simplified  or even fixed (assuming they make the same mistake as `resultIsMethod`)  by using `stripInferrable`",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i14451.scala,Sporarum,2022-09-09T13:19:09Z,2022-09-15T09:57:52Z
14432,15008,fix #14432: check if scala 2 case class is accessible,"closes #14432   check the access flags of the constructor (including qualified private) for Mirrors of scala 2 case classes (this is because `fromProduct` needs to call the constructor).",closed,compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; sbt-test/scala2-compat/i14432/app1fail/Test.scala; sbt-test/scala2-compat/i14432/app1ok/Test.scala; sbt-test/scala2-compat/i14432/app2fail/Test.scala; sbt-test/scala2-compat/i14432/build.sbt; sbt-test/scala2-compat/i14432/lib1/Foo.scala; sbt-test/scala2-compat/i14432/lib2/Foo.scala; sbt-test/scala2-compat/i14432/test; tests/neg/i14432.check; tests/neg/i14432.scala; tests/neg/i14432a.check; tests/neg/i14432a.scala; tests/neg/i14432b.check; tests/neg/i14432b.scala; tests/neg/i14432c.check; tests/neg/i14432c.scala; tests/neg/i14432d.check; tests/neg/i14432d.scala; tests/run/i14432.scala; tests/run/i14432a.scala; tests/run/i14432b.scala; tests/run/i14432c.scala,bishabosha,2022-04-22T12:17:27Z,2022-05-06T10:58:33Z
14351,17215,Add regression test for #14351,Closes #14351 as it was fixed in 3.2.2-RC1.,closed,tests/pos/i14351.scala,Decel,2023-04-06T14:56:17Z,2023-04-07T09:57:20Z
14340,16286,Properly handle `AnyVal`s as refinement members of `Selectable`s ,- add dynamic access to value classes field,closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/typer/Dynamic.scala; tests/run/i14340.check; tests/run/i14340.scala,G1ng3r,2022-11-06T17:55:28Z,2023-02-22T17:32:29Z
14306,14302,Add forward compat tests for macros,,closed,tests/disabled/pos-macros/forwardCompat-3.1/Macro_1_r3.1.scala; tests/disabled/pos-macros/forwardCompat-3.1/Test_2_c3.1.0.scala; tests/disabled/pos-macros/forwardCompat-3.1/why.md; tests/pos-macros/backwardCompat-3.0/Macro_1_c3.0.0.scala; tests/pos-macros/backwardCompat-3.0/Test_2.scala; tests/pos-macros/backwardCompat-3.1/Macro_1_c3.1.0.scala; tests/pos-macros/backwardCompat-3.1/Test_2.scala; tests/pos-macros/baseCompat/Macro_1.scala; tests/pos-macros/baseCompat/Test_2.scala; tests/pos-macros/forwardCompat-3.0/Macro_1_r3.0.scala; tests/pos-macros/forwardCompat-3.0/Test_2_c3.0.0.scala,nicolasstucki,2022-01-20T10:19:33Z,2022-01-26T12:04:40Z
14289,16185,Fix #14289: Accept Ident refs to `js.native` in native member rhs.,,closed,compiler/src/dotty/tools/dotc/transform/sjs/PrepJSInterop.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,sjrd,2022-10-14T09:13:17Z,2022-10-31T10:42:23Z
14278,17510,test: add in a regression test for #14278,[skip community_build]  closes #14278 ,closed,tests/pos/i14278.scala,ckipp01,2023-05-15T12:10:49Z,2023-05-16T07:58:55Z
14271,17509,test: add in a regression test for #14271,[skip community_build]  closes #14271 ,closed,tests/pos/i14271.scala,ckipp01,2023-05-15T12:06:19Z,2023-05-16T07:59:34Z
14218,18352,A slightly more conservative version of #14218,"Two changes to #14218   - Fix `hasUpperBound` to work correctly for higher-kinded types  - A more conservative fix in `IsFullyDefinedAccumulator`. We now maintain the symmetry that       - if variance < 0  we maximize      - if variance > 0 (and Nothing is admissible) we minimize      - only if variance = 0 we use the upper bound as a tie breaker     Previously  we maximized even at variance > 0 if there was an upper but no lower bound. But that was asymmetric since there is no corresponding case where we minimize at variance < 0 if there is a lower but no upper bound.",closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala,odersky,2023-08-07T17:00:24Z,2023-08-08T07:37:49Z
14218,18371,"Backport ""A slightly more conservative version of #14218""",Backports #18352,closed,compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Inferencing.scala,Kordyjan,2023-08-09T11:21:10Z,2023-08-10T06:19:53Z
14199,16260,Represent Java annotations as interfaces so they can be extended  and disallow various misuses of them,Inspired by the work of hrhino in Scala 2 (https://github.com/scala/scala/pull/6869).,closed,compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileConstants.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/transform/RepeatableAnnotations.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/neg/i5690.scala; tests/neg/java-ann-extends-separate/Ann_1.java; tests/neg/java-ann-extends-separate/Test_2.scala; tests/neg/java-ann-extends/Ann.java; tests/neg/java-ann-extends/Test.scala; tests/neg/java-ann-super-class/Ann.java; tests/neg/java-ann-super-class/Test.scala; tests/neg/java-ann-super-class2/Ann.java; tests/neg/java-ann-super-class2/Test.scala; tests/neg/java-ann-super-class3/Ann.java; tests/neg/java-ann-super-class3/Test.scala; tests/neg/java-fake-ann-separate/FakeAnn_1.java; tests/neg/java-fake-ann-separate/Test_2.scala; tests/neg/java-fake-ann/FakeAnn.java; tests/neg/java-fake-ann/Test.scala,smarter,2022-10-28T15:26:38Z,2022-11-14T14:31:24Z
14175,19635,Update phrasing for NotClassType explain error message,Fixes #14175,closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; docs/_docs/contributing/testing.md; tests/neg-scalajs/jsconstructorof-error-in-prepjsinterop.check; tests/neg-scalajs/jsconstructortag-error-in-prepjsinterop.check; tests/neg/classOf.check; tests/neg/i13808.check,aherlihy,2024-02-06T17:15:27Z,2024-02-19T01:48:49Z
14175,20923,"Backport ""Update phrasing for NotClassType explain error message"" to LTS",Backports #19635 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; docs/_docs/contributing/testing.md; tests/neg-scalajs/jsconstructorof-error-in-prepjsinterop.check; tests/neg-scalajs/jsconstructortag-error-in-prepjsinterop.check; tests/neg/classOf.check; tests/neg/i13808.check,WojciechMazur,2024-07-01T20:09:19Z,2024-07-02T19:15:11Z
14168,16187,Fix #14168: Do not elide fields required for Scala.js interop semantics.,,closed,compiler/src/dotty/tools/backend/sjs/JSCodeGen.scala; compiler/src/dotty/tools/dotc/transform/Memoize.scala; tests/run/uninitialized-field-values.scala; tests/sjs-junit/test/org/scalajs/testsuite/compiler/RegressionTestScala3.scala,sjrd,2022-10-14T10:06:24Z,2022-10-18T16:40:15Z
14164,14919,Also hoist lifted arguments in super calls,"Super calls with default and named parameters can have lifted arguments in val defs preceding the constructor call. If these are complex  we need to hoist them out as well.  Fixes #14164",closed,community-build/community-projects/scala-parallel-collections; compiler/src/dotty/tools/dotc/transform/HoistSuperArgs.scala; tests/run/i14164.scala,odersky,2022-04-13T08:10:05Z,2022-04-16T15:54:38Z
14131,16757,Prepare bodies of inline forwarders eagerly,"* Fix context owner of `PrepareInlineable.registerInlineInfo`. It should have as owner the inline method (`forwarder` in this case). * Eagerly compute the inlinable RHS. Because we create the forwarder already typed  we do not evaluate/force in typer the `LazyBodyAnnotation` which is what triggers the computation of the inline accessors. This happened in posttyper which was too late. There might be a cleaner solution to this problem  maybe forcing the annotation explicitly.  Fixes #14131 Fixes #16469",closed,compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos-macros/i14131.scala; tests/pos/i16469.scala,nicolasstucki,2023-01-24T15:19:47Z,2023-02-12T09:44:58Z
14123,17389,Add regression test,Fix #14123,closed,tests/neg-macros/i14123a.scala; tests/neg-macros/i14123b.scala,nicolasstucki,2023-05-02T07:22:31Z,2023-05-03T08:47:18Z
14096,17508,test: add in a regression test for #14096,[skip community_build]  closes #14096 ,closed,tests/pos/i14096.scala,ckipp01,2023-05-15T11:51:24Z,2023-05-15T14:01:11Z
14059,16882,ClassfileParser: Avoid cycle when accessing companion in inner class lookup,"Previously  the call to `info` on the module val could lead to a cycle since the module val might be in the process of being completed. This commit fixes this by only using the module class which is all we need to lookup members.  Fixes #15288. Fixes #14059.  Co-Authored-By: Tom Grigg <tomegrigg@gmail.com>",closed,compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; sbt-test/java-compat/i15288/QueryRequest.java; sbt-test/java-compat/i15288/Test.scala; sbt-test/java-compat/i15288/build.sbt; sbt-test/java-compat/i15288/test,smarter,2023-02-10T15:58:04Z,2023-02-16T12:50:32Z
14042,15075,Support inline methods calling private inline methods on `this`,Fix #14042,closed,compiler/src/dotty/tools/dotc/typer/Inliner.scala; tests/pos/i14042.scala,nicolasstucki,2022-04-29T15:07:41Z,2022-05-06T20:36:11Z
14025,15006,Fix 14025: restrict curried type lambdas in mirror generation,"based on #15004   we prevent generating mirrors for types where the mirroredType is kind ` * -> * -> *`  closes #14025",closed,compiler/src/dotty/tools/dotc/transform/TypeUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/neg/i14025.check; tests/neg/i14025.scala; tests/neg/i14823.check; tests/neg/i14823.scala; tests/pos/i14823.scala,bishabosha,2022-04-22T09:17:52Z,2022-05-05T10:50:23Z
14001,14924,Add regression test,Closes #14001,closed,tests/neg-macros/i14001/Macro_1.scala; tests/neg-macros/i14001/Test_2.scala,nicolasstucki,2022-04-13T12:49:54Z,2022-04-15T08:00:31Z
13990,17446,Constant fold all the number conversion methods,Co-authored-by: Eugene Flesselle <eugenefle@users.noreply.github.com> Co-authored-by: Martin Kucera <github@mkucera.cz>  Fixes #13990. Made during the Scala Spree :),closed,compiler/src/dotty/tools/dotc/typer/ConstFold.scala; tests/neg/serialversionuid-not-const.scala; tests/pos/i13990.scala,TheElectronWill,2023-05-09T15:55:57Z,2023-05-24T19:29:52Z
13986,16001,Improvements for implicit searches with top-level type variables,"Two improvements for implicit searches involving type variables.   1. We now always add a comment when an implicit search is rejected due to the ""too unspecific"" criterion of #13886  commit [Refine checking for underspecified implicit queries](https://github.com/lampepfl/dotty/pull/13886/commits/db5956b36a7e62b77f4b3a9335ab1587e0e47e2c).     There have been quite a few regressions that hit that problem  so it is good to know immediately what    the issue is.    2. There is now a better wildcard approximation of higher-kinded type applications. This makes several programs (including original #15998) compile  which were classified as not specific enough before.  Fixes #15998 Fixes #15820 Fixes #15670 Fixes #15160  Fixes #13986 ",closed,compiler/src/dotty/tools/dotc/typer/ErrorReporting.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/src/dotty/tools/dotc/typer/ProtoTypes.scala; tests/neg/i15998.check; tests/neg/i15998.scala; tests/pos/i15160.scala; tests/pos/i15670.scala; tests/pos/i15820.scala; tests/run/i13986.check; tests/run/i13986.scala; tests/run/i13987.scala; tests/run/i15998.scala,odersky,2022-09-08T16:09:39Z,2022-09-09T13:44:35Z
13897,21362,Fixes IllegalAccessError with Java package protected class,"This is a backport of Scala 2.x scala/scala#6023 by @lrytz   Fixes #13841 Fixes #13897  ## Problem When compiling `builder.call1().call2()` where both are Java-defined package-protected class through a public subsclass  Scala 3 does not properly cast the receiver to the public class  and results in an IllegalAccessError.  ## Solution This backports the casting fix from the Scala 2.x compiler.",closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; tests/run/java-package-protected/A.java; tests/run/java-package-protected/C.scala; tests/run/java-package-protected/Test.scala,eed3si9n,2024-08-10T18:31:45Z,2024-09-12T18:34:48Z
13841,21362,Fixes IllegalAccessError with Java package protected class,"This is a backport of Scala 2.x scala/scala#6023 by @lrytz   Fixes #13841 Fixes #13897  ## Problem When compiling `builder.call1().call2()` where both are Java-defined package-protected class through a public subsclass  Scala 3 does not properly cast the receiver to the public class  and results in an IllegalAccessError.  ## Solution This backports the casting fix from the Scala 2.x compiler.",closed,compiler/src/dotty/tools/dotc/transform/Erasure.scala; tests/run/java-package-protected/A.java; tests/run/java-package-protected/C.scala; tests/run/java-package-protected/Test.scala,eed3si9n,2024-08-10T18:31:45Z,2024-09-12T18:34:48Z
13774,16088,Clarify inline match doc,Fixes #13774 ,closed,docs/_docs/reference/metaprogramming/inline.md,som-snytt,2022-09-22T19:38:43Z,2022-09-29T10:40:53Z
13760,14252,fix 2 problems plus add workaround for #13760,"replaces #14241  These changes fix 2 problems  and add a workaround for #13760.  - script exceptions are discarded by `MainGenericRunner`  when running from a compiled jar. - when the `-save` option is not specified at runtime  execution should not be from a previously compiled jar  The `-save` behavior matches the expectation in `scala2`.  This PR displays all exceptions on the Console when running from a `jar` file.  _This PR executes from the `jar` only if the `-save` option is specified at runtime._   Problem scripts (i.e.  with references to `java.sql.Date`) can now selectively disable the -save option.   The `-save` option change provides a workaround for the `ClassNotFound: java.sql.Date` problem  which affects jdk 9+. ```scala `java.lang.ClassNotFoundException: java.sql.Date` ``` A new command line option `-nosave` is provided  for undoing a `-save` option on the command line (e.g.  in`SCALA_OPTS`)  This provides a way for individual scripts to override the `-save` option.  Adding `-save` to `SCALA_OPTS` will typically reduce script startup time by a couple of seconds.  This PR provides per-script granularity for overriding the '-save' option.   Scripts that would otherwise throw an exception when running from a compiled jar may specify `-nosave` in the hashbang line.   This avoids having to remove the `-save` option from `SCALA_OPTS`.  The `-nosave` option can be added to the hashbang line  as in these two example hashbang lines:  The first version requires `/usr/bin/env` version `8.30` or later: ```sh #!/usr/bin/env -S scala -nosave ```  This version uses the path to the scala wrapper: ```sh #!/opt/scala3/bin/scala -nosave ``` ",closed,compiler/src/dotty/tools/MainGenericRunner.scala; compiler/test-resources/scripting/sqlDateError.sc; compiler/test/dotty/tools/scripting/BashScriptsTests.scala,philwalk,2022-01-11T22:13:46Z,2022-01-12T15:39:47Z
13760,15103,fix for #13760 - running script compiled jar no longer restricted to java.base module,"This resolves the problem described in #13760.  The essence of the problem: running a script with the `-save` option will throw a `ClassNotFoundException`  but only when running from the compiled jar  and only if the script references modules other than `java.base` .  The jar is fine when run via `java -jar <jarfile>`  the issue only occurs when scala launches the jar.   The workaround for the problem has been to append the `-nosave` option to the hashbang line.  The cause of the problem is that `bootClassLoader` in [ScalaClassLoader](https://github.com/lampepfl/dotty/blob/8a83f909b20952939b2b0e7593a17d4403af4e88/compiler/src/dotty/tools/runner/ScalaClassLoader.scala#L70) is set to `null` when running in `jdk9+`. The following command line illustrates the problem code at `ScalaClassLoader line 70`: ```scala $ /opt/scala3/bin/scala -e 'import java.lang.invoke.*; MethodHandles.lookup().findStatic(classOf[ClassLoader]  ""getPlatformClassLoader""  MethodType.methodType(classOf[ClassLoader])).invoke().asInstanceOf[ClassLoader]' ``` <details> <pre> ```scala $ /opt/scala3/bin/scala -e 'import java.lang.invoke.*; MethodHandles.lookup().findStatic(classOf[ClassLoader]  ""getPlatformClassLoader""  MethodType.methodType(classOf[ClassLoader])).invoke().asInstan ceOf[ClassLoader]' Exception in thread ""main"" java.lang.invoke.WrongMethodTypeException: cannot convert MethodHandle()ClassLoader to (Object[])Object         at java.base/java.lang.invoke.MethodHandle.asTypeUncached(MethodHandle.java:861)         at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:847)         at java.base/java.lang.invoke.MethodHandleImpl$WrappedMember.asTypeUncached(MethodHandleImpl.java:1371)         at java.base/java.lang.invoke.MethodHandle.asType(MethodHandle.java:847)         at java.base/java.lang.invoke.Invokers.checkGenericType(Invokers.java:495)         at compileFromString$minus08906c21$minusee54$minus45f1$minusb470$minusfe08bfbca561$package$.main(compileFromString-08906c21-ee54-45f1-b470-fe08bfbca561.scala:2)         at main.main(compileFromString-08906c21-ee54-45f1-b470-fe08bfbca561.scala:1)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)         at java.base/java.lang.reflect.Method.invoke(Method.java:566)         at dotty.tools.scripting.StringDriver.compileAndRun(StringDriver.scala:36)         at dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:257)         at dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:267)         at dotty.tools.MainGenericRunner.main(MainGenericRunner.scala) ``` </pre> </details>  An explanation of why this code no longer works for `jdk9+` is described here:  [Regression in behavior of a null parent ClassLoader](https://bugs.openjdk.java.net/browse/JDK-8161269)  The proposed fix is based on the fix to #11658. ",closed,compiler/src/dotty/tools/runner/ScalaClassLoader.scala; compiler/test-resources/scripting/sqlDateError.sc,philwalk,2022-05-04T13:30:24Z,2022-05-19T21:44:06Z
13757,17322,Fix #13757: Explicitly disallow higher-kinded scrutinees of match types.,,closed,compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i13757-match-type-anykind.scala,sjrd,2023-04-20T13:30:41Z,2023-04-20T15:02:48Z
13732,12540,Re-architecture quote pickling,"   Separate the logic that creates holes in quotes from the logic that pickles the quotes. Holes are created in the `Splicer` phase and the result of the transformation can be `-Ycheck`ed. Now  the `PickleQuotes` phase only needs to extract the contents of the holes  pickle the quote and put them into a call to `unpickleExprV2`/`unpickleTypeV2`. See documentation in `PickleQuotes` and `Splicer`.      We add `unpickleExprV2`/`unpickleTypeV2` to support some optimization in the encoding of the pickled quote. Namely  we removed an unnecessary lambda from the arguments of the hole passed into the contents of the hole. By not changing `unpickleExpr`/`unpickleType` the current compiler will be able to handle the old encoding in binaries compiled with older compilers.      Fixes #8100 Fixes #12440 Fixes #13563 Fixes #13732 Fixes #14337  Fixes #14373 ",closed,compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/ast/TreeTypeMap.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/core/StagingContext.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/quoted/PickledQuotes.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/PickleQuotes.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/ReifiedReflect.scala; compiler/src/dotty/tools/dotc/transform/Splicing.scala; compiler/src/dotty/tools/dotc/transform/Staging.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala; compiler/src/dotty/tools/dotc/typer/Inliner.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/runtime/QuoteUnpickler.scala; project/MiMaFilters.scala; sbt-test/scala3-compat/hierarchical-mirrors-3.0/app/Main.scala; sbt-test/scala3-compat/hierarchical-mirrors-3.0/build.sbt,nicolasstucki,2021-05-20T12:43:46Z,2022-04-20T09:52:16Z
13691,17507,test: add in a regression test for #13691,Looks like there was already another test linked to this  but this adds in the original example to fully close the issue.  [skip community_build]  close #13691 ,closed,tests/run/i13691b.scala,ckipp01,2023-05-15T11:13:10Z,2023-05-15T14:12:05Z
13668,15636,Merge nested polytypes in more cases in resolveOverloaded,"In some cases while going deeper into alternatives during overload resolution  we may end up with a nested polytype after dropping contextual parameters.  In particular this can happen for an extension with a `using` clause  as seen in tests/pos/i11713.scala and tests/pos/i13668.scala.  The overload applicability test fails here unless the type parameter lists are merged.  Co-authored-by: Gagandeep Kalra <gagandeepkalra1994@gmail.com> Co-authored-by: Mark T. Kennedy <mtk@acm.org>  Fixes #11713 Fixes #13668",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i11713.scala; tests/pos/i13668.scala,griggt,2022-07-09T20:38:17Z,2022-07-10T08:12:34Z
13523,15094,Fix #13523: Survive missing Java inner annotation classfiles,"Co-authored-by: Seth Tisue <seth@tisue.net>  Fixes #13523",closed,compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/test/dotty/tools/AnnotationsTests.scala,griggt,2022-05-03T16:24:02Z,2022-05-03T18:44:42Z
13376,17388,Add regression tests,Closes #13376,closed,tests/neg-macros/i13376a.scala; tests/neg-macros/i13376b.scala; tests/pos-macros/i13376a.scala; tests/pos-macros/i13376b.scala,nicolasstucki,2023-05-02T07:16:02Z,2023-05-02T11:44:23Z
13346,14985,fix #13346: add regression test,closes #13346,closed,tests/pos/i13346.scala,bishabosha,2022-04-20T15:46:09Z,2022-04-21T12:04:15Z
13334,14568,Handle ownership changes in InlineTyper,"Fixes a part of #13334 which now works for `transparent inline`.  The minimized example ```scala class Bar  inline def bar(i: Int): Bar =   new Bar:     def j = i  class Foo(x: Int):   def foo = bar(x) ``` now works also for `inline`. But the original example fails with an unrelated error (wrong source position). I verified that this error occurs even with the inliner before the PR if we turn off ownership checking. So the source position error was simply masked before by the ownership error  which happened before.  I updated #13334 to reflect the new state.  ",closed,compiler/src/dotty/tools/dotc/transform/YCheckPositions.scala; compiler/src/dotty/tools/dotc/typer/Inliner.scala; tests/pos/i13334.scala,odersky,2022-02-25T13:57:20Z,2022-03-07T08:48:35Z
13334,17505,test: add in a regression test for #13334,[skip community_build]  closes #13334 ,closed,tests/run/i13334.scala,ckipp01,2023-05-15T08:36:49Z,2023-05-15T11:58:46Z
13216,17503,test: add in a regression test for #13216,[skip community_build]  closes #13216 ,closed,tests/run/i13216.scala,ckipp01,2023-05-14T16:08:57Z,2023-05-15T06:50:02Z
13161,18455,Propagate constant in result of inline match,Fixes #13161,closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i13161.scala,nicolasstucki,2023-08-25T08:54:05Z,2023-09-01T13:20:14Z
13161,20606,"Backport ""Propagate constant in result of inline match"" to LTS",Backports #18455 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i13161.scala,WojciechMazur,2024-06-19T11:01:44Z,2024-06-20T08:27:03Z
13161,20666,"Backport ""Propagate constant in result of inline match"" to LTS",Backports #18455 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/inlines/Inliner.scala; tests/pos/i13161.scala,WojciechMazur,2024-06-20T12:43:36Z,2024-06-20T14:54:14Z
13082,18739,Add support for xsbti.compile.CompileProgress,"~so far only the progress tracking  I intend to add in support for cancellation as well~ Edit: now supports cancellation and progress tracking.  I am testing cancellation in a synchronous way  should I test in another way (thread interruptions)?  fixes https://github.com/lampepfl/dotty/issues/13082  ### Release Notes  Scala 3.4 restores support for progress tracking (available in Scala 2)  this also provides an interface for cooperative interruption of compilation (e.g. cancellation from within an editor). Metals IDE users will notice that compilation progress is no longer frozen at 0% when using sbt or bloop as the BSP server. IntelliJ will also correctly report progress for BSP and sbt based projects",closed,compiler/src/dotty/tools/dotc/Run.scala; compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/core/Phases.scala; compiler/src/dotty/tools/dotc/fromtasty/ReadTasty.scala; compiler/src/dotty/tools/dotc/parsing/ParserPhase.scala; compiler/src/dotty/tools/dotc/sbt/interfaces/ProgressCallback.java; compiler/src/dotty/tools/dotc/semanticdb/ExtractSemanticDB.scala; compiler/src/dotty/tools/dotc/transform/MegaPhase.scala; compiler/src/dotty/tools/dotc/transform/init/Checker.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/TyperPhase.scala; compiler/test/dotty/tools/DottyTest.scala; compiler/test/dotty/tools/dotc/sbt/ProgressCallbackTest.scala; sbt-bridge/src/dotty/tools/xsbt/CompilerBridge.java; sbt-bridge/src/dotty/tools/xsbt/CompilerBridgeDriver.java; sbt-bridge/src/dotty/tools/xsbt/ProgressCallbackImpl.java; sbt-bridge/test/xsbt/CompileProgressSpecification.scala; sbt-bridge/test/xsbt/ExtractUsedNamesSpecification.scala; sbt-bridge/test/xsbt/ScalaCompilerForUnitTesting.scala; sbt-bridge/test/xsbti/TestCompileProgress.scala; scaladoc/src/scala/tasty/inspector/TastyInspector.scala; staging/src/scala/quoted/staging/QuoteCompiler.scala; tasty-inspector/src/scala/tasty/inspector/TastyInspector.scala,bishabosha,2023-10-20T16:07:50Z,2023-10-31T15:45:48Z
13021,20104,add regression test for issue #13021,fixes #13021 ,closed,tests/pos-macros/i13021/DFBits.scala; tests/pos-macros/i13021/DFToken.scala; tests/pos-macros/i13021/Width.scala,bishabosha,2024-04-05T14:15:56Z,2024-04-09T07:32:50Z
13021,21050,"Backport ""add regression test for issue #13021"" to LTS",Backports #20104 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,tests/pos-macros/i13021/DFBits.scala; tests/pos-macros/i13021/DFToken.scala; tests/pos-macros/i13021/Width.scala,WojciechMazur,2024-07-05T15:51:11Z,2024-07-05T21:29:51Z
12991,15583,Check is inline unapply has leading implicits,"We patch the crash in the compiler but do not support this feature yet.  To support it see https://github.com/lampepfl/dotty/pull/13158  Fixes #12991",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; tests/neg/i12991.scala,nicolasstucki,2022-07-04T14:51:56Z,2022-07-08T14:34:23Z
12991,16358,Support inline unapplySeq and with leading given parameters,"Based on #15191 by @gorilskij  and enables support for #12991.  Fixes #8577 Fixes #12991 Fixes #15188 ",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; tests/neg/i12991.scala; tests/pos-macros/i8577a/Macro_1.scala; tests/pos-macros/i8577a/Main_2.scala; tests/pos-macros/i8577b/Macro_1.scala; tests/pos-macros/i8577b/Main_2.scala; tests/pos-macros/i8577c/Macro_1.scala; tests/pos-macros/i8577c/Main_2.scala; tests/pos-macros/i8577d/Macro_1.scala; tests/pos-macros/i8577d/Main_2.scala; tests/pos-macros/i8577e/Macro_1.scala; tests/pos-macros/i8577e/Main_2.scala; tests/pos-macros/i8577f/Macro_1.scala; tests/pos-macros/i8577f/Main_2.scala; tests/pos-macros/i8577g/Macro_1.scala; tests/pos-macros/i8577g/Main_2.scala; tests/pos-macros/i8577h/Macro_1.scala; tests/pos-macros/i8577h/Main_2.scala; tests/pos/i12991.scala; tests/pos/i15188.scala; tests/pos/i15188b.scala; tests/pos/i8577.scala; tests/run/i8577a.scala; tests/run/i8577b.scala; tests/run/i8577c.scala; tests/run/i8577d.scala; tests/run/i8577e.scala; tests/run/i8577f.scala; tests/run/i8577g.scala; tests/run/i8577h.scala,nicolasstucki,2022-11-17T08:21:25Z,2022-12-07T15:59:52Z
12939,16303,Make refined type printing more source compatible,"Fixes #12939  Supersedes #13698",closed,compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; compiler/test-resources/type-printer/source-compatible; tests/neg-custom-args/captures/i15116.check; tests/neg-custom-args/captures/i15772.check; tests/neg-custom-args/captures/lazylist.check; tests/neg-custom-args/captures/lazyref.check; tests/neg-scalajs/jsconstructorof-error-in-prepjsinterop.check; tests/neg-scalajs/jsconstructortag-error-in-prepjsinterop.check; tests/neg/classOf.check; tests/neg/i14025.check; tests/neg/i4986c.check; tests/patmat/aliasing.check; tests/patmat/andtype-refinedtype-interaction.check,jan-pieter,2022-11-08T16:43:44Z,2022-11-11T19:02:24Z
12919,14986,Fix 12919 - summon anonymous mirror when companion is a case object,"closes #12919  closes #15101   There were two alternatives to solve this: - (first commit) use singleton proxy to summon a mirror for a case object when its companion is a sum/product  always cache mirror of case class / sum type in its companion. - (second commit) make the sum/product mirror anonymous when their companion is a case object  The first option will result in less code generation  however it will change the parent types of the companion from `Mirror.Singleton` to either `Mirror.Product` or `Mirror.Sum` (and change signatures of `fromProduct` or `ordinal` in the companion)  the second option will result in more code generation  but will preserve the signatures of the companion in bytecode for existing code.",closed,compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/typer/Synthesizer.scala; tests/run/i12919.scala; tests/run/i12919a.scala; tests/run/i12919b.scala; tests/run/i15101.scala,bishabosha,2022-04-20T16:34:10Z,2022-05-05T08:58:56Z
12840,16260,Represent Java annotations as interfaces so they can be extended  and disallow various misuses of them,Inspired by the work of hrhino in Scala 2 (https://github.com/scala/scala/pull/6869).,closed,compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileConstants.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/transform/RepeatableAnnotations.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/neg/i5690.scala; tests/neg/java-ann-extends-separate/Ann_1.java; tests/neg/java-ann-extends-separate/Test_2.scala; tests/neg/java-ann-extends/Ann.java; tests/neg/java-ann-extends/Test.scala; tests/neg/java-ann-super-class/Ann.java; tests/neg/java-ann-super-class/Test.scala; tests/neg/java-ann-super-class2/Ann.java; tests/neg/java-ann-super-class2/Test.scala; tests/neg/java-ann-super-class3/Ann.java; tests/neg/java-ann-super-class3/Test.scala; tests/neg/java-fake-ann-separate/FakeAnn_1.java; tests/neg/java-fake-ann-separate/Test_2.scala; tests/neg/java-fake-ann/FakeAnn.java; tests/neg/java-fake-ann/Test.scala,smarter,2022-10-28T15:26:38Z,2022-11-14T14:31:24Z
12679,17502,test: add in a regression test for #12679,[skip community_build]  closes #12679 ,closed,tests/pos/i12679.scala,ckipp01,2023-05-14T12:37:06Z,2023-05-15T06:51:12Z
12663,17501,test: add in a regression test for #12663,This adds in all 3 examples from the issue reported.  [skip community_build]  closes #12663 ,closed,tests/pos/i12663.scala,ckipp01,2023-05-14T12:31:02Z,2023-05-15T06:52:41Z
12662,16836,Repeated params must correspond in override,"Refchecks runs after elimRepeated and did not error on an attempt to override RepeatedParam with Seq.  Also show RepeatedParam in error message for double definition.  Fixes https://github.com/lampepfl/dotty/issues/12662  Resubmits https://github.com/lampepfl/dotty/pull/13248 which was opened against old master.",closed,compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/neg/overrides.scala,som-snytt,2023-02-06T07:07:03Z,2023-06-26T13:02:19Z
12621,16811,Fix #12621: Scala.js: Better error message for JS trait ctor param.,JS traits cannot have constructor params any more than they can have concrete term members. This improves the error message in that case.,closed,compiler/src/dotty/tools/dotc/transform/sjs/PrepJSInterop.scala; tests/neg-scalajs/js-trait-ctor-param.check; tests/neg-scalajs/js-trait-ctor-param.scala,sjrd,2023-02-02T14:07:42Z,2023-02-02T15:29:30Z
12556,14874,Types with only an abstract inline method are not SAMs,Fixes #12556,closed,compiler/src/dotty/tools/dotc/core/Types.scala; tests/neg/i12555b.scala,odersky,2022-04-07T09:36:52Z,2022-04-11T12:38:26Z
12554,14877,Clarify and test rules for newline suppression,"Clarify and test rules for when to suppress a newline insertion based on indentation.  Fixes #12554",closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/parsing/Scanners.scala; docs/_docs/reference/other-new-features/indentation.md; tests/neg/i12554a.scala; tests/neg/i12554b.scala,odersky,2022-04-07T13:10:00Z,2022-04-15T09:19:44Z
12492,16445,Support use-site meta-annotations,"Fixes #12492 Fixes #15318",closed,compiler/src/dotty/tools/dotc/core/Annotations.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/transform/BeanProperties.scala; compiler/src/dotty/tools/dotc/transform/Memoize.scala; compiler/src/dotty/tools/dotc/transform/Pickler.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/util/Spans.scala; tests/run/beans.check; tests/run/beans/Test_3.java; tests/run/i12492.check; tests/run/i12492/MyColumnBase.java; tests/run/i12492/MyTable.scala; tests/run/i12492/Test.scala; tests/run/i15318.check; tests/run/i15318/Bean.scala; tests/run/i15318/JsonProperty.java; tests/run/i15318/Test.scala,dwijnand,2022-11-30T17:15:03Z,2022-12-14T08:15:01Z
12487,14889,Even more regression tests,"Closes #12487 Closes #12160 ",closed,tests/neg/i12487.check; tests/neg/i12487.scala; tests/run/i12160.scala,odersky,2022-04-08T09:47:17Z,2022-04-10T04:29:12Z
12482,14884,Survive unpickling crashes when completing from Tasty,"Survive unpickling crashes when completing symbols from Tasty. Crashes can happen in a number of circumstances  from overwritten symbols (as in the test) to corrupted Tasty files. We should survive them and present a regular error message.  Fixes #12482",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; tests/neg/i12482.check; tests/neg/i12482.scala,odersky,2022-04-08T07:23:49Z,2022-04-11T12:42:38Z
12462,14885,Don't cast to a value class as self type,Fixes #12462,closed,compiler/src/dotty/tools/dotc/transform/ExplicitSelf.scala; compiler/src/dotty/tools/dotc/transform/SymUtils.scala; tests/neg/i12462.scala,odersky,2022-04-08T09:03:52Z,2022-05-16T10:45:06Z
12460,22492,Discourage default arg for extension receiver,"Fixes #12460   I shied away from making it an error  as that is a language change that violates the rule that extension methods are ordinary methods. There are other restrictions  but an extension always allows explicit invocation `m()(x)` that could leverage a default.  The caret is wrong on the second test case (~todo~). Edit: span of default getter was union of first parameter and the param RHS  so that the synthetic position of the getter symbol was a point at the first parameter. Now the getter tree gets the span of the RHS. (That span is non-synthetic  but the definition is still synthetic. The name pos of a synthetic is the point.)",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/typer/RefChecks.scala; tests/warn/i12460.check; tests/warn/i12460.scala,som-snytt,2025-02-01T06:38:54Z,2025-02-20T16:34:49Z
12456,14887,Harden type assignment of lambda trees,Fixes #12456,closed,compiler/src/dotty/tools/dotc/typer/TypeAssigner.scala; tests/neg/i12456.scala,odersky,2022-04-08T09:20:03Z,2022-04-09T08:35:14Z
12453,14886,Prevent stack overflow ICEs in array erasure,Fixes #12453,closed,compiler/src/dotty/tools/dotc/core/TypeErasure.scala,odersky,2022-04-08T09:19:53Z,2022-04-12T11:33:48Z
12448,14889,Even more regression tests,"Closes #12487 Closes #12160 ",closed,tests/neg/i12487.check; tests/neg/i12487.scala; tests/run/i12160.scala,odersky,2022-04-08T09:47:17Z,2022-04-10T04:29:12Z
12432,14888,Disallow package names as types,"Fixes #12432  This revives #12436. I don't know why I closed that PR in the first place. @griggt you were the reviewer. Can you remember whether there was a reason to close it or maybe it was by accident?  ",closed,compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; tests/neg/i12432.scala,odersky,2022-04-08T09:34:09Z,2022-04-09T05:26:34Z
12160,14889,Even more regression tests,"Closes #12487 Closes #12160 ",closed,tests/neg/i12487.check; tests/neg/i12487.scala; tests/run/i12160.scala,odersky,2022-04-08T09:47:17Z,2022-04-10T04:29:12Z
12077,18235,Improve handling of AndTypes on the LHS of subtype comparisons,"Fixes #18226 Fixes #12077   Might fix some other reported issues with AndTypes as well.",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/neg-custom-args/allow-deep-subtypes/i5877.scala; tests/pos/i12077.scala; tests/pos/i18226.scala; tests/pos/i18226a.scala; tests/pos/intersection.scala,odersky,2023-07-18T09:13:16Z,2023-07-19T16:57:46Z
12032,17500,test: add in a regression test for #12032,[skip community_build]  closes #12032 ,closed,tests/run/i12032.check; tests/run/i12032.scala,ckipp01,2023-05-14T11:24:44Z,2023-05-15T06:53:43Z
11982,13780,Don't follow BaseType of abstract binders in MT reduction,Fix #11982 and the associated soundness problem. The issue with the behavior on master arises from the fact that type binder of match types might change as context gets more precise  which results in a single match type reducing in two different ways. This issue comes from the fact that subtyping looks into base types  and is thus able to match a type such as `T <: Tuple2[Int  Int]` against a pattern `case Tuple2[a  b]`  even if the best solutions for `a` and `b` in the current context are not guaranteed to be the best solution in more precise contexts (such as at call site in the added test case).,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/typer/Implicits.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/neg/11982.scala; tests/neg/6570-1.scala; tests/neg/6570.scala; tests/pos/11982-a/119_1.scala; tests/pos/11982-a/119_2.scala; tests/pos/13491.scala; tests/run-custom-args/typeclass-derivation1.scala,OlivierBlanvillain,2021-10-20T14:13:35Z,2022-04-04T13:37:03Z
11982,15341,Partial revert of #13780,"#13780 caused several regressions and I think it is too restrictive as a fix. I am reverting it and will be re-opening the original #11982 issue.  It would be good to get to the bottom of what the soundness problem hinted at in #11982 is  and what a fix should be. As it stands #11982 is not obviously a soundness problem but a separate compilation problem.  If the necessary fix is as restrictive as the one I reverted  we should wait until 3.2 to add it.  Fixes #15319   Also solves #15155 and reclassifies it as a pos test.  This is a more sweeping alternative of #15337. #15337 also fixes #15319 but leaves #15155 as an error.  ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/test/dotc/pos-test-pickling.blacklist; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/neg/11982.scala; tests/neg/6570-1.scala; tests/neg/6570.scala; tests/neg/i15155.check; tests/pos/i15155.scala; tests/run/typeclass-derivation1.scala,odersky,2022-05-31T12:51:20Z,2022-05-31T18:16:10Z
11982,15423,Refine Matchtype checking,"Take up #13780 again  but refine it so that abstract types are allowed in match type reduction as long as they uniquely instantiate type parameters of the type pattern.  Fixes #11982 Fixes #15352 ",closed,compiler/src/dotty/tools/dotc/core/MatchTypeTrace.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/neg/6570-1.check; tests/neg/6570-1.scala; tests/neg/6570.scala; tests/neg/i11982.check; tests/neg/i11982.scala; tests/neg/i11982a.check; tests/neg/i11982a.scala; tests/neg/i13780.check; tests/neg/i13780.scala; tests/neg/i15352.scala; tests/neg/wildcard-match.scala; tests/run-custom-args/typeclass-derivation1.scala,odersky,2022-06-12T08:36:47Z,2022-06-19T21:26:35Z
11982,15500,Backport #15423: Refine Matchtype checking,Backport of #15423 ,closed,compiler/src/dotty/tools/dotc/core/MatchTypeTrace.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; tests/neg/6570-1.check; tests/neg/6570-1.scala; tests/neg/6570.scala; tests/neg/i11982.check; tests/neg/i11982.scala; tests/neg/i11982a.check; tests/neg/i11982a.scala; tests/neg/i13780.check; tests/neg/i13780.scala; tests/neg/i15352.scala; tests/neg/wildcard-match.scala; tests/run-custom-args/typeclass-derivation1.scala,Kordyjan,2022-06-22T13:38:28Z,2022-06-22T16:51:33Z
11978,21330,Allow JLine to fall back to a dumb terminal,"Set the `dumb` JLine option to `null` instead of `false` when a dumb terminal is not forced. This allows JLine to fall back to a dumb terminal if needed.  Fixes #11978.  Before:  ``` ➜ ~/dotty git:(mb/11978) ✗ echo 'object Example { def smth = ""smth"" }' | bin/scala The `--offline` option is experimental Please bear in mind that non-ideal user experience should be expected. If you encounter any bugs or have feedback to share  make sure to reach out to the maintenance team at https://github.com/VirtusLab/scala-cli Exception in thread ""main"" java.lang.IllegalStateException: Unable to create a terminal         at org.jline.terminal.TerminalBuilder.doBuild(TerminalBuilder.java:394)         at org.jline.terminal.TerminalBuilder.build(TerminalBuilder.java:362)         at dotty.tools.repl.JLineTerminal.<init>(JLineTerminal.scala:34)         at dotty.tools.repl.ReplDriver.runUntilQuit(ReplDriver.scala:145)         at dotty.tools.repl.ReplDriver.tryRunning(ReplDriver.scala:136)         at dotty.tools.repl.Main$.main(Main.scala:7)         at dotty.tools.repl.Main.main(Main.scala)         Suppressed: java.io.IOException: Unable to find terminal provider ffm                 at org.jline.terminal.spi.TerminalProvider.load(TerminalProvider.java:74)                 at org.jline.terminal.TerminalBuilder.checkProvider(TerminalBuilder.java:667)                 at org.jline.terminal.TerminalBuilder.getProviders(TerminalBuilder.java:632)                 at org.jline.terminal.TerminalBuilder.doBuild(TerminalBuilder.java:395)                 ... 6 more         Suppressed: java.io.IOException: Unable to find terminal provider jni                 at org.jline.terminal.spi.TerminalProvider.load(TerminalProvider.java:74)                 at org.jline.terminal.TerminalBuilder.checkProvider(TerminalBuilder.java:667)                 at org.jline.terminal.TerminalBuilder.getProviders(TerminalBuilder.java:634)                 at org.jline.terminal.TerminalBuilder.doBuild(TerminalBuilder.java:395)                 ... 6 more         Suppressed: java.io.IOException: Unable to find terminal provider jansi                 at org.jline.terminal.spi.TerminalProvider.load(TerminalProvider.java:74)                 at org.jline.terminal.TerminalBuilder.checkProvider(TerminalBuilder.java:667)                 at org.jline.terminal.TerminalBuilder.getProviders(TerminalBuilder.java:636)                 at org.jline.terminal.TerminalBuilder.doBuild(TerminalBuilder.java:395)                 ... 6 more ```  After:  ``` ➜  ~/dotty git:(mb/11978) echo 'object Example { def smth = ""smth"" }' | bin/scala The `--offline` option is experimental Please bear in mind that non-ideal user experience should be expected. If you encounter any bugs or have feedback to share  make sure to reach out to the maintenance team at https://github.com/VirtusLab/scala-cli Aug 05  2024 3:53:49 PM org.jline.utils.Log logr WARNING: Unable to create a system terminal  creating a dumb terminal (enable debug logging for more information) Welcome to Scala 3.6.0-RC1-bin-SNAPSHOT-git-dce4377 (17.0.8  Java OpenJDK 64-Bit Server VM). Type in expressions for evaluation. Or try :help.  scala> // defined object Example  scala> %                                                                                                                          ➜  ~/dotty  ```",closed,compiler/src/dotty/tools/repl/JLineTerminal.scala; compiler/test-coursier/dotty/tools/coursier/CoursierScalaTests.scala,mbovel,2024-08-05T13:55:24Z,2024-08-06T13:37:58Z
11967,18212,fix #11967: flow typing nullability in pattern matches,Fixes #11967,closed,compiler/src/dotty/tools/dotc/typer/Nullables.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/explicit-nulls/neg/flow-match.scala; tests/explicit-nulls/pos/flow-match.scala,olhotak,2023-07-14T21:11:05Z,2023-10-01T15:31:49Z
11713,15636,Merge nested polytypes in more cases in resolveOverloaded,"In some cases while going deeper into alternatives during overload resolution  we may end up with a nested polytype after dropping contextual parameters.  In particular this can happen for an extension with a `using` clause  as seen in tests/pos/i11713.scala and tests/pos/i13668.scala.  The overload applicability test fails here unless the type parameter lists are merged.  Co-authored-by: Gagandeep Kalra <gagandeepkalra1994@gmail.com> Co-authored-by: Mark T. Kennedy <mtk@acm.org>  Fixes #11713 Fixes #13668",closed,compiler/src/dotty/tools/dotc/typer/Applications.scala; tests/pos/i11713.scala; tests/pos/i13668.scala,griggt,2022-07-09T20:38:17Z,2022-07-10T08:12:34Z
11706,17499,test: add in a regression test for #11706,[skip community_build]  closes #11706 ,closed,tests/run/i11706.check; tests/run/i11706.scala,ckipp01,2023-05-14T11:01:25Z,2023-05-16T10:58:07Z
11681,17498,test: add in a regression test for #11681,This adds in both the original given example and a further minimized one.  [skip community_build]  closes #11681 ,closed,tests/pos/i11681.scala,ckipp01,2023-05-14T10:54:06Z,2023-05-15T06:56:47Z
11541,17385,Fix #11541: Specialize ClassTag[T] in exhaustivity check,Fix #11541: Specialize `ClassTag[T]` in exhaustivity check,closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; tests/patmat/i11541.scala,liufengyun,2023-05-01T16:15:55Z,2023-05-04T09:05:23Z
11332,16225,Support signature polymorphic methods (`MethodHandle` and `VarHandle`),fixes #11332,closed,compiler/src/dotty/tools/backend/jvm/CoreBTypes.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/semanticdb/SemanticSymbolBuilder.scala; compiler/src/dotty/tools/dotc/transform/Recheck.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; project/Build.scala; project/MiMaFilters.scala; tasty/src/dotty/tools/tasty/TastyFormat.scala; tests/explicit-nulls/run/i11332.scala; tests/run/i11332.scala; tests/run/t12348.scala,dwijnand,2022-10-20T16:01:43Z,2022-11-22T15:37:43Z
11262,16970,Check safe initialization of static objects,"The problem is illustrated by the example below:  ``` Scala class Foo(val opposite: Foo) case object A extends Foo(B)     // A -> B case object B extends Foo(A)     // B -> A ``` The check aims to be simple for programmers to understand  expressive  fast  and sound.  The check is centered around two design ideas: (1) initialization-time irrelevance; (2) partial ordering.  The check enforces the principle of _initialization-time irrelevance_  which means that the time when a static object is initialized should not change program semantics. For that purpose  it enforces the following rule:  > **The initialization of a static object should not directly or indirectly read or write mutable state owned by another static object**.  This principle not only puts the initialization of static objects on a solid foundation but also avoids whole-program analysis.  Partial ordering means that the initialization dependencies of static objects form a directed-acyclic graph (DAG). No cycles with length bigger than 1 allowed --- which might lead to deadlocks in the presence of concurrency and strong coupling & subtle contracts between objects.   Related Issues:  https://github.com/lampepfl/dotty/issues/16152 https://github.com/lampepfl/dotty/issues/9176 https://github.com/lampepfl/dotty/issues/11262 https://github.com/scala/bug/issues/9312 https://github.com/scala/bug/issues/9115 https://github.com/scala/bug/issues/9261 https://github.com/scala/bug/issues/5366 https://github.com/scala/bug/issues/9360 ",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/init/Checker.scala; compiler/src/dotty/tools/dotc/transform/init/Objects.scala; compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; compiler/src/dotty/tools/dotc/transform/init/Util.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; library/src/scala/annotation/init.scala; tests/init-global/neg/context-sensitivity.scala; tests/init-global/neg/global-cycle1.check; tests/init-global/neg/global-cycle1.scala; tests/init-global/neg/global-cycle14.scala; tests/init-global/neg/global-cycle2.scala; tests/init-global/neg/global-cycle3.scala; tests/init-global/neg/global-cycle4.scala; tests/init-global/neg/global-cycle5.scala; tests/init-global/neg/global-cycle6.scala; tests/init-global/neg/global-cycle7.scala; tests/init-global/neg/global-cycle8.scala; tests/init-global/neg/global-irrelevance1.scala; tests/init-global/neg/global-irrelevance2.scala; tests/init-global/neg/global-irrelevance3.scala; tests/init-global/neg/global-irrelevance4.scala; tests/init-global/neg/global-irrelevance5.scala; tests/init-global/neg/global-irrelevance6.scala; tests/init-global/neg/global-irrelevance7.scala; tests/init-global/neg/global-list.scala; tests/init-global/neg/global-local-var.scala,liufengyun,2023-02-20T07:02:25Z,2023-06-16T15:46:52Z
11255,17497,test: add in a regression test for #11255,[skip community_build]  closes #11255 ,closed,tests/pos/i11255.scala,ckipp01,2023-05-14T10:28:36Z,2023-05-15T06:57:59Z
11226,20477,Explain unresolvable references better,"We run into problems when referring to a member of a self type of a class that it not also a member of the class from outside via an asSeenFrom.  One example is in 11226.scala where we see: ```scala trait ManagedActorClassification { this: ActorEventBus =>   def unsubscribe(subscriber: Subscriber): Unit }  class Unsubscriber(bus: ManagedActorClassification) {   def test(a: ActorRef): Unit = bus.unsubscribe(a) // error } ``` The problem is that `unsubscribe` refers to the type `Subscriber` which is not resolvable as a member of `bus`. one idea could be to rule out type signatures like `unsubscribe`  similar how we rule out public signatures referring to private members. But this could rule out existing valid programs. For instance  the `unsubscribe` signature is unproblematic if it gets only called with prefixes that inherit `ActorEventBus`. You could say that the problem was instead that the type of `bus` was not specific enough.  In the long term  maybe restricting the signature is the right move. But for now  we just try to give better error messages in the case of existing failures.  Fixes #11226",closed,compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/test/dotc/neg-best-effort-pickling.blacklist; tests/neg/i11226.check; tests/neg/i11226.scala; tests/neg/i11226a.check; tests/neg/i11226a.scala; tests/neg/i16407.check; tests/pos/i11226b.scala,odersky,2024-05-27T11:41:35Z,2024-05-28T20:20:36Z
11226,21129,"Backport ""Explain unresolvable references better"" to LTS",Backports #20477 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeErrors.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; tests/neg/i11226.check; tests/neg/i11226.scala; tests/neg/i11226a.check; tests/neg/i11226a.scala; tests/neg/i16407.check; tests/pos/i11226b.scala,WojciechMazur,2024-07-08T18:12:40Z,2024-07-09T16:55:23Z
11223,17496,test: add in a regression test for #11223,[skip community_build]  closes #11223 ,closed,tests/pos/i11223.scala,ckipp01,2023-05-14T10:20:51Z,2023-05-15T06:59:39Z
11170,14893,Handle case where abstract overrides miss an implementation,Fixes #11170,closed,compiler/src/dotty/tools/dotc/core/NameOps.scala; compiler/src/dotty/tools/dotc/transform/ResolveSuper.scala; tests/neg/i11170.check; tests/neg/i11170.scala; tests/neg/i11170a.scala; tests/pos/MathSpec.scala,odersky,2022-04-08T16:39:34Z,2022-04-20T15:34:11Z
11118,17495,test: add in a regression test for #11118,This adds in a regression test showing that just like in Scala 2 a user sees a warning about how the right hand side doesn't match the type of the left.  closes #11118 ,closed,tests/neg/i11118.check; tests/neg/i11118.scala,ckipp01,2023-05-14T09:57:27Z,2023-05-15T07:00:58Z
11097,14894,Treat RecTypes as potentially uncheckable,Fixes #11097,closed,compiler/src/dotty/tools/dotc/transform/TypeTestsCasts.scala; tests/neg-custom-args/fatal-warnings/i11097.scala,odersky,2022-04-08T17:06:19Z,2022-04-14T07:52:05Z
11052,15412,Fix #11052: Add regression tests,Closes #11052,closed,tests/run/i11052a.scala; tests/run/i11052b.scala,anatoliykmetyuk,2022-06-09T12:51:15Z,2022-06-09T14:45:22Z
10980,16135,Make singleton types subtypes of their refined type,Fixes https://github.com/lampepfl/dotty/issues/10980,closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i10980.scala,mbovel,2022-10-03T12:43:35Z,2022-10-03T19:17:23Z
10947,15481,Find more looping implicits," 1. Also check apply methods of companions of implicit or given classes.     Specifically apply methods of implicit Conversions.   2. Look inside Inlined nodes to detect loops.  Fixes #15474 Fixes #10947",closed,compiler/src/dotty/tools/dotc/transform/CheckLoopingImplicits.scala; tests/neg-custom-args/fatal-warnings/i15474.scala; tests/neg/i13044.check,odersky,2022-06-19T21:19:52Z,2022-06-20T14:27:41Z
10929,20061,Typeclass experiments refactored,"A refactoring of the typeclass-experiments branch according to topics.  DISCLAIMER: This is the same as the previous typeclass-experiments Pre-pre SIP. It's just that the commits are now in a more logical order instead of the chronological order of the first PR. Some part of this is currently under consideration as SIP-64. Other parts might be proposed as Pre-SIPs in the future.  The order of exposition described in the docs of this PR is different from the planned proposals of SIPs. I concentrate here not on how to sequence details  but instead want to present a vision of what is possible. For instance  the docs in this PR start with Self types and `is` syntax  which have turned out to be controversial and that will probably be proposed only late in the sequence of SIPs.  The PR needs a minor release since it adds experimental language imports  which did not exist before. Everything covered is under experimental. Baseline Scala is not affected.      ",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/config/Config.scala; compiler/src/dotty/tools/dotc/config/Feature.scala; compiler/src/dotty/tools/dotc/core/ConstraintHandling.scala; compiler/src/dotty/tools/dotc/core/Contexts.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/Mode.scala; compiler/src/dotty/tools/dotc/core/NameKinds.scala; compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/core/PatternTypeConstrainer.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/SymUtils.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/TypeUtils.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/printing/PlainPrinter.scala; compiler/src/dotty/tools/dotc/printing/Printer.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/reporting/ErrorMessageID.scala; compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/src/dotty/tools/dotc/transform/Erasure.scala,odersky,2024-04-01T17:35:20Z,2024-05-07T19:22:13Z
10864,17362,SIP-53 - Quote pattern explicit type variable syntax,"SIP-53: https://github.com/scala/improvement-proposals/blob/main/content/quote-pattern-type-variable-syntax.md  This PR implements the feature under experimental mode.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; docs/_docs/reference/metaprogramming/macros.md; docs/_docs/reference/syntax.md; tests/neg-custom-args/no-experimental/sip-53-exprimental-a.scala; tests/neg-custom-args/no-experimental/sip-53-exprimental-b.scala; tests/neg-macros/quote-pattern-type-var-bounds.scala; tests/neg-macros/quote-type-variable-no-inference.check; tests/neg-macros/quote-type-variable-no-inference.scala; tests/neg-macros/quotedPatterns-5.scala; tests/pos-macros/i10864/Macro_1.scala; tests/pos-macros/i10864/Test_2.scala; tests/pos-macros/i10864a/Macro_1.scala; tests/pos-macros/i10864a/Test_2.scala; tests/pos-macros/i11738.scala; tests/pos-macros/i7264.scala; tests/pos-macros/multiline-quote-patterns.scala; tests/pos-macros/quote-pattern-type-variable-no-escape.scala,nicolasstucki,2023-04-28T07:44:29Z,2023-06-21T07:58:02Z
10846,20463,Correct Java signature for value classes appearing in type arguments,"As suggested in #10846 the fix to this issue should be to port https://github.com/scala/scala/pull/8127 to scala3  I started by adding the same tests as in the scala2 PR and then tried to find the place where to do the fix by adding some log traces. Unfortunately I am still pretty lost because this is my first time looking at the compiler code.   Any tips where this needs to be fixed are very welcome. Meanwhile a few questions: * The scala2 fix was done in `src/compiler/scala/tools/nsc/transform/Erasure.scala`  should I do the fix for scala3 in `compiler/src/dotty/tools/dotc/transform/Erasure.scala` as well?  * I think I need to do the fix around `ErasedValueType`  either when it is created (in `TypeErasure#eraseDerivedValueClass`) or when it is used (in `Erasure#unbox`).   Please also send me any pointers besides https://dotty.epfl.ch/docs/contributing/index.html regarding compiler contributions",closed,compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; tests/pos/i10347/C_2.java; tests/run/i10846.check; tests/run/i10846/i10846.scala,jtjeferreira,2024-05-23T18:38:41Z,2024-06-20T09:59:15Z
10846,21163,"Backport ""Correct Java signature for value classes appearing in type arguments"" to LTS",Backports #20463 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; tests/pos/i10347/C_2.java; tests/run/i10846.check; tests/run/i10846/i10846.scala,WojciechMazur,2024-07-10T21:13:47Z,2024-07-11T08:04:29Z
10715,16315,Prefer parameterless alternatives during ambiguous overload resolution,"Fixes #10715. Pair-programmed with @smarter this morning :smiley:  Parameterless alternatives were already preferred when there was no matching alternativ (#6955). With this PR  they are also preferred when the alternatives are ""ambiguous"".",closed,compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i10715a.scala; tests/neg/i10715b.scala; tests/pos/i10715-java/C_1.java; tests/pos/i10715-java/caller_2.scala; tests/pos/i10715-scala/test.scala,TheElectronWill,2022-11-10T15:50:24Z,2022-11-17T12:11:37Z
10693,20034,Optimize lub algorithm,"Replace mergeIfSuper by a different algorithm that is more efficient. We drop or-summands in both arguments of a lub that are subsumed by the other. This avoids expensive recursive calls to lub or expensive comparisons with union types on the right.  I tested the previous performance regression #19907 with the new algorithm  and without the changes in #19995 that avoid a slow lub. Where previously it took minutes it now compiles fast.   Specifically  we get for i19907_slow_1000_3.scala: 2.9s with the optimizations in #19995  3.3s with just this PR. And for i19907_slow_1000_4.scala: 3.9s with the optimizations in #19995  4.5s with just this PR. So the optimizations in #19995 are much less critical now since lubs are much faster. Still  it's probably worthwhile to leave them in in case there is a humongous program that stresses lubs even more.  ",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/pos/i10693.scala; tests/semanticdb/metac.expect,odersky,2024-03-27T13:56:05Z,2024-03-29T09:40:41Z
10693,20027,Re-lub also hard union types in simplify,"Simplify had some elaborate condition that prevented hard union types to be recomputed with a lub. I am not sure why that was. In the concrete scenario of i10693.scala  we had an explicitly written union result type `B | A` where `A` and `B` are type parameters. So that is a hard union type. Then `A` was instantiated to `Int | String` and `B` was instantiated to `String | Int`. Re-forming the lub of that union would have eliminated one pair  but since the union type was hard that was not done. On the other hand I see no reason why hard unions should not be re-lubbed. Hard unions are about preventing the widening of or types with a join. I don't see a connection with avoiding re-lubbing.  Fixes #10693",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/test-resources/repl/10693; tests/pos/i10693.scala,odersky,2024-03-26T17:58:01Z,2024-04-04T14:57:24Z
10242,17488,test: add in a regression test for #10242,Closes #10242,closed,tests/pos/i10242.scala,ckipp01,2023-05-12T15:46:05Z,2023-05-13T01:16:33Z
10078,20116,Don't dealias when deciding which arguments to defer,"Don't dealias when deciding which arguments to defer for subtype checking  Fixes #20078",closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i20078/AbstractShapeBuilder.java; tests/pos/i20078/Shape.java; tests/pos/i20078/Test.scala; tests/pos/i20078/Trait.java,odersky,2024-04-07T16:44:54Z,2024-04-08T15:28:38Z
10078,21041,"Backport ""Don't dealias when deciding which arguments to defer"" to LTS",Backports #20116 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/TypeComparer.scala; tests/pos/i20078/AbstractShapeBuilder.java; tests/pos/i20078/Shape.java; tests/pos/i20078/Test.scala; tests/pos/i20078/Trait.java,WojciechMazur,2024-07-05T11:32:11Z,2024-07-05T13:29:11Z
10075,18920,Disallow use of PolyFunction in user code ,"The `PolyFunction` trait should only be used for compiler generated encoded lambdas.  Any other use case that was allowed before was accidental. In the future  we might consider supporting these if there is a good use case. This would probably require a SIP.  Fixes #10075",closed,compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; tests/neg/erased-15.scala; tests/neg/i10075.check; tests/neg/i10075.scala; tests/neg/i10369.scala; tests/neg/i18302a.scala; tests/neg/i18302b.check; tests/neg/i18302b.scala; tests/neg/i18302c.check; tests/neg/i18302c.scala; tests/neg/i18302d.check; tests/neg/i18302d.scala; tests/neg/i18302e.check; tests/neg/i18302e.scala; tests/neg/i18302f.check; tests/neg/i18302f.scala; tests/neg/i18302j.scala; tests/pos/i10369.scala; tests/run/erased-15.check,nicolasstucki,2023-11-14T12:13:24Z,2023-11-23T19:08:32Z
10044,15129,Alternative fix for #10044,"This is a better alternative to fix #10044 than #15120. Unfortunately  it fails dotty.tools.dotc.BootstrappedOnlyCompilationTests.runWithCompiler in the tasty interpreter test. Here I see: ``` -- Error: tests/run-custom-args/tasty-interpreter/interpreter/jvm/Interpreter.scala:13:6 ------------------------------- 13 |  val jvmReflection = new JVMReflection(using q)    |      ^    |compiler bug: created invalid generic signature for getter jvmReflection in scala.tasty.interpreter.jvm.Interpreter    |signature: ()Lscala/tasty/interpreter/jvm/JVMReflection<()Ljava/lang/Object;>;    |if this is reproducible  please report bug at https://github.com/lampepfl/dotty/issues Error while emitting Interpreter.scala ``` If I turn on printing in line 2583 in Types.scala  I see the last output as follows: ``` overwrite TermRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix module class jvm)) class Interpreter)) method q) / getter q  class dotty.tools.dotc.core.Denotations$UniqueRefDenotation with getter q at 106 ``` So it does overwrite  and the overwrite looks OK  but somehow changing a SymDenotation with a UniqueRefDenotation for the same symbol messes up generic signature generation.  Can someone help me digging deeper here?  ",closed,compiler/src/dotty/tools/dotc/Compiler.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/GenericSignatures.scala; compiler/test-resources/repl/i10044,odersky,2022-05-06T10:48:27Z,2022-05-18T14:11:04Z
9996,16327,i9996 is fixed,Fixed #9996,closed,tests/pos/i9996.scala,dwijnand,2022-11-12T18:44:00Z,2022-11-14T11:58:59Z
9891,15359,Add regression tests,Closes #9891,closed,tests/pos-macros/i9891.scala,nicolasstucki,2022-06-02T09:06:58Z,2022-06-07T10:52:39Z
9879,21753,Fix #9879: allow top-level opaque type definitions in REPL,Fix #9879,closed,compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/repl/ParseResult.scala; compiler/test/dotty/tools/repl/ReplCompilerTests.scala,noti0na1,2024-10-11T03:56:30Z,2024-10-22T09:05:33Z
9361,17486,test: add in a regression test for #9361,Closes #9361 ,closed,tests/pos/i9361.scala,ckipp01,2023-05-12T11:33:02Z,2023-05-12T20:11:05Z
9360,17390,Add regression test,Closes #9360,closed,tests/pos-macros/i9360.scala,nicolasstucki,2023-05-02T08:25:50Z,2023-05-03T08:46:25Z
9314,15548,Try to avoid static symbols if leaving them would make a leak,"Possible fix for #9314  Typer.ensureNoLocalRefs doesn't avoid local static refs like anonymous class instances to allow typing more specific expected types with e.g. refinements. Unfortunately this can cause leaks when expected types have to be inferred. This PR tries to fix this problem by adding a fallback that avoids all local symbols if this leak were to happen.",closed,compiler/src/dotty/tools/dotc/core/TypeOps.scala; tests/pos/i9314.scala,KacperFKorban,2022-06-29T11:43:24Z,2022-07-20T16:49:18Z
9176,16970,Check safe initialization of static objects,"The problem is illustrated by the example below:  ``` Scala class Foo(val opposite: Foo) case object A extends Foo(B)     // A -> B case object B extends Foo(A)     // B -> A ``` The check aims to be simple for programmers to understand  expressive  fast  and sound.  The check is centered around two design ideas: (1) initialization-time irrelevance; (2) partial ordering.  The check enforces the principle of _initialization-time irrelevance_  which means that the time when a static object is initialized should not change program semantics. For that purpose  it enforces the following rule:  > **The initialization of a static object should not directly or indirectly read or write mutable state owned by another static object**.  This principle not only puts the initialization of static objects on a solid foundation but also avoids whole-program analysis.  Partial ordering means that the initialization dependencies of static objects form a directed-acyclic graph (DAG). No cycles with length bigger than 1 allowed --- which might lead to deadlocks in the presence of concurrency and strong coupling & subtle contracts between objects.   Related Issues:  https://github.com/lampepfl/dotty/issues/16152 https://github.com/lampepfl/dotty/issues/9176 https://github.com/lampepfl/dotty/issues/11262 https://github.com/scala/bug/issues/9312 https://github.com/scala/bug/issues/9115 https://github.com/scala/bug/issues/9261 https://github.com/scala/bug/issues/5366 https://github.com/scala/bug/issues/9360 ",closed,compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Symbols.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/init/Checker.scala; compiler/src/dotty/tools/dotc/transform/init/Objects.scala; compiler/src/dotty/tools/dotc/transform/init/Semantic.scala; compiler/src/dotty/tools/dotc/transform/init/Util.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; library/src/scala/annotation/init.scala; tests/init-global/neg/context-sensitivity.scala; tests/init-global/neg/global-cycle1.check; tests/init-global/neg/global-cycle1.scala; tests/init-global/neg/global-cycle14.scala; tests/init-global/neg/global-cycle2.scala; tests/init-global/neg/global-cycle3.scala; tests/init-global/neg/global-cycle4.scala; tests/init-global/neg/global-cycle5.scala; tests/init-global/neg/global-cycle6.scala; tests/init-global/neg/global-cycle7.scala; tests/init-global/neg/global-cycle8.scala; tests/init-global/neg/global-irrelevance1.scala; tests/init-global/neg/global-irrelevance2.scala; tests/init-global/neg/global-irrelevance3.scala; tests/init-global/neg/global-irrelevance4.scala; tests/init-global/neg/global-irrelevance5.scala; tests/init-global/neg/global-irrelevance6.scala; tests/init-global/neg/global-irrelevance7.scala; tests/init-global/neg/global-list.scala; tests/init-global/neg/global-local-var.scala,liufengyun,2023-02-20T07:02:25Z,2023-06-16T15:46:52Z
8984,16100,Regression test for #8984,Fixes #8984  in the sense that it crashed before and now an error is reported.,closed,tests/neg/i8984.check; tests/neg/i8984.scala,odersky,2022-09-26T09:08:21Z,2022-09-26T10:45:06Z
8887,17209,Check level consistency of SingletonTypeTree as a type,Fixes #8887,closed,compiler/src/dotty/tools/dotc/staging/CrossStageSafety.scala; tests/neg-macros/i8887.scala; tests/neg-macros/quote-this-a.scala; tests/pos-macros/i8887.scala,nicolasstucki,2023-04-05T08:14:07Z,2023-04-13T11:32:39Z
8827,17976,Suggest imports for the expected type of the underlying implicit not found error,"We used to suggest imports for the outermost type of a chain of implicits. Now  we suggest imports for the `expectedType` of the underlying `NoMatchingImplicits`.  Fixes #8827",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; tests/neg/i8827a.check; tests/neg/i8827a.scala; tests/neg/i8827b.check; tests/neg/i8827b.scala; tests/neg/missing-implicit3.check,julienrf,2023-06-14T14:02:53Z,2023-06-20T11:35:51Z
8827,19028,"Backport ""Suggest imports for the expected type of the underlying implicit not found error"" to LTS",Backports #17976 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; tests/neg/i8827a.check; tests/neg/i8827a.scala; tests/neg/i8827b.check; tests/neg/i8827b.scala; tests/neg/missing-implicit3.check,Kordyjan,2023-11-23T10:12:34Z,2023-12-08T15:16:57Z
8742,17483,test: add in a regression test for #8742,There was also some other tests that were _very_ similar to this  so it seemed like the logical place to also just include this one instead of creating another file for it.  Closes #8742 ,closed,tests/neg-custom-args/fatal-warnings/i8711.check; tests/neg-custom-args/fatal-warnings/i8711.scala,ckipp01,2023-05-12T10:30:26Z,2023-05-12T18:35:59Z
8577,16358,Support inline unapplySeq and with leading given parameters,"Based on #15191 by @gorilskij  and enables support for #12991.  Fixes #8577 Fixes #12991 Fixes #15188 ",closed,compiler/src/dotty/tools/dotc/inlines/Inlines.scala; tests/neg/i12991.scala; tests/pos-macros/i8577a/Macro_1.scala; tests/pos-macros/i8577a/Main_2.scala; tests/pos-macros/i8577b/Macro_1.scala; tests/pos-macros/i8577b/Main_2.scala; tests/pos-macros/i8577c/Macro_1.scala; tests/pos-macros/i8577c/Main_2.scala; tests/pos-macros/i8577d/Macro_1.scala; tests/pos-macros/i8577d/Main_2.scala; tests/pos-macros/i8577e/Macro_1.scala; tests/pos-macros/i8577e/Main_2.scala; tests/pos-macros/i8577f/Macro_1.scala; tests/pos-macros/i8577f/Main_2.scala; tests/pos-macros/i8577g/Macro_1.scala; tests/pos-macros/i8577g/Main_2.scala; tests/pos-macros/i8577h/Macro_1.scala; tests/pos-macros/i8577h/Main_2.scala; tests/pos/i12991.scala; tests/pos/i15188.scala; tests/pos/i15188b.scala; tests/pos/i8577.scala; tests/run/i8577a.scala; tests/run/i8577b.scala; tests/run/i8577c.scala; tests/run/i8577d.scala; tests/run/i8577e.scala; tests/run/i8577f.scala; tests/run/i8577g.scala; tests/run/i8577h.scala,nicolasstucki,2022-11-17T08:21:25Z,2022-12-07T15:59:52Z
8321,17482,test: add in a regression test for #8321,Closes #8321 ,closed,tests/pos/i8321.scala,ckipp01,2023-05-12T09:58:15Z,2023-05-12T18:13:01Z
8300,17481,test: add in a regression test for #8300,Closes #8300 ,closed,tests/pos/i8300.scala,ckipp01,2023-05-12T09:52:25Z,2023-05-12T17:37:04Z
8299,18457,Check user defined PolyFunction refinements ,"Fixes https://github.com/lampepfl/dotty/issues/8299 Fixes https://github.com/lampepfl/dotty/issues/18302",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Nullables.scala; tests/neg/i18302b.check; tests/neg/i18302b.scala; tests/neg/i18302c.check; tests/neg/i18302c.scala; tests/neg/i18302d.check; tests/neg/i18302d.scala; tests/neg/i18302e.check; tests/neg/i18302e.scala; tests/neg/i18302f.check; tests/neg/i18302f.scala; tests/neg/i18302i.scala; tests/neg/i18302j.scala; tests/neg/i8299.scala; tests/pos/i18302a.scala,nicolasstucki,2023-08-25T14:51:34Z,2023-10-12T16:16:20Z
8299,20647,"Backport ""Check user defined PolyFunction refinements "" to LTS",Backports #18457 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Nullables.scala; tests/neg/i18302b.check; tests/neg/i18302b.scala; tests/neg/i18302c.check; tests/neg/i18302c.scala; tests/neg/i18302d.check; tests/neg/i18302d.scala; tests/neg/i18302e.check; tests/neg/i18302e.scala; tests/neg/i18302f.check; tests/neg/i18302f.scala; tests/neg/i18302i.scala; tests/neg/i18302j.scala; tests/neg/i8299.scala; tests/pos/i18302a.scala,WojciechMazur,2024-06-19T21:45:53Z,2024-06-20T09:14:27Z
8299,20700,"Backport ""Check user defined PolyFunction refinements "" to LTS",Backports #18457 to the LTS branch.  PR submitted by the release tooling. [skip ci],closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Types.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Nullables.scala; tests/neg/i18302b.check; tests/neg/i18302b.scala; tests/neg/i18302c.check; tests/neg/i18302c.scala; tests/neg/i18302d.check; tests/neg/i18302d.scala; tests/neg/i18302e.check; tests/neg/i18302e.scala; tests/neg/i18302f.check; tests/neg/i18302f.scala; tests/neg/i18302i.scala; tests/neg/i18302j.scala; tests/neg/i8299.scala; tests/pos/i18302a.scala,WojciechMazur,2024-06-20T13:17:34Z,2024-06-20T14:57:15Z
8100,8796,Re-architecture staging phase and fix all known issues of that phase,"Fix #6140  fix #6772  fix #7030  fix #7892  fix #7997  fix #8651 and improve #8100.      Differences with previous implementation * Only track and check levels within quotes or splices * Track levels of all symbols not at level 0 * Split level checking into specialized variants for types and terms (healType/healTermType) * Detect inconsistent types rather than try to detect consistent ones * Check/heal term inconsistencies only on leaf nodes (TypeTree  RefTree  Ident  This) ",closed,community-build/community-projects/dotty-cps-async; compiler/src/dotty/tools/dotc/transform/PCPCheckAndHeal.scala; compiler/src/dotty/tools/dotc/transform/ReifyQuotes.scala; compiler/src/dotty/tools/dotc/transform/Staging.scala; compiler/src/dotty/tools/dotc/transform/TreeMapWithStages.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/test/dotc/pos-test-pickling.blacklist; tests/neg-macros/quote-this-a.scala; tests/neg-macros/quote-this-c.scala; tests/neg/i7892.scala; tests/pos-macros/i6140.scala; tests/pos-macros/i7030/Macros_1.scala; tests/pos-macros/i7030/Test_2.scala; tests/pos-macros/i8100.scala; tests/pos/i7997.scala; tests/pos/i8651a.scala; tests/pos/i8651b.scala; tests/pos/quote-type-with-param.scala; tests/run-macros/i6772/Macro_1.scala; tests/run-macros/i6772/Test_2.scala,nicolasstucki,2020-04-25T15:20:04Z,2020-05-05T07:36:35Z
8073,8074,Fix #8069: Disallow parameter dependent case classes,"This avoids the crash but intorduces an implementation restriction. I have opened #8073  which suggests a full implementation of parameter dependent case classes so that the restriction can be dropped.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; tests/neg/i8069.scala; tests/pos/i8069.scala,odersky,2020-01-22T21:13:22Z,2020-01-23T13:11:04Z
8073,21698, Minimal support for dependent case classes,"This lets us write:  ```scala     trait A:       type B      case class CC(a: A  b: a.B) ```  Pattern matching works but isn't dependent yet:  ```scala     x match       case CC(a  b) =>         val a1: A = a         // Dependent pattern matching is not currently supported         // val b1: a1.B = b         val b1 = b // Type is CC#a.B ```  (for my usecase this isn't a problem  I'm working on a type constraint API which lets me write things like `case class CC(a: Int  b: Int GreaterThan[a.type])`)  Because case class pattern matching relies on the product selectors `_N`  making it dependent is a bit tricky  currently we generate:  ```scala     case class CC(a: A  b: a.B):       def _1: A = a       def _2: a.B = b ```  So the type of `_2` is not obviously related to the type of `_1`  we probably need to change what we generate into:  ```scala     case class CC(a: A  b: a.B):       @uncheckedStable def _1: a.type = a       def _2: _1.B = b ```  But this can be done in a separate PR.  Fixes #8073.",closed,compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/transform/FirstTransform.scala; compiler/src/dotty/tools/dotc/transform/SyntheticMembers.scala; compiler/src/dotty/tools/dotc/transform/UnrollDefinitions.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i8069.scala; tests/pos/enum-refinement.scala; tests/run-macros/tasty-extractors-2.check; tests/run/i8073.scala; tests/run/i8073b.scala,smarter,2024-10-03T13:03:30Z,2025-02-19T20:56:46Z
7790,17473,test: add regression test for #7790,Closes #7790,closed,tests/pos/i7790.scala,ckipp01,2023-05-12T06:33:03Z,2023-05-12T08:09:14Z
7653,17474,test: add in regression test for #7653,Closes #7653,closed,tests/pos/i7653.scala,ckipp01,2023-05-12T06:37:41Z,2023-05-12T08:18:21Z
7140,15296,New lazy vals implementation,"Based on https://github.com/lampepfl/dotty/pull/14545  Implementing the new lazy vals scheme mentioned in https://github.com/lampepfl/dotty/pull/6979  fixing https://github.com/lampepfl/dotty/issues/7140  New PR to avoid force pushing to main branch of the previous contributor.  Fixes https://github.com/lampepfl/dotty/issues/15149 as well Applied https://github.com/lampepfl/dotty/pull/14780",closed,bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/ContendedInitialization.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccess.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessAny.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessGeneric.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessMultiple.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/InitializedAccessString.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/LazyVals.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/UninitializedAccess.scala; bench-micro/src/main/scala/dotty/tools/benchmarks/lazyvals/UninitializedAccessMultiple.scala; compiler/src/dotty/tools/dotc/config/ScalaSettings.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/transform/LazyVals.scala; compiler/test/dotc/pos-lazy-vals-tests.allowlist; compiler/test/dotc/run-lazy-vals-tests.allowlist; compiler/test/dotty/tools/TestSources.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/printing/PrintingTest.scala; library/src/scala/runtime/LazyVals.scala; project/MiMaFilters.scala; tests/printing/transformed/lazy-vals-legacy.check; tests/printing/transformed/lazy-vals-legacy.scala; tests/printing/transformed/lazy-vals-new.check; tests/printing/transformed/lazy-vals-new.flags; tests/printing/transformed/lazy-vals-new.scala; tests/run-custom-args/tasty-inspector/stdlibExperimentalDefinitions.scala; tests/run/lazyVals_c3.0.0.check; tests/run/lazyVals_c3.0.0.scala; tests/run/lazyVals_c3.1.0.check; tests/run/lazyVals_c3.1.0.scala; tests/run/serialization-new-legacy.check,szymon-rd,2022-05-26T12:55:24Z,2022-10-28T15:58:51Z
7092,19343,Fix implicitNotFound message for type aliases,Fix #7092,closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; tests/neg/i4986c.check; tests/neg/i7092.check; tests/neg/i7092.scala,joroKr21,2023-12-29T00:25:43Z,2024-04-25T07:59:35Z
7092,20275,"Backport ""Fix implicitNotFound message for type aliases""","Backports #19343 to 3.3  Fix #7092",closed,compiler/src/dotty/tools/dotc/reporting/messages.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; tests/neg/i4986c.check; tests/neg/i7092.check; tests/neg/i7092.scala,joroKr21,2024-04-27T06:22:22Z,2024-07-08T17:27:19Z
6991,17342,Unencode quote and splice trees,"We currently use the `Quote` and `Splice` ASTs for untyped quotes and splices. Then when we type them we encode them into `scala.quoted.runtime.Expr.{quote splice nestedSplice}`. This non-semantic representation if fragile and the source of many past bug. In this PR we change the internal representation of quotes and splices to use the `Quote` and `Splice` ASTs as typed trees.  The core of this change in the AST representation and how we type them in `QuotesAndSplices`. Other changes consist in adapting the code from one representation to the other. ```diff - case class Quote(quoted: Tree)(implicit @constructorOnly src: SourceFile) extends TermTree + case class Quote[+T <: Untyped] private[ast] (body: Tree[T])(implicit @constructorOnly src: SourceFile) extends TermTree[T]   - case class Splice(expr: Tree)(implicit @constructorOnly src: SourceFile) extends TermTree  + case class Splice[+T <: Untyped] private[ast] (expr: Tree[T])(implicit @constructorOnly src: SourceFile) extends TermTree[T]  ```  * We do not change the TASTy (file and reflection) representation of quotes and splices. This is something that we should consider adding in a future PR. * We can use the simpler encoding of `splice` in all cases. The additional `Quotes` in `nestedSplice` is not used. * This does not change binary compatibility.",closed,compiler/src/dotty/tools/dotc/CompilationUnit.scala; compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/ast/TreeInfo.scala; compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/ast/tpd.scala; compiler/src/dotty/tools/dotc/ast/untpd.scala; compiler/src/dotty/tools/dotc/core/tasty/TreePickler.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/inlines/Inliner.scala; compiler/src/dotty/tools/dotc/inlines/PrepareInlineable.scala; compiler/src/dotty/tools/dotc/parsing/Parsers.scala; compiler/src/dotty/tools/dotc/printing/RefinedPrinter.scala; compiler/src/dotty/tools/dotc/quoted/Interpreter.scala; compiler/src/dotty/tools/dotc/staging/CrossStageSafety.scala; compiler/src/dotty/tools/dotc/staging/HealType.scala; compiler/src/dotty/tools/dotc/staging/QuoteContext.scala; compiler/src/dotty/tools/dotc/staging/StagingLevel.scala; compiler/src/dotty/tools/dotc/staging/TreeMapWithStages.scala; compiler/src/dotty/tools/dotc/transform/Inlining.scala; compiler/src/dotty/tools/dotc/transform/MegaPhase.scala; compiler/src/dotty/tools/dotc/transform/PickleQuotes.scala; compiler/src/dotty/tools/dotc/transform/PostTyper.scala; compiler/src/dotty/tools/dotc/transform/ReifiedReflect.scala; compiler/src/dotty/tools/dotc/transform/Splicer.scala; compiler/src/dotty/tools/dotc/transform/Splicing.scala; compiler/src/dotty/tools/dotc/transform/Staging.scala; compiler/src/dotty/tools/dotc/transform/SymUtils.scala; compiler/src/dotty/tools/dotc/transform/patmat/Space.scala; compiler/src/dotty/tools/dotc/typer/QuotesAndSplices.scala; compiler/src/dotty/tools/dotc/typer/ReTyper.scala,nicolasstucki,2023-04-25T12:27:01Z,2023-05-02T12:36:36Z
5755,19744,Bump JLine 3.19.0 -> 3.24.1 & sbt 1.9.7 -> 1.9.9,"Fixes #5755  #19704  Tested locally and the difference in behaviour was observed. I'm not sure how to test it with the CI  if anybody has an idea  please let me know.  Also  this issue might be a problem sbt/sbt#7177   Tested as follow: - Observe that the issue in `3.4.1-RC1` ```scala scala-cli repl -S 3.4.1-RC1 Welcome to Scala 3.4.1-RC1 (17.0.7  Java Java HotSpot(TM) 64-Bit Server VM). Type in expressions for evaluation. Or try :help.  scala> class 😃 // defined class 😃  scala> cclas -- [E006] Not Found Error: ----------------------------------------------------- 1 |clas   |^^^^   |Not found: clas - did you mean caps?   |   | longer explanation available when compiling with `-explain` 1 error found  scala> ``` - Publish dotty locally with the correct jline version - Observe that the issue is fixed ```scala scala-cli repl -S 3.4.2-RC1-bin-SNAPSHOT Welcome to Scala 3.4.2-RC1-bin-SNAPSHOT-git-174d4c6 (17.0.7  Java Java HotSpot(TM) 64-Bit Server VM). Type in expressions for evaluation. Or try :help.  scala> class 😃 // defined class 😃  scala> clas -- [E006] Not Found Error: ----------------------------------------------------- 1 |clas   |^^^^   |Not found: clas - did you mean caps?   |   | longer explanation available when compiling with `-explain` 1 error found  scala> ``",closed,compiler/test-coursier/dotty/tools/coursier/CoursierScalaTests.scala; project/Build.scala; project/build.properties,hamzaremmal,2024-02-20T16:04:09Z,2024-02-26T16:52:51Z
5700,17472,test: add in regression test for #5700,Closes  #5700,closed,tests/pos/i5700.scala,ckipp01,2023-05-12T06:27:18Z,2023-05-12T07:46:31Z
5690,5731,Fix assertion error in #5690,"Fixes the assertion error in #5690 by adding the `Method` flag to java annotation constructors. This makes the program compile  but fail at runtime with `java.lang.InstantiationError`. The expected outcome is a compile error  so #5690 should be kept open.",closed,compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; tests/pending/neg/i5690.scala; tests/pos/i5690.scala,panacekcz,2019-01-16T16:32:50Z,2019-01-17T01:41:19Z
5690,16260,Represent Java annotations as interfaces so they can be extended  and disallow various misuses of them,Inspired by the work of hrhino in Scala 2 (https://github.com/scala/scala/pull/6869).,closed,compiler/src/dotty/tools/backend/jvm/BCodeHelpers.scala; compiler/src/dotty/tools/dotc/core/Definitions.scala; compiler/src/dotty/tools/dotc/core/Flags.scala; compiler/src/dotty/tools/dotc/core/StdNames.scala; compiler/src/dotty/tools/dotc/core/SymDenotations.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileConstants.scala; compiler/src/dotty/tools/dotc/core/classfile/ClassfileParser.scala; compiler/src/dotty/tools/dotc/parsing/JavaParsers.scala; compiler/src/dotty/tools/dotc/transform/RepeatableAnnotations.scala; compiler/src/dotty/tools/dotc/typer/Applications.scala; compiler/src/dotty/tools/dotc/typer/Checking.scala; compiler/src/dotty/tools/dotc/typer/Namer.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; compiler/src/scala/quoted/runtime/impl/QuotesImpl.scala; library/src/scala/quoted/Quotes.scala; tests/neg/i5690.scala; tests/neg/java-ann-extends-separate/Ann_1.java; tests/neg/java-ann-extends-separate/Test_2.scala; tests/neg/java-ann-extends/Ann.java; tests/neg/java-ann-extends/Test.scala; tests/neg/java-ann-super-class/Ann.java; tests/neg/java-ann-super-class/Test.scala; tests/neg/java-ann-super-class2/Ann.java; tests/neg/java-ann-super-class2/Test.scala; tests/neg/java-ann-super-class3/Ann.java; tests/neg/java-ann-super-class3/Test.scala; tests/neg/java-fake-ann-separate/FakeAnn_1.java; tests/neg/java-fake-ann-separate/Test_2.scala; tests/neg/java-fake-ann/FakeAnn.java; tests/neg/java-fake-ann/Test.scala,smarter,2022-10-28T15:26:38Z,2022-11-14T14:31:24Z
5469,16807,Close test: GADT constraint drives picking the right implicit,Fixes #5469 ,closed,tests/run/i16785.check; tests/run/i16785.scala,dwijnand,2023-02-02T09:08:09Z,2023-02-07T12:52:29Z
5033,10059,Add regression tests for #5033,,closed,tests/pos/i5033a.scala; tests/pos/i5033b.scala,nicolasstucki,2020-10-21T12:27:21Z,2020-10-21T15:38:15Z
4060,4071,Fix #4060 by marking ghost symbols as unstable,Closes #4060.,closed,compiler/src/dotty/tools/dotc/core/SymDenotations.scala; tests/neg/erased-24.scala; tests/neg/erased-pathdep-1.scala; tests/neg/erased-pathdep-2.scala; tests/neg/i4060.scala; tests/run/erased-24.check; tests/run/erased-24.scala,Blaisorblade,2018-03-04T23:16:20Z,2018-03-09T18:24:23Z
4015,17464,docs: remove legacy information from core data structures,"This PR is taken from the conversation in https://github.com/lampepfl/dotty/issues/4015.  > I had a look at it  I think we should just drop core-data-structures. > There's nothing that's still valuable to know today.  So I dropped most of this  but I also kept a bit of background information that I found interesting and moved it into the dotc-scalac page where we have some more info about symbols  denotations  and differences between dotc/scalac. I thought it fit in nicely there  but let me know if you'd think it should go somewhere else.  closes #4015  ~Based on the comment in https://github.com/lampepfl/dotty/pull/16776#issuecomment-1542404541  I made this against language reference stable. I'm assuming this is correct?~",closed,docs/_docs/internals/core-data-structures.md; docs/_docs/internals/dotc-scalac.md; docs/sidebar.yml,ckipp01,2023-05-11T08:33:21Z,2023-05-12T08:04:35Z
3798,16263,Add an option to only rerun tests that have failed,"- testCompilation supports running only failed tests with --failed argument  fixes #3798",closed,compiler/test/dotc/comptest.scala; compiler/test/dotty/Properties.scala; compiler/test/dotty/tools/dotc/BootstrappedOnlyCompilationTests.scala; compiler/test/dotty/tools/dotc/CompilationTests.scala; compiler/test/dotty/tools/dotc/FromTastyTests.scala; compiler/test/dotty/tools/dotc/IdempotencyTests.scala; compiler/test/dotty/tools/dotc/TastyBootstrapTests.scala; compiler/test/dotty/tools/dotc/coverage/CoverageTests.scala; compiler/test/dotty/tools/dotc/reporting/TestReporter.scala; compiler/test/dotty/tools/vulpix/FailedTestInfo.scala; compiler/test/dotty/tools/vulpix/ParallelTesting.scala; compiler/test/dotty/tools/vulpix/SummaryReport.scala; compiler/test/dotty/tools/vulpix/VulpixMetaTests.scala; compiler/test/dotty/tools/vulpix/VulpixUnitTests.scala; project/Build.scala; sjs-compiler-tests/test/scala/dotty/tools/dotc/ScalaJSCompilationTests.scala,G1ng3r,2022-10-31T13:31:18Z,2022-11-03T08:57:04Z
2576,14840,Fix Scala Wart about implicit () class parameters,"Fixes #2576  As the discussion in #2576 shows  we still have some problems with the implicitly inserted empty parameter lists for class constructors. We do need that empty list to support syntax like `C()` and `new C()`. But it gets in the way if a class has using clauses. Example from the issue: ```scala class Bar(using x: Int)(y: String) given Int = ??? def test = new Bar("""") ``` Here  an implicitly inserted `()` in front makes the last line fail. We'd need `new Bar()("""")`.  If a class has only using clauses as parameters we now insert a `()` at the end instead of at the start. That makes the example compile.  For old-style implicit parameters we don't have a choice. We still need the `()` at the start since otherwise we'd change the meaning of calls with explicit arguments for the implicit parameters.",closed,compiler/src/dotty/tools/dotc/ast/Desugar.scala; compiler/src/dotty/tools/dotc/config/PathResolver.scala; compiler/src/dotty/tools/dotc/core/NamerOps.scala; compiler/src/dotty/tools/dotc/core/tasty/TreeUnpickler.scala; compiler/src/dotty/tools/dotc/transform/Bridges.scala; compiler/src/dotty/tools/dotc/typer/Typer.scala; tests/neg/i12344.scala; tests/pos/given-constrapps.scala; tests/pos/i2576.scala; tests/run-macros/i12021/Macro_1.scala; tests/run/backwardsCompat-implicitParens.check; tests/run/backwardsCompat-implicitParens/A_1_c3.0.2.scala; tests/run/backwardsCompat-implicitParens/Test_2.scala; tests/run/i2567.scala; tests/semanticdb/metac.expect,odersky,2022-04-04T10:24:36Z,2022-04-22T09:18:24Z
1023,14752,Test that TypeTrees are not in an unexpected tree,Fixes https://github.com/lampepfl/dotty/issues/1023,closed,compiler/src/dotty/tools/dotc/ast/Trees.scala; compiler/src/dotty/tools/dotc/transform/TreeChecker.scala,dwijnand,2022-03-22T22:18:23Z,2022-04-20T14:08:59Z
